
var index = lunr(function () {
    this.field('body');
    this.ref('url');
});

var documentTitles = {};



documentTitles["3-8-ea.html#38-ea"] = "3.8-EA";
index.add({
    url: "3-8-ea.html#38-ea",
    title: "3.8-EA",
    body: "# 3.8-EA  This section lists the new features, enhancements, fixed issues and, removed or deprecated features for 3.8-EA (Early Access) release.  "
});

documentTitles["3-8-ea.html#new-features"] = "New Features";
index.add({
    url: "3-8-ea.html#new-features",
    title: "New Features",
    body: "## New Features  The following are the new features introduced with 3.8 release.  "
});

documentTitles["3-8-ea.html#hazelcast-enterprise-features"] = "Hazelcast Enterprise Features";
index.add({
    url: "3-8-ea.html#hazelcast-enterprise-features",
    title: "Hazelcast Enterprise Features",
    body: "##### Hazelcast Enterprise Features  - **Rolling Member Upgrades for Minor Releases**: You can upgrade your Hazelcast members to the next minor release without service interruption. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#rolling-member-upgrades\&quot; target=\&quot;_blank\&quot;&gt;Rolling Member Upgrades chapter&lt;/a&gt;. - **Restore Hot Restart Data in a Different Cluster**: You will be able to restore Hot Restart data on a completely new cluster with different IP addresses or on a cluster of machines formed by existing and new IP addresses. Since this is a removal of a restriction or limitation, nothing will change for current Hot Restart Store users. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#moving-copying-hot-restart-data\&quot; target=\&quot;_blank\&quot;&gt;Moving/Copying Hot Restart Data section&lt;/a&gt;.  "
});

documentTitles["3-8-ea.html#hazelcast-open-source-features"] = "Hazelcast Open Source Features";
index.add({
    url: "3-8-ea.html#hazelcast-open-source-features",
    title: "Hazelcast Open Source Features",
    body: "##### Hazelcast Open Source Features  - **Continuous Query Cache**: With this release, the previously Enterprise feature Continuous Query Cache becomes open source. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#continuous-query-=cache\&quot; target=\&quot;_blank\&quot;&gt;Continuous Query Cache section&lt;/a&gt;. - **HyperLogLog**: HyperLogLog data structure is implemented on top of Hazelcast to estimate cardinality. - **Scheduled Executor Service**: Distributed implementation of Java's `ScheduledExecutorService` API.     "
});

documentTitles["3-8-ea.html#enhancements"] = "Enhancements";
index.add({
    url: "3-8-ea.html#enhancements",
    title: "Enhancements",
    body: "## Enhancements   The following are the enhancements introduced with 3.8 release.  - **Fast Aggregations for Queries**: Please refer to &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#fast-aggregations\&quot; target=\&quot;_blank\&quot;&gt;Fast Aggregations section&lt;/a&gt;. - **Projections for Queries**: Please refer to &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#projections\&quot; target=\&quot;_blank\&quot;&gt;Projections section&lt;/a&gt;. - **Eventually Consistent Near Cache**: With this improvement, possible losses of invalidation events are detected and stale reads are prevented. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#near-cache-eventual-consistency\&quot; target=\&quot;_blank\&quot;&gt;Near Cache Eventual Consistency section&lt;/a&gt;. - **Cluster Split-Brain Protection for Queue and Lock**: Split-brain protection is now available for the queue and lock data structures. Please refer to the sections &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#split-brain-protection-for-lock\&quot; target=\&quot;_blank\&quot;&gt;Lock Split-Brain Protection&lt;/a&gt; and &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#split-brain-protection-for-queue\&quot; target=\&quot;_blank\&quot;&gt;Queue Split-Brain Protection&lt;/a&gt;. - **Unified Near Cache Implementation**: Different near cache implementations for JCache, map, client side and member side are unified. You can refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#near-cache\&quot; target=\&quot;_blank\&quot;&gt;Near Cache section&lt;/a&gt;. - **Ringbuffer with Persistent Datastore**: Implemented for the Ringbuffer which is similar to the existing queue store mechanism. Please refer to &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#ringbuffer-with-persistent-datastore\&quot; target=\&quot;_blank\&quot;&gt;Ringbuffer with Persistent Datastore section&lt;/a&gt;. - **Hazelcast Striim Hot Cache Adapter**: Hot Cache functionality based on Striim's Change Data Capture (CDC) for the underlying database updates. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#hazelcast-striim-hot-cache\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast Striim Hot Cache section&lt;/a&gt;. - **One-off WAN Synchronization with Dynamically Added Endpoint**: Improvement to allow copying the maps' all content to a target cluster dynamically in runtime. - **Hot Restart Usability Improvements**: When a cluster with Hot Restart enabled is restarted, it starts in the ACTIVE state. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#hot-restart-types\&quot; target=\&quot;_blank\&quot;&gt;Hot Restart Types section&lt;/a&gt;. - **Hot Restart with Incomplete Members**: The restart procedure for a cluster having Hot Restart enabled is now more flexible by allowing you to do a partial start, which basically means that once the cluster is shutdown, it can be restarted with some missing members. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#partial-start\&quot; target=\&quot;_blank\&quot;&gt;Partial Start section&lt;/a&gt;. - **Copy Hot Restart Store data from Source to Target**: You can copy Hot Restart Store data from a running cluster to a target without shutting down the source cluster. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#hot-backup\&quot; target=\&quot;_blank\&quot;&gt;Hot Backup section&lt;/a&gt;. - **Improvement in WAN Queue Full Behavior**: Now, Hazelcast throws an exception when the queue is full and replication is active, unless it is stopped on the Management Center. Please refer to &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.8-EA/manual/html-single/index.html#queue-full-behavior\&quot; target=\&quot;_blank\&quot;&gt;Queue Full Behavior section&lt;/a&gt;.  The following are the other improvements performed to solve the enhancement issues opened by the Hazelcast customers/team.  - It would be nice to have names assigned to all threads created by Hazelcast (and not the default ones, e.g., `pool-2-thread-1`, `pool-2-thread-2`). &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9210\&quot; target=\&quot;_blank\&quot;&gt;[9210]&lt;/a&gt; - There should be a more detailed and clarifying information in the diagnostics of `PartitionIteratingOperation`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8855\&quot; target=\&quot;_blank\&quot;&gt;[8855]&lt;/a&gt; - When there is no access to `NodeEngine`, the logger should be able to be used from a static context without any side effects to the logging configuration. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8760\&quot; target=\&quot;_blank\&quot;&gt;[8760]&lt;/a&gt; - Client tasks should be bounced back when a member has not completely start yet. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8715\&quot; target=\&quot;_blank\&quot;&gt;[8715]&lt;/a&gt; - Currently the property `com.hazelcast.map.impl.eviction.ExpirationManager.PERIOD` is hard-coded to 5 seconds. Making it a configurable property will help in tuning the eviction. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8277\&quot; target=\&quot;_blank\&quot;&gt;[8277]&lt;/a&gt; - The method `com.hazelcast.topic.impl.TopicProxy#publish` serializes the message even if the message is never sent due to having no subscribers. In the case of non-global-ordering and non-client use, the implementation should defer serialization until it has established that there are subscribers. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8262\&quot; target=\&quot;_blank\&quot;&gt;[8262]&lt;/a&gt; - Configuration setting for WAN replication queue should be only for primary entries. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7124\&quot; target=\&quot;_blank\&quot;&gt;[7124]&lt;/a&gt; - Currently if you want to use Container-Managed Transactions with Hazelcast within a JEE Application Server, you need to use the provided JCA Adapter. This JCA Adapter creates a Hazelcast instance. This should be allowed: configuration of the JCA Adapter to be either Server or Client-based. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5667\&quot; target=\&quot;_blank\&quot;&gt;[5667]&lt;/a&gt; - Currently `PartitionIteratingOperation` consumes a generic operation thread, while the operations for the partitions are running. This means that the generic thread pool can dry out and this can cause a lot of problems for important tasks that cannot be executed since the thread pool is empty. A `PartitionIteratingService` should be introduced where the system can lookup TraceableOperations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4889\&quot; target=\&quot;_blank\&quot;&gt;[4889]&lt;/a&gt;    "
});

documentTitles["3-8-ea.html#fixes"] = "Fixes";
index.add({
    url: "3-8-ea.html#fixes",
    title: "Fixes",
    body: "## Fixes  The following are the issues solved for Hazelcast 3.8 release.  - Hazelcast 3.7.3 and Spring Boot 1.4.2 get the error `PortableFactory[-22] is already registered`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9353\&quot; target=\&quot;_blank\&quot;&gt;[9353]&lt;/a&gt; - Problems with timeout in blocking calls. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9250\&quot; target=\&quot;_blank\&quot;&gt;[9250]&lt;/a&gt; - Client protocol cannot handle \&quot;null\&quot;s in the collection. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9240\&quot; target=\&quot;_blank\&quot;&gt;[9240]&lt;/a&gt; - Callback for time to live (for map eviction) is invoked with a significant delay. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8894\&quot; target=\&quot;_blank\&quot;&gt;[8894]&lt;/a&gt; - \&quot;Warning 2\&quot; in `IMap::tryRemove` method's code comments is not correct. This method returns only a boolean. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8884\&quot; target=\&quot;_blank\&quot;&gt;[8884]&lt;/a&gt; - When clients lose connection to the members in the cluster, even after the clients are reconnected to the cluster, the Entry/Message Listeners are never fired again. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8847\&quot; target=\&quot;_blank\&quot;&gt;[8847]&lt;/a&gt; - Fixed `max-size` value behavior for Near Cache configuration. If you set 0 for the `max-size`, now, it is valued as `Integer.MAX_VALUE` as expected and documented. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8826\&quot; target=\&quot;_blank\&quot;&gt;[8826]&lt;/a&gt; - Spring XML configuration: The smart routing attribute defaults to false while the documentation says it defaults to true. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8746\&quot; target=\&quot;_blank\&quot;&gt;[8746]&lt;/a&gt; - In Hazelcast 3.6.3, the error `Current thread is not owner of the lock` shows up when using Hazelcast client to perform the actions. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8730\&quot; target=\&quot;_blank\&quot;&gt;[8730]&lt;/a&gt; - Bulk `get` operation with 100 keys fails. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8535\&quot; target=\&quot;_blank\&quot;&gt;[8535]&lt;/a&gt; - Member attributes go missing after merging from a split-brain scenario. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7697\&quot; target=\&quot;_blank\&quot;&gt;[7697]&lt;/a&gt; - The method `setEvictionPolicy` for near cache configuration wants a string argument whereas the same for map configuration wants an enum value. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/2010\&quot; target=\&quot;_blank\&quot;&gt;[2010]&lt;/a&gt;   "
});

documentTitles["3-8-ea.html#removeddeprecated-features"] = "Removed/Deprecated Features";
index.add({
    url: "3-8-ea.html#removeddeprecated-features",
    title: "Removed/Deprecated Features",
    body: "## Removed/Deprecated Features  - Aggregators feature is deprecated. Instead, Fast-Aggregations feature should be used.  "
});



documentTitles["3-7-4.html#374"] = "3.7.4";
index.add({
    url: "3-7-4.html#374",
    title: "3.7.4",
    body: "# 3.7.4  The following are the fixed issues for 3.7.4 release.  - Client protocol should be updated to support old .NET clients that have an issue preventing them to connect to 3.7.3 and newer clusters. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9388\&quot; target=\&quot;_blank\&quot;&gt;[9388]&lt;/a&gt;  - Fixed `keyStateMarker` problems. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9382\&quot; target=\&quot;_blank\&quot;&gt;[9382]&lt;/a&gt; - When nodes terminates concurrently, clusterService.removeAddress can fail because target node is already shutdown. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9324\&quot; target=\&quot;_blank\&quot;&gt;[9324]&lt;/a&gt; - Cache event listeners trigger multiple events when the listener is configured declaratively (XML). &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9315\&quot; target=\&quot;_blank\&quot;&gt;[9315]&lt;/a&gt; - When client is connected and the client process is paused, e.g., using a debugger, then the member starts printing the warning message (`Client heartbeat is timed out`) every 10 seconds. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9308\&quot; target=\&quot;_blank\&quot;&gt;[9308]&lt;/a&gt; - Hazelcast client outside the AWS cloud cannot connect to Hazelcast member inside the AWS cloud. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9290\&quot; target=\&quot;_blank\&quot;&gt;[9290]&lt;/a&gt; - In case of a retrying operation, an old heartbeat could still be stored on the invocation. If the invocation monitor sees this, it does not understand that this is from an old invocation. It concludes that the invocation has not received any recent heartbeats and aborts the invocation. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9287\&quot; target=\&quot;_blank\&quot;&gt;[9287]&lt;/a&gt; - Client endpoint may have a different connection than the one it was initially constructed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9282\&quot; target=\&quot;_blank\&quot;&gt;[9282]&lt;/a&gt; - The method `loadAll(keys)` has to notify `RecordStores` about the end of loading. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9260\&quot; target=\&quot;_blank\&quot;&gt;[9260]&lt;/a&gt; - Partitions should be unavailable/inaccessible until `MigrationAwareServices` complete commit/rollback during migration and/or promotion. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9235\&quot; target=\&quot;_blank\&quot;&gt;[9235]&lt;/a&gt; - When backups are reordered and a backup with a version greater than (localVersion + 1) is received, backup is applied but partition replica versions are not updated. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9206\&quot; target=\&quot;_blank\&quot;&gt;[9206]&lt;/a&gt;  "
});



documentTitles["3-7-3.html#373"] = "3.7.3";
index.add({
    url: "3-7-3.html#373",
    title: "3.7.3",
    body: "# 3.7.3  The following are the fixed issues for 3.7.3 release.  - `MapLoader.loadAll(true)` does not reload after reloading with given keys. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9263\&quot; target=\&quot;_blank\&quot;&gt;[9263]&lt;/a&gt;   - The `scheduler` in `TcpIpConnectionManager` is not completing after the method `instance.shutdown()` is called. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9187\&quot; target=\&quot;_blank\&quot;&gt;[9187]&lt;/a&gt; - `EntryView`'s `storeTime` and `expirationTime` are not available even though they are set. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9166\&quot; target=\&quot;_blank\&quot;&gt;[9166]&lt;/a&gt; - `NullPointerException` is thrown while deleting an entry through Entry Processor by setting value to NULL. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9135\&quot; target=\&quot;_blank\&quot;&gt;[9135]&lt;/a&gt; - There is a discrepancy between the Reference Manual and source code in the default value of `hazelcast.heartbeat.interval.seconds`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9070\&quot; target=\&quot;_blank\&quot;&gt;[9070]&lt;/a&gt; - When Hazelcast is upgraded from 3.6.5 to 3.7.1, calls to Spring cache generate exceptions. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9023\&quot; target=\&quot;_blank\&quot;&gt;[9023]&lt;/a&gt; - Hazelcast 3.6.x client cannot obtain cache proxy from 3.7.x cluster. Configuration creation and retrieval seem to be not working on 3.6.x clients when they connect to a 3.7.x cluster. Two new system properties added, namely `hazelcast.compatibility.3.6.server` and `hazelcast.compatibility.3.6.client`. When upgrading from (assuming that you are using ICache) 3.6.x to 3.7.3 then the servers should be started with `-Dhazelcast.compatibility.3.6.client=true` to enable existing 3.6.x clients work properly. When upgrading from 3.7.1 and 3.7.2 to 3.7.3 this is not needed.&lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/9006\&quot; target=\&quot;_blank\&quot;&gt;[9006]&lt;/a&gt;  ***NOTE:*** *Please note that there is no change in the Hazelcast cluster member upgrade procedure; the cluster members cannot have mixed major versions (e.g., a cluster of 3.6.x member and 3.7.x member). The above change only relates to clients (the mixed clients are supported starting from version 3.6 with the Open Binary Client Protocol). Hence, you can have a 3.6.x client running with a 3.7.x cluster.*  - When clients lose connection to the nodes in the cluster, even after the clients reconnected to the cluster, the Entry/MessageListeners never fired again. When you register a listener, the registration to the members are invoked with a timeout value of connection-timeout. Keeping this value short can cause a timeout exception during a listener registration. Therefore, you may need to increase the default value (i.e. 5 seconds), please refer to the [Setting Connection Timeout section](http://docs.hazelcast.org/docs/latest/manual/html-single/index.html#setting-connection-timeout). &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8847\&quot; target=\&quot;_blank\&quot;&gt;[8847]&lt;/a&gt; - There is an unnecessary warning about member side near cache invalidation operations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8841\&quot; target=\&quot;_blank\&quot;&gt;[8841]&lt;/a&gt;  "
});



documentTitles["3-7-2.html#372"] = "3.7.2";
index.add({
    url: "3-7-2.html#372",
    title: "3.7.2",
    body: "# 3.7.2  The following are the fixed issues for 3.7.2 release.  - The container `WaitingOperation` (which wraps `BlockingOperation`) is asked for call ID/caller address. But this container object does not have any sensible information, so the heartbeat is not constructed correctly for a blocked operation. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8955\&quot; target=\&quot;_blank\&quot;&gt;[8979]&lt;/a&gt; - JCache backup operation does not propagate the exception `CacheNotExists`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8955\&quot; target=\&quot;_blank\&quot;&gt;[8955]&lt;/a&gt; - The log message \&quot;unsafe unavailable\&quot; is at WARNING level and it also displays the full stack trace. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8852\&quot; target=\&quot;_blank\&quot;&gt;[8852]&lt;/a&gt; - When a predicate for distributed query is executed on a lite member it throws the exception `ClassNotFound`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8849\&quot; target=\&quot;_blank\&quot;&gt;[8849]&lt;/a&gt; - While running under non-HotSpot JVM, the exception `NoSuchField` is thrown. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8835\&quot; target=\&quot;_blank\&quot;&gt;[8835]&lt;/a&gt;  "
});



documentTitles["3-7-1.html#371"] = "3.7.1";
index.add({
    url: "3-7-1.html#371",
    title: "3.7.1",
    body: "# 3.7.1  The following are the fixed issues for 3.7.1 release.  - Behavior of JCache near cache invalidation events changed: (i) the method `Cache.close` now delivers near cache invalidation events, (ii) the method `Cache.destroy` no longer delivers invalidation events, (iii) the method `CacheManager.destroyCache` when invoked from a client-side cache manager no longer delivers invalidation events. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8801\&quot; target=\&quot;_blank\&quot;&gt;[8801]&lt;/a&gt; - Aggressive SQL predicate flattening may result in wrong parsing of SQL. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8799\&quot; target=\&quot;_blank\&quot;&gt;[8799]&lt;/a&gt; - To properly configure within Spring context, incorrect client defaults should be fixed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8761\&quot; target=\&quot;_blank\&quot;&gt;[8761]&lt;/a&gt; - `NullPointerException` is thrown when the class `DefaultNodeExtension` has been loaded by two different class loaders. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8755\&quot; target=\&quot;_blank\&quot;&gt;[8755]&lt;/a&gt; - `HazelcastInstanceNotActive` exception is thrown which is misleading. When a remote member is shutdown while destroying a proxy, no warnings should be logged. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8736\&quot; target=\&quot;_blank\&quot;&gt;[8736]&lt;/a&gt; - Test failure fixes: &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8702\&quot; target=\&quot;_blank\&quot;&gt;[8702]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8694\&quot; target=\&quot;_blank\&quot;&gt;[8694]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8460\&quot; target=\&quot;_blank\&quot;&gt;[8460]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7022\&quot; target=\&quot;_blank\&quot;&gt;[7022]&lt;/a&gt; - Missing dependency for JSPC plugin should be added. &lt;a href=\&quot;https://github.com/hazelcast/management-center/pull/297\&quot; target=\&quot;_blank\&quot;&gt;[297]&lt;/a&gt;   "
});



documentTitles["3-7.html#37"] = "3.7";
index.add({
    url: "3-7.html#37",
    title: "3.7",
    body: "# 3.7  This section lists the new features, enhancements, fixed issues and, removed or deprecated features for 3.7 release.  "
});

documentTitles["3-7.html#new-features"] = "New Features";
index.add({
    url: "3-7.html#new-features",
    title: "New Features",
    body: "## New Features  The following are the new features introduced with 3.7 release.  - **Custom Eviction Policies**: You can implement and use your own eviction policy. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#custom-eviction-policy\&quot; target=\&quot;_blank\&quot;&gt;Custom Eviction Policy section&lt;/a&gt;. - **Discovery SPI Implementation for Microsoft Azure Services**: Hazelcast members can be discovered within your Azure resource group. You can add this implementation as a plugin to your projects. Please refer to &lt;a href=\&quot;https://github.com/sedouard/hazelcast-azure\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast-Azure&lt;/a&gt; plugin page. - **Hazelcast CLI with Scripting**: A command line interface that supports scripting. You can automate cluster operations such as start, stop, and force start using shell scripting. Please refer to &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-cli\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast CLI&lt;/a&gt; plugin page. - **Hazelcast for OpenShift and CloudFoundry**: Hazelcast members on OpenShift and CloudFoundry can discover each other. Please refer to &lt;a href=\&quot;https://hub.docker.com/r/hazelcast/openshift/\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast OpenShift&lt;/a&gt; and &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-cloudfoundry\&quot; target=\&quot;_blank\&quot;&gt;Hazelcast CloudFoundry&lt;/a&gt; plugin pages. - **Apache Spark Connector:** A plugin which allows Hazelcast maps and caches to be used as shared RDD caches by Spark using the Spark RDD API. Please refer to the plugin's repo at &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-spark\&quot; target=\&quot;_blank\&quot;&gt;Spark Connector for Hazelcast&lt;/a&gt;. - **Alignment of WAN Replication Clusters:** This feature provides a mechanism to align or realign distributed objects in the clusters connected through WAN. WAN replication mirrors changes from a map or cache in one cluster to another. It was maintaining the alignment but was not attaining. Now when the receiving cluster is empty and the sending cluster is not, objects are aligned. And if changes have been dropped for any reason, realignment is attained. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#synchronizing-wan-target-cluster\&quot; target=\&quot;_blank\&quot;&gt;Synchronizing WAN Target Cluster section&lt;/a&gt;.  - **Fault Tolerant Executor Service:** This new data structure is introduced to guarantee that no execution tasks will be lost when a member goes down. Please refer to the &lt;a href=\&quot;http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#durable-executor-service\&quot; target=\&quot;_blank\&quot;&gt;Durable Executor Service section&lt;/a&gt;.     "
});

documentTitles["3-7.html#enhancements"] = "Enhancements";
index.add({
    url: "3-7.html#enhancements",
    title: "Enhancements",
    body: "## Enhancements   The following are the enhancements introduced with 3.7 release.  - **Modularized Hazelcast:** As stated in the above note, 3.7 is Hazelcast's first modularized release. Clients, languages and plugins are now modules which have separate GitHub repositories, Maven modules, and release cycles. Please refer to the [Clients &amp; Languages](http://hazelcast.org/clients-languages/) and [Plugins](http://hazelcast.org/plugins/) pages. - **Near Cache (JCache) Notification Enhancements:** You can disable the near cache notifications for each entry and enable/disable notifications of full-flush events. Please refer to the [ICache Configuration section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#icache-configuration) and see definition of the new configuration element `disable-per-entry-invalidation-events`. - **Migration Algorithm Enhancements:** With these improvements the possibility of a data loss due to a member crash while the partitions are being migrated is eliminated. - **WAN Replication Integrated with Solace**: This integration is achieved through a new JMS endpoint. Please refer to the [Solace Integration section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#solace-integration). - **Cloud Discovery SPI Plugin for Multicast:** You can use multicast discovery for your Hazelcast platform with client/server topology. Only Hazelcast Java client is supported for this release. Please refer to the [Discovering Native Clients section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#discovering-native-clients). - **IMap Eviction Sync with JCache:** Hazelcast Map uses now Hazelcast JCache's eviction algorithm when evicting map entries. - **Docker Image Enhancements:** Hazelcast Docker image is able to integrate with the Service Discovery products such as Zookeeper, Consul, Etcd, and Eureka. Please refer to its repo at [Hazelcast Docker](https://github.com/hazelcast/hazelcast-docker). - **Phone Home Enhancements:** Performed to collect new phone home data to learn more about the environment on which  Hazelcast runs. Please refer to the [Phone Home section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#phone-home). - **`IMap.putAll()` Performance Enhancements:** The performance of `putAll` operation is improved by reducing the number of remote operations and supporting batching. - **Hazelcast Instance and JCache Integration Enhancements:** A direct relation between a Hazelcast instance and JCache is established with this enhancement. You can retrieve and access caches via the method `getCache(String name)` over `HazelcastInstance` API. Please refer to the [JCache - Hazelcast Instance Integration section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#jcache-hazelcast-instance-integration). - **Indexing with Predicates for Entry Processors:** Entry Processor can use indexing when a predicate is used to filter entries that need to be processed. Please refer to the [Using Indexes section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#using-indexes). - **Partition Grouping Enhancements:** You can define partition groups, in the same way as the IP address network configuration with wildcard support. You can also configure zone-aware partition groups for your Hazelcast clusters on AWS. Please refer to the [Partition Group Configuration section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#partition-group-configuration). - **Prevention of Blocking Reads in Transactions:** Now the read operations are blocked only during committing the transactions. - **Jetty and Tomcat Based Web Session Replications:** These features have been made open source. You can reach them at [Tomcat Session Manager](https://github.com/hazelcast/hazelcast-tomcat-sessionmanager/releases) and  [Jetty Session Manager](https://github.com/hazelcast/hazelcast-jetty-sessionmanager/releases) GitHub repos.   The following are the other improvements performed to solve the enhancement issues opened by the Hazelcast customers/team.  - Expanded async API support in IMap, IAtomicLong, and IAtomicReference; async methods now return `ICompletable` and enable a reactive programming style. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8580\&quot;&gt;[8580]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7967\&quot;&gt;[7967]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7960\&quot;&gt;[7960]&lt;/a&gt;   - Call reference IDs are included in the Lock operations issued from member to member, to prevent double locking when lock operation is retried. But, Lock at clients does not have these. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8359\&quot; target=\&quot;_blank\&quot;&gt;[8359]&lt;/a&gt;  - `ReadBackupData` and `MaxIdleSeconds` related documentation should be more clarifying. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8354\&quot; target=\&quot;_blank\&quot;&gt;[8354]&lt;/a&gt;  - Entry listener with predicates should be notified on value entry/exit from the predicate value space. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8340\&quot; target=\&quot;_blank\&quot;&gt;[8340]&lt;/a&gt;  - Collection querying in Portables. This allows querying a collection like `car.wheels[0].pressure` or `car.wheels[any].pressure` in the Portable data format. It also allows using a `ValueExtractor` in the Portable data format. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8132\&quot; target=\&quot;_blank\&quot;&gt;[8132]&lt;/a&gt;  - Performance improvements for the invocation system. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8009\&quot; target=\&quot;_blank\&quot;&gt;[8009]&lt;/a&gt;  - The performance log should have an option to log to the 'shared' logger instead of its own file. It would be useful for environments where Hazelcast cannot create or get a performance log file. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7973\&quot; target=\&quot;_blank\&quot;&gt;[7973]&lt;/a&gt;  - The path for performance logs, which is currently fixed to the user's working directory should be configurable. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7968\&quot; target=\&quot;_blank\&quot;&gt;[7968]&lt;/a&gt;  - Hazelcast `IAtomicLong` data structure provides synchronous methods only; async versions already exist and are available to Hazelcast members via `AsyncAtomicLong` interface. Lack of public a async API for IAtomicLong is impeding Hazelcast integrations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7957\&quot; target=\&quot;_blank\&quot;&gt;[7957]&lt;/a&gt;  - API documentation for `QueueStore` should be enhanced. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7775\&quot; target=\&quot;_blank\&quot;&gt;[7775]&lt;/a&gt;   - It would be better to have a way where near cache notifications for each entry are disabled, but an ability to enable/disable notifications of full-flush events (clear, etc.). &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7580\&quot; target=\&quot;_blank\&quot;&gt;[7580]&lt;/a&gt;  - Hazelcast should support Transaction API of Spring. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7469\&quot; target=\&quot;_blank\&quot;&gt;[7469]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/611\&quot; target=\&quot;_blank\&quot;&gt;[611]&lt;/a&gt;  - For Hazelcast Topic, even the event service's pool size is set to a number larger than one, all of the messages are consumed by only one Hazelcast event thread. The use case includes a single Hazelcast member, both producer and consumer being singletons within the member, and message rate of more than 1000 per second. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7443\&quot; target=\&quot;_blank\&quot;&gt;[7443]&lt;/a&gt;  - Partition strategy should be able to be specified not only in the Hazelcast configuration, but also within the Spring context. In addition, an implementing instance should be specified besides the class which implements the partition strategy. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7363\&quot; target=\&quot;_blank\&quot;&gt;[7363]&lt;/a&gt;  - Async put operations should be reflected at near cache as soon as the method `future.get()` returns. In the case of async put operations and `LocalUpdatePolicy` being `CACHE` at the client side, entries are put to the near cache asynchronously from another task when the response is received. But with this way, when `future.get()` returns, entry might not be inside the near cache (but it will be there eventually). &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7155\&quot; target=\&quot;_blank\&quot;&gt;[7155]&lt;/a&gt;  - For `ICache.iterator()`, `fetchSize` is not configurable. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7041\&quot; target=\&quot;_blank\&quot;&gt;[7041]&lt;/a&gt;  - Unit tests should have a default timeout. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6978\&quot; target=\&quot;_blank\&quot;&gt;[6978]&lt;/a&gt;  - Outgoing ports on Hazelcast clients should be configurable. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6845\&quot; target=\&quot;_blank\&quot;&gt;[6845]&lt;/a&gt;  - The method `IMap.set` does not have a corresponding async version, unlike `put` and `putAsync`. The method `putAsync` is not entirely suitable as an async set, since put returns the previous value mapped to the key, and triggers EntryListeners which may not be desirable. IMap should expose a dedicated `setAsync` to fulfill the contract for set and have the means to do so asynchronously. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6726\&quot; target=\&quot;_blank\&quot;&gt;[6726]&lt;/a&gt;  -  Javadoc for `EntryProcessor.java` should be enhanced by adding notes related to its thread safety. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6593\&quot; target=\&quot;_blank\&quot;&gt;[6593]&lt;/a&gt;  - Custom SPI services should be more Spring-friendly. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6567\&quot; target=\&quot;_blank\&quot;&gt;[6567]&lt;/a&gt;  - The \&quot;spring-aware\&quot; should be enabled programmatically too. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6514\&quot; target=\&quot;_blank\&quot;&gt;[6514]&lt;/a&gt;  - Hibernate 5 should be supported. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5633\&quot; target=\&quot;_blank\&quot;&gt;[5633]&lt;/a&gt;  - The error \&quot;This node is not requested endpoint\&quot; is shown in Docker networking. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4537\&quot; target=\&quot;_blank\&quot;&gt;[4537]&lt;/a&gt;  - It would be nice if the type parameters of `Predicate` were inherited by the `IndexAwarePredicate`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/1686\&quot; target=\&quot;_blank\&quot;&gt;[1686]&lt;/a&gt;  - The class `MigrationEndpoint` should be a part of Hazelcast SPI package. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/1427\&quot; target=\&quot;_blank\&quot;&gt;[1427]&lt;/a&gt;  - When a task is submitted to all members, and an `executeOnEntries` is invoked in the call with a predicate that is based on an index, then the index is ignored and a \&quot;full scan\&quot; of the \&quot;local\&quot; members is performed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/1156\&quot; target=\&quot;_blank\&quot;&gt;[1156]&lt;/a&gt;  - Inconsistency between the declarative and programmatic configuration of network elements should be solved. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/945\&quot; target=\&quot;_blank\&quot;&gt;[945]&lt;/a&gt;    "
});

documentTitles["3-7.html#fixes"] = "Fixes";
index.add({
    url: "3-7.html#fixes",
    title: "Fixes",
    body: "## Fixes  The following are the issues solved for Hazelcast 3.7 release.   - Issue with continuous query natural filtering event types: When the property `hazelcast.map.entry.filtering.natural.event.types` is set to `true`, updating a map entry whose value did not match the predicate to a new value that matches the predicate should publish an event of type `ADDED` instead of `UPDATED`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8648\&quot; target=\&quot;_blank\&quot;&gt;[8648]&lt;/a&gt;  - The method `ClientEngineImpl::getConnectedClientStats` reuses the operation `GetConnectedClientsOperation`. This operation should not be reused for multiple invocations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8628\&quot; target=\&quot;_blank\&quot;&gt;[8628]&lt;/a&gt;  - There is a possible regression in `PartitionAwareOperationFactory` when missing code coverage of `MultipleEntryWithPredicateOperation` is tried to be increased. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8622\&quot; target=\&quot;_blank\&quot;&gt;[8622]&lt;/a&gt;  - When a client is inside the cloud, `DiscoveryAddressTranslator` class does not look for a public/private address flag. Private address should be used when the client is inside the cloud. If not, then public address should be used. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8595\&quot; target=\&quot;_blank\&quot;&gt;[8595]&lt;/a&gt;  - `MigrationThread` can leak after shutting down or even forcefully terminating Hazelcast. It retains the entire `HazelcastInstance`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8560\&quot; target=\&quot;_blank\&quot;&gt;[8560]&lt;/a&gt;  - `QueueOperation` keeps the state between executions. If there is a state, then it should always be set, if-null-then-set idiom should not be applied for operation state. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8546\&quot; target=\&quot;_blank\&quot;&gt;[8546]&lt;/a&gt;  - When the connection is made, the connection type is not known yet. But the connection type is used in the metrics ID; this id is used as soon as the connection is made. So it defaults to NONE in the method `getMetricsId`. It would be better to add a probe \&quot;connection type\&quot; and remove the connection type from the method `TcpIpConnection.getMetricsId`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8540\&quot; target=\&quot;_blank\&quot;&gt;[8540]&lt;/a&gt;  - Commit failure on clients sets the transaction state to ROLLING_BACK, which makes the transaction non-rollbackable. This is not a problem for lock-based data structures (map, multimap, etc.) but it is problematic for collections. State of the transaction should be changed to COMMIT_FAILED rather than ROLLING_BACK upon a commit failure. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8483\&quot; target=\&quot;_blank\&quot;&gt;[8483]&lt;/a&gt;  - `MapAttributeConfig` cannot be loaded in an OSGi environment. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8482\&quot; target=\&quot;_blank\&quot;&gt;[8482]&lt;/a&gt;  - Using Hazelcast out of the box with no configuration creates a Peer-to-Peer cluster. As soon as the configuration file `hazelcast.xml` is created by the user, in which only the logging type is set, Hazelcast does not create a cluster but starts in standalone mode. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8481\&quot; target=\&quot;_blank\&quot;&gt;[8481]&lt;/a&gt;  - `NullPointerException` at the method `HazelcastTimeStamper.getNextTimeStamp`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8465\&quot; target=\&quot;_blank\&quot;&gt;[8465]&lt;/a&gt;  - Portable EntryProcessor is not being called on portable objects. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8365\&quot; target=\&quot;_blank\&quot;&gt;[8365]&lt;/a&gt;  - In Hazelcast Hibernate modules, there is no JCache dependencies in the classpath. When Hazelcast is upgraded to 3.7-SNAPSHOT, `java.lang.NoClassDefFoundError: javax/cache/Cache` error is thrown when mocking HazelcastInstance. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8352\&quot; target=\&quot;_blank\&quot;&gt;[8352]&lt;/a&gt;  - The method `QueryableEntry.serializationService` throws `NullPointerException` when MapReduce is run with extractable entries. Mapping phase of the MapReduce for Portable data formats should be fixed.  &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8346\&quot; target=\&quot;_blank\&quot;&gt;[8346]&lt;/a&gt;  - There is an error when configuring Replicated Map. The return of the method `getConfig` in `ReplicatedMapMBean` should be fixed.  &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8298\&quot; target=\&quot;_blank\&quot;&gt;[8298]&lt;/a&gt;  - `TargetDisconnectedException` is thrown for the clients in 3.7-SNAPSHOT. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8261\&quot; target=\&quot;_blank\&quot;&gt;[8261]&lt;/a&gt;  - TransactionalMap's `removeIfSame` test fails. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8238\&quot; target=\&quot;_blank\&quot;&gt;[8238]&lt;/a&gt;  - Distributed Executor Service does not take `ExecutorConfig.isStatisticsEnabled` into account. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8223\&quot; target=\&quot;_blank\&quot;&gt;[8223]&lt;/a&gt;  - Using `MapStoreConfig` in a cluster raises the exception `Transition not allowed from state NOT_LOADED to LOADED`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8196\&quot; target=\&quot;_blank\&quot;&gt;[8196]&lt;/a&gt;  - The method `ICache::destroy` should remove the cache itself from the owner `CacheManager` because, otherwise, it causes memory leaks due to the cache proxies which are dead but deemed as working, in `AbstractHazelcastCacheManager::caches`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8186\&quot; target=\&quot;_blank\&quot;&gt;[8186]&lt;/a&gt;  - Partition promotion is skipped when a node is terminated during the commit. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8174\&quot; target=\&quot;_blank\&quot;&gt;[8174]&lt;/a&gt;  - The tests check the messages of `InvalidConfigurationExeption`s thrown by the `XmlConfigBuilder`. But these messages are often extracted from `SAXParseException`s which are localized; Maven build is platform dependent and fails. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8169\&quot; target=\&quot;_blank\&quot;&gt;[8169]&lt;/a&gt;  - The method `IAtomicReference:alter` does not persist the changes. When a reference is tried to be altered, no alteration happens. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8149\&quot; target=\&quot;_blank\&quot;&gt;[8149]&lt;/a&gt;  - Cache should not expire entities when `Duration` value is 0. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8148\&quot; target=\&quot;_blank\&quot;&gt;[8148]&lt;/a&gt;  - Deserialization of dynamic proxy instances ignores the configured class loader. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8033\&quot; target=\&quot;_blank\&quot;&gt;[8033]&lt;/a&gt;  - The attribute \&quot;binary\&quot; is missing in the MultiMap configuration within Spring context. It does not exist in Hazelcast configuration schema either. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8000\&quot; target=\&quot;_blank\&quot;&gt;[8000]&lt;/a&gt;   - If you setup an interceptor to change the data being inserted, the entry listeners still fire with the old value. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7991\&quot; target=\&quot;_blank\&quot;&gt;[7991]&lt;/a&gt;  - Unlike the `InvocationFuture` at the server side, `ClientInvocationFuture` immediately propagates `InterruptedException` if the calling thread gets interrupted. This can be a problem when both caller and callee need to agree on whether the operation has executed or not. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7963\&quot; target=\&quot;_blank\&quot;&gt;[7963]&lt;/a&gt;  - Hazelcast 3.2.6 uses too much CPU when it is idle. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7943\&quot; target=\&quot;_blank\&quot;&gt;[7943]&lt;/a&gt;  - Old version of Portable object from a map cannot be read if new `UTF_ARRAY` type field is added. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7926\&quot; target=\&quot;_blank\&quot;&gt;[7926]&lt;/a&gt;  - The method `IMap.size()` reports a stale result when blocked by the initialization of  `MapStore`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7905\&quot; target=\&quot;_blank\&quot;&gt;[7905]&lt;/a&gt;  - Isolated thread pool for priority generic operations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7857\&quot; target=\&quot;_blank\&quot;&gt;[7857]&lt;/a&gt;  - There is an issue when detecting JCache in the classpath. The exception `NoClassDefFound` is thrown when upgrading to a newer Hazelcast version. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7810\&quot; target=\&quot;_blank\&quot;&gt;[7810]&lt;/a&gt;  - Programmatic configuration of logging for Hazelcast client does not work. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7764\&quot; target=\&quot;_blank\&quot;&gt;[7764]&lt;/a&gt;  - Better separators should be used in the exceptions for a clearer read between local and remote stacktraces. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7744\&quot; target=\&quot;_blank\&quot;&gt;[7744]&lt;/a&gt;  - Under the section \&quot;Operation Threading\&quot; of Hazelcast Reference Manual, it states that the default number of partition-aware operation threads is (2 x number of cores). However, when looking at the code and observing the actual number of threads created runtime, it seems like the default value is instead 1 x number of cores instead. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7741\&quot; target=\&quot;_blank\&quot;&gt;[7741]&lt;/a&gt;  - The method `IMap.executeOnKeys()` does not support the empty set (it throws a misleading `NullPointerException`), and is inconsistent with the method `getAll()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7631\&quot; target=\&quot;_blank\&quot;&gt;[7631]&lt;/a&gt;    - Replicated map updates take a very long time. The problematic method is `putAll()`. The replication logic in this method checks whether the data owners are in sync with the replicas. If they are not, this logic syncs them every 30 seconds. This means, when the updates are not replicated to callers, it takes up to 30 seconds to make all the members synchronized. This period should be configurable. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7617\&quot; target=\&quot;_blank\&quot;&gt;[7617]&lt;/a&gt;    - `ScheduledExecutorServiceDelegate` violates contract of `ScheduledExecutorService`. It wraps tasks in `ScheduledTaskRunner` which delegates to a different executor. As a consequence, a task can be executed concurrently and this is a violation of a contract of `ScheduledExecutorService`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7611\&quot; target=\&quot;_blank\&quot;&gt;[7611]&lt;/a&gt;  - If `javax.cache.CacheManager` is created with the default settings, the underlying `HazelcastInstance` is not shutdown when the method `close` is called on the `CacheManager`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7606\&quot; target=\&quot;_blank\&quot;&gt;[7606]&lt;/a&gt;  - The method `containsKey()` of `TransactionalMap` is blocked when the key was previously locked by the method `getForUpdate()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7588\&quot; target=\&quot;_blank\&quot;&gt;[7588]&lt;/a&gt;  - There is an inconsistent behavior when removing from `TransactionalMap` while the key is locked on IMap. In order to avoid trying to remove an entry that may have already been removed in another uncommitted transaction, `IMap.tryLock` is used before performing `TransactionalMap.remove`. This works as expected if the operations occur on a member. But a `TransactionException` is thrown when it occurs on a client when using XA Transaction. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7587\&quot; target=\&quot;_blank\&quot;&gt;[7587]&lt;/a&gt;    - Hazelcast instance should be exposed through `com.hazelcast.spring.cache.HazelcastCacheManager`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7571\&quot; target=\&quot;_blank\&quot;&gt;[7571]&lt;/a&gt;    - Instance name should not be overridden while creating cache manager from the specified configuration file. Also, it would be better to specify instance name via (]`HazelcastCachingProvider.HAZELCAST_INSTANCE_NAME` property when instance configuration is taken from the specified configuration file via `HazelcastCachingProvider.HAZELCAST_CONFIG_LOCATION`.&lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7567\&quot; target=\&quot;_blank\&quot;&gt;[7567]&lt;/a&gt;  - The `addInterceptor()` method in `com.hazelcast.map.impl.MapContainer()` is not thread safe. For example, if two concurrent attempts are made to inject the same interceptor, these will be different interceptor objects with the same ID. In this case, the call to `interceptorMap.put(id, interceptor)` will increase the map size by one, but the call to `interceptors.add(interceptor)` will increase the list size by two. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7520\&quot; target=\&quot;_blank\&quot;&gt;[7520]&lt;/a&gt;  - All JMX Beans disappear when the single Hazelcast instance is shut down in the same JVM. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7467\&quot; target=\&quot;_blank\&quot;&gt;[7467]&lt;/a&gt;  - There are unused elements for Management Center configuration: `cluster-id` and `security-token`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7446\&quot; target=\&quot;_blank\&quot;&gt;[7446]&lt;/a&gt;  - For clients, `InitialMembershipListener.init` is called after `MembershipListener.memberAdded`. This contradicts the content in the Reference Manual.  &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7430\&quot; target=\&quot;_blank\&quot;&gt;[7430]&lt;/a&gt;  - DiscoveryService's `start` and `destroy` methods should be called during the start and shutdown of client when Discovery SPI is enabled. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7347\&quot; target=\&quot;_blank\&quot;&gt;[7347]&lt;/a&gt;  - Return cache config as response even though found and created cache config could not put into cache configs inside cache service. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7208\&quot; target=\&quot;_blank\&quot;&gt;[7208]&lt;/a&gt;  - In Hazelcast Management Center shutting down a node seems to prevent a node from restarting. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7101\&quot; target=\&quot;_blank\&quot;&gt;[7101]&lt;/a&gt;  - `MapStoreConfig` does not override `hashCode` and `equals` methods. Implementation for these two methods should be added. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7035\&quot; target=\&quot;_blank\&quot;&gt;[7035]&lt;/a&gt;  - Data is lost when the member dies during repartitioning. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6628\&quot; target=\&quot;_blank\&quot;&gt;[6628]&lt;/a&gt;   - Some of the map statistics, such as cost and last access time, are calculated by the traversing map entries. Therefore the calculation time exceeds the time interval reserved for management center state sending thread when entry count is too high. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6442\&quot; target=\&quot;_blank\&quot;&gt;[6442]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5905\&quot; target=\&quot;_blank\&quot;&gt;[5905]&lt;/a&gt;  - Eviction with \&quot;eviction-percentage\&quot; does not work. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6432\&quot; target=\&quot;_blank\&quot;&gt;[6432]&lt;/a&gt;  - `InvocationFuture`'s asynchronous calls do not detect the lost operations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6250\&quot; target=\&quot;_blank\&quot;&gt;[6250]&lt;/a&gt;  - The invocation mechanism for blocking operations relies on a periodic timeout so that the operation gets retried. To prevent the calling thread (the thread for `future.get`) from waiting indefinitely, it will periodically ask the `isstillrunning` service if the operation is lost. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6248\&quot; target=\&quot;_blank\&quot;&gt;[6248]&lt;/a&gt;  - Under some circumstances Hazelcast is getting a corrupt value for `IAtomicLong`s when a member leaves the cluster. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6074\&quot; target=\&quot;_blank\&quot;&gt;[6074]&lt;/a&gt;  - When the client disconnects normally, the server logs an info and a warning message containing the text `java.io.EOFException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6035\&quot; target=\&quot;_blank\&quot;&gt;[6035]&lt;/a&gt;  - Session ID management error (500 HTTP error) is shown by Hazelcast 3.5 filter based replication. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5660\&quot; target=\&quot;_blank\&quot;&gt;[5660]&lt;/a&gt;   - Some operating systems (such as HPUX or Solaris) and hardware platforms have constraints about the aligned memory operations. In these architectures memory operations must be byte-by-byte as implemented in `DirectByteBuffer`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5532\&quot; target=\&quot;_blank\&quot;&gt;[5532]&lt;/a&gt;  - Data is lost when a member crashes or is killed during the repartitioning. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5444\&quot; target=\&quot;_blank\&quot;&gt;[5444]&lt;/a&gt;  - Data is lost when a member is terminated. Related scenario is as follows &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5388\&quot; target=\&quot;_blank\&quot;&gt;[5388]&lt;/a&gt;: 	1. Start the first member, and let it populate a map with 100k entries. 	2. Start the second member, and let it start joining the cluster. 	3. Terminate the second member during the join operation. 	4. Observe that data is lost from the first member. &lt;br&gt;&lt;/br&gt;	  - As for now it is very complicated to listen a `getAsync` or `putAsync` result and to integrate it with completable futures or listenable futures. An `ICompletableFuture` should be returned since it is an interface which seems to extend JDK `future`s and is returned by an IMap. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5315\&quot; target=\&quot;_blank\&quot;&gt;[5315]&lt;/a&gt;  - If multiple Hazelcast members attempt to remove values from a key of a multimap concurrently, and then the members are shut down, the multimap can remain in an inconsistent state with entries remaining after all have been removed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5220\&quot; target=\&quot;_blank\&quot;&gt;[5220]&lt;/a&gt;  - `ClassNotFoundException` is thrown when trying to get an entry from a `TransactionalMap`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4969\&quot; target=\&quot;_blank\&quot;&gt;[4969]&lt;/a&gt;  - Profiling a Hazelcast application reveals a thread contention in `SpringManagedContext` on `java.lang.Class.getAnnotation()`. And this calls a synchronized method called `initAnnotationsIfNecessary()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4506\&quot; target=\&quot;_blank\&quot;&gt;[4506]&lt;/a&gt;  - Hazelcast IMap statistics show negative values. After heavy usage of the cache, the number of misses starts showing up negative. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4022\&quot; target=\&quot;_blank\&quot;&gt;[4022]&lt;/a&gt;  - WebFilter may prevent requests from accessing request input stream. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/3829\&quot; target=\&quot;_blank\&quot;&gt;[3829]&lt;/a&gt;  - `WrongTargetException` for `PollOperation` in Queues. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/3754\&quot; target=\&quot;_blank\&quot;&gt;[3754]&lt;/a&gt;  - Hazelcast member continuously logs `WrongTargetException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/3395\&quot; target=\&quot;_blank\&quot;&gt;[3395]&lt;/a&gt;  - When there is a map with write-behind mode and a map store is configured (eviction is not needed); when the method `flush` is called in the IMap, the map store's `store` method can be called concurrently for the same key, namely for those keys which are in the write-behind queue and then forcibly stored by the flush. This is because the flush operation storing all entries in the write-behind queue seems to be executed in the operation thread, while the periodic processing of the write-behind queue is done by an executor service defined in the `WriteBehindQueueManager`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/3338\&quot; target=\&quot;_blank\&quot;&gt;[3338]&lt;/a&gt;   "
});

documentTitles["3-7.html#removeddeprecated-features"] = "Removed/Deprecated Features";
index.add({
    url: "3-7.html#removeddeprecated-features",
    title: "Removed/Deprecated Features",
    body: "## Removed/Deprecated Features  - `WanNoDelayReplication` implementation of Hazelcast's WAN Replication has been removed. You can still achieve this behavior by setting the batch size to `1` while configuring the `WanBatchReplication`. Please refer to the [Defining WAN Replication section](http://docs.hazelcast.org/docs/3.7/manual/html-single/index.html#defining-wan-replication) for more information.  "
});



documentTitles["3-6-7.html#367"] = "3.6.7";
index.add({
    url: "3-6-7.html#367",
    title: "3.6.7",
    body: "# 3.6.7  The following is the fixed issue for 3.6.7 release.  - When loading keys supplied by the user, `keyLoaderState` should not be changed. In some cases, `MapLoader.loadAll(true)` does not reload after reloading with new keys. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9279\&quot; target=\&quot;_blank\&quot;&gt;[9279]&lt;/a&gt;  "
});



documentTitles["3-6-6.html#366"] = "3.6.6";
index.add({
    url: "3-6-6.html#366",
    title: "3.6.6",
    body: "# 3.6.6  The following are the fixed issues for 3.6.6 release.  - `NullPointerException` is thrown while deleting an entry through Entry Processor by setting value to NULL. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9141\&quot; target=\&quot;_blank\&quot;&gt;[9141]&lt;/a&gt; - Indefinite reads of stale values from near cache should be prevented. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/9075\&quot; target=\&quot;_blank\&quot;&gt;[9075]&lt;/a&gt; - Write behind `MapStore` is not retrying to store an entry indefinitely. When an entry cannot be persisted, the retry mechanism stops working after a while. This happens when the distributed map is configured to use the write-behind mechanism. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8918\&quot; target=\&quot;_blank\&quot;&gt;[8918]&lt;/a&gt;  "
});



documentTitles["3-6-5.html#365"] = "3.6.5";
index.add({
    url: "3-6-5.html#365",
    title: "3.6.5",
    body: "# 3.6.5  The following are the fixed issues for 3.6.5 release.  - When a client is inside the cloud, `DiscoveryAddressTranslator` class does not look for a public/private address flag. Private address should be used when the client is inside the cloud. If not, then public address should be used. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8595\&quot; target=\&quot;_blank\&quot;&gt;[8595]&lt;/a&gt; - The method `ClusterMergeTask::waitOnFutureInterruptible` has an almost endless loop. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8527\&quot; target=\&quot;_blank\&quot;&gt;[8527]&lt;/a&gt; - Cluster state should not be allowed to change before startup is completed. Normally, the method `NodeExtension.isStartCompleted()` returns `true` when a member is joined successfully. However, when Hot Restart Store is enabled, it returns `false` until Hot Restart process completes on the whole cluster. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8523\&quot; target=\&quot;_blank\&quot;&gt;[8523]&lt;/a&gt; - `MapPartitionLostListener` is not working. Upon migration commit, the flag `SYNC_WAITING_REPLICA` should not be overwritten. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8505\&quot; target=\&quot;_blank\&quot;&gt;[8505]&lt;/a&gt; - `PartitonServiceBeanDTO` always tries to resolve the domain name. Instead of calling the method `getSocketAddress()` every time, it can use the method `getLocalAddress()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8463\&quot; target=\&quot;_blank\&quot;&gt;[8463]&lt;/a&gt; - Hazelcast Demo application depends on JDK. JRE should be enough on all platforms. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8445\&quot; target=\&quot;_blank\&quot;&gt;[8445]&lt;/a&gt; - Excessive logging of `is-executing': true` checks against long running operations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8386\&quot; target=\&quot;_blank\&quot;&gt;[8386]&lt;/a&gt; - There is a deadlock in `MigrationQueue`. The internal queue and counter are not synced in some situations and this causes deadlock. Usually it happens when there is a migration task failure. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8217\&quot; target=\&quot;_blank\&quot;&gt;[8217]&lt;/a&gt; - The method `ClientSmartInvocationServiceImpl#invokeOnTarget` does not throw `TargetNotMemberException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7997\&quot; target=\&quot;_blank\&quot;&gt;[7997]&lt;/a&gt; - Access data is not updated by local reads when reading from backup is enabled. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7354\&quot; target=\&quot;_blank\&quot;&gt;[7354]&lt;/a&gt; - Missing dependency for JSPC plugin should be added. &lt;a href=\&quot;https://github.com/hazelcast/management-center/pull/297\&quot; target=\&quot;_blank\&quot;&gt;[297]&lt;/a&gt;  "
});



documentTitles["3-6-4.html#364"] = "3.6.4";
index.add({
    url: "3-6-4.html#364",
    title: "3.6.4",
    body: "# 3.6.4  The following are the fixed issues for 3.6.4 release.   - `OperationFactoryWrapper` should use `callersUUID` instead of overriding on the member side. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8437\&quot; target=\&quot;_blank\&quot;&gt;[8437]&lt;/a&gt; - `HazelcastInstanceLoader` ignores \&quot;instance-name\&quot; for clients. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8413\&quot; target=\&quot;_blank\&quot;&gt;[8413]&lt;/a&gt; - Usage of `GroupProperties` in Hibernate modules should be removed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8398\&quot; target=\&quot;_blank\&quot;&gt;[8398]&lt;/a&gt; - Thread interrupt flag check must be added to `StoreWorker`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8345\&quot; target=\&quot;_blank\&quot;&gt;[8345]&lt;/a&gt; - Partition proxies are created eventually on all members. However,  this is an async process driven by the eventing system. If a member does not have a proxy in its registry, then it will not fire `MapPartitionLostListener`. Before firing a partition lost event, proxies should be waited to be created. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8293\&quot; target=\&quot;_blank\&quot;&gt;[8293]&lt;/a&gt; - Ensure skipping previously removed `CacheEntryListenerConfiguration` entries while iterating over added `CacheEntryListenerConfiguration`s in the `CacheConfig` to register listeners. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8283\&quot; target=\&quot;_blank\&quot;&gt;[8283]&lt;/a&gt; - Hazelcast instance is started without problems but Management Center does not launch and throws an exception when bundled Jetty is used with Java versions 1.8.0_91 and higher. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8248\&quot; target=\&quot;_blank\&quot;&gt;[8248]&lt;/a&gt;  "
});



documentTitles["3-6-3.html#363"] = "3.6.3";
index.add({
    url: "3-6-3.html#363",
    title: "3.6.3",
    body: "# 3.6.3  The following are the fixed issues for 3.6.3 release.   - `MapStatisticsAwareService` should obtain the map names from proxy registry. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8209\&quot; target=\&quot;_blank\&quot;&gt;[8209]&lt;/a&gt; - Cache should not expire the entities when `Duration` value is set to `0`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8148\&quot; target=\&quot;_blank\&quot;&gt;[8148]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8206/\&quot; target=\&quot;_blank\&quot;&gt;[8206]&lt;/a&gt; - Collection querying in Portables. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8172/\&quot; target=\&quot;_blank\&quot;&gt;[8172]&lt;/a&gt; - Type extraction by the method `extractedMultiResult` should be fixed when the extraction result is null. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8134\&quot; target=\&quot;_blank\&quot;&gt;[8134]&lt;/a&gt; - Expiration time for the map entries should be calculated based on their latest update times. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8111\&quot; target=\&quot;_blank\&quot;&gt;[8111]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8113\&quot; target=\&quot;_blank\&quot;&gt;[8113]&lt;/a&gt; - Support for the usage of IAM role's defaults should be added. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8100\&quot; target=\&quot;_blank\&quot;&gt;[8100]&lt;/a&gt; - Binary property for MultiMap should be added to XmlConfigBuilder. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8094\&quot; target=\&quot;_blank\&quot;&gt;[8094]&lt;/a&gt; - EC2 auto-discovery in China throws an exception due to a bug in host header handling mechanism. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8073\&quot; target=\&quot;_blank\&quot;&gt;[8073]&lt;/a&gt; - The method `Cluster.shutdown()` ignores lifecycle listeners. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8070\&quot; target=\&quot;_blank\&quot;&gt;[8070]&lt;/a&gt; - Resource adapters should not cast to implementation when using a container to get a connection. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8019\&quot; target=\&quot;_blank\&quot;&gt;[8019]&lt;/a&gt; - Unnecessary deserialization step during the execution of put operations should be removed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8018\&quot; target=\&quot;_blank\&quot;&gt;[8018]&lt;/a&gt; - A URL text with spaces should not be transformed into a URI. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/8016\&quot; target=\&quot;_blank\&quot;&gt;[8016]&lt;/a&gt; - Unnecessary deserialization step in the replicated map data structure should be removed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8014\&quot; target=\&quot;_blank\&quot;&gt;[8014]&lt;/a&gt; - When using `InstanceOfPredicate`, the method `toObject` at the server side causes `NullPointerException`, since the class loader is not set and it is null. Default class loader should be used if it is not set by the configuration to avoid the exception. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7977\&quot; target=\&quot;_blank\&quot;&gt;[7977]&lt;/a&gt; - There may be cases when the server may return a list of entries larger than the requested page size. In this case the client should not put any anchor into the list that is on a page greater than the requested page. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7976\&quot; target=\&quot;_blank\&quot;&gt;[7976]&lt;/a&gt; - When a remote invocation waits indefinitely on the internal executor, a deadlock may occur since its response would use the same executor and since the invocation monitor runs on the same executor. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7944\&quot; target=\&quot;_blank\&quot;&gt;[7944]&lt;/a&gt; - Already published messages should be retrieved after `StaleSequenceException` occurs when `ReliableMessageListener` is registered at the client side. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7928\&quot; target=\&quot;_blank\&quot;&gt;[7928]&lt;/a&gt; - The case of response being equal to null in the class `ClientDelegatingFuture` should be handled. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7901\&quot; target=\&quot;_blank\&quot;&gt;[7901]&lt;/a&gt; - Detection of JCache should be improved. Currently Hazelcast checks if the class `javax.cache.Caching` is available and, if so, Hazelcast creates the JCache service and configures the client protocol messages. However, some older snapshots of JCache JARs have the Caching class available, but other classes are missing. This causes `Class not found` exceptions when members are started. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7899\&quot; target=\&quot;_blank\&quot;&gt;[7899]&lt;/a&gt; - When connection gets an exception from the socket and the method `destroyConnection` is called before connection is authenticated, the client does not have an endpoint and it is not in the map of connections. Hence, the connection cannot be closed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7866\&quot; target=\&quot;_blank\&quot;&gt;[7866]&lt;/a&gt; - Upon subsequent destroy and create operations of IMap, there can be more than one map container referenced by different record stores at the same time. Therefore, indexes can be created in an unexpected map container and this can lead to return less than expected number of results when IMap is queried. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7838\&quot; target=\&quot;_blank\&quot;&gt;[7838]&lt;/a&gt; - After the client is shut down, there should be no invocations left. The method `assert()` of `ClientInvocationServiceSupport` fails. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7836\&quot; target=\&quot;_blank\&quot;&gt;[7836]&lt;/a&gt;     The following are the enhancements performed for 3.6.3 release.  - Phone home should include environment information, such as the operating system name, version and kernel architecture. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7970\&quot; target=\&quot;_blank\&quot;&gt;[7970]&lt;/a&gt; - Exceptions, which are thrown when the method `isMemberSafe()` is called, should go into finest level. When there are topology changes some exceptions are expected. The method `getFutureResult()` should log exceptions as `finest()`, not `warn()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7904\&quot; target=\&quot;_blank\&quot;&gt;[7904]&lt;/a&gt; - Protocol version should be 1 instead of 0. It was set as 0 for the response messages. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7900\&quot; target=\&quot;_blank\&quot;&gt;[7900]&lt;/a&gt;  "
});



documentTitles["3-6-2.html#362"] = "3.6.2";
index.add({
    url: "3-6-2.html#362",
    title: "3.6.2",
    body: "# 3.6.2  The following are the fixed issues for 3.6.2 release.  - Upon subsequent destroy and creation of IMap, there is a possibility that there can be more than one map-containers referenced by different record-stores at the same time. Hence, indexes can be created in an unexpected map-container and this can lead to return less than expected number of results when IMap is queried. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7874\&quot; target=\&quot;_blank\&quot;&gt;[7874]&lt;/a&gt; - Couple of issues related to client should be fixed: (a) There should be no invocations left after client is shut down. (b) When the client-member connection gets an exception from the socket and the method `destroyConnection` is called before the connection is authenticated, the client does not have an endpoint and it is not in the connections map anymore. Connection cannot be closed because of this. (c) Authentication `future` waits infinitely. Because of (b), heartbeat does not work on that connection yet. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/7867\&quot; target=\&quot;_blank\&quot;&gt;[7867]&lt;/a&gt; - In Hazelcast 3.6.1, the OSGi bundle install fails. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7772\&quot; target=\&quot;_blank\&quot;&gt;[7772]&lt;/a&gt; - Timeout happens at the `ClientMapBasicTest`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7718\&quot; target=\&quot;_blank\&quot;&gt;[7718]&lt;/a&gt; - IMap does not send invalidations to the client's near caches after `putAll`/`loadAll` operations at member side. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7715\&quot; target=\&quot;_blank\&quot;&gt;[7715]&lt;/a&gt; - The test `ClientXAStressTest.testCommitConcurrently` fails due to an assertion error that reads as \&quot;the size of the map is not correct\&quot;. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7709\&quot; target=\&quot;_blank\&quot;&gt;[7709]&lt;/a&gt; - The test `ClientTransactionalMapQuorumTest` fails since it timed out. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7693\&quot; target=\&quot;_blank\&quot;&gt;[7693]&lt;/a&gt; - Wildcards do not work with permissions. For example, when a queue permission is defined using wildcard, i.e. `&lt;queue-permission name=\&quot;secure.*\&quot; principal=\&quot;admin\&quot;&gt;` and the queue `secure.orders` is created at the client, Hazelcast throws `AccessControlException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7616\&quot; target=\&quot;_blank\&quot;&gt;[7616]&lt;/a&gt; - The FREE_HEAP_PERCENTAGE eviction policy does not work as documented because the `EvictionChecker` is incorrectly calculating available memory percentage in `checkFreeHeapPercentageEviction`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7599\&quot; target=\&quot;_blank\&quot;&gt;[7599]&lt;/a&gt; - `DiscoveryStrategy`'s `destroy()` method is not called on shutdown. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7545\&quot; target=\&quot;_blank\&quot;&gt;[7545]&lt;/a&gt; - The method `MapStore.storeAll()` is never called when the objects are updated with a delay. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7464\&quot; target=\&quot;_blank\&quot;&gt;[7464]&lt;/a&gt; - WebFilter(3.6-RC1): Session attributes are lost or overwritten with old values when using `deferred-write` by reading them. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7291\&quot; target=\&quot;_blank\&quot;&gt;[7291]&lt;/a&gt; - The method `HazelcastHttpSession.getAttributeNames()` returns entries that were only read but not written. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7033\&quot; target=\&quot;_blank\&quot;&gt;[7033]&lt;/a&gt; - Hazelcast 3.5.3 conflicts with FUSE 6.1. When Hazelcast is integrated into a system with JBoss Fuse 6.1, there appeared some warnings in the logs. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6821\&quot; target=\&quot;_blank\&quot;&gt;[6821]&lt;/a&gt; - An exception is thrown on the server when attempting to deserialize `HIBERNATE4_TYPE_HIBERNATE_CACHE_ENTRY` value. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6683\&quot; target=\&quot;_blank\&quot;&gt;[6683]&lt;/a&gt; - The test `IOBalancerMemoryLeakTest.testMemoryLeak` fails due to a socket exception that reads as \&quot;unexpected end of file from server\&quot;.  &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6496\&quot; target=\&quot;_blank\&quot;&gt;[6496]&lt;/a&gt;   The following are the enhancements performed for 3.6.2 release.  - Hazelcast Docker images are big in size; it would be better to clean them up and reduce their sizes. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7553\&quot; target=\&quot;_blank\&quot;&gt;[7553]&lt;/a&gt; - It would be better to provide an `enterprise-javadoc.jar` in the Hazelcast Enterprise bundle. This way IDEs can auto-import the Javadocs for the Enterprise APIs and provide context sensitive completion/help within the IDE. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7245\&quot; target=\&quot;_blank\&quot;&gt;[7245]&lt;/a&gt; - Management Center WAN Replication metrics take a long time to stabilize. The responsiveness of the Outbound records/sec. metric should be improved. It currently seems to under-report WAN replication performance for 10s of seconds before reaching the same figure as the client side reported metrics.&lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7244\&quot; target=\&quot;_blank\&quot;&gt;[7244]&lt;/a&gt; "
});



documentTitles["3-6-1.html#361"] = "3.6.1";
index.add({
    url: "3-6-1.html#361",
    title: "3.6.1",
    body: "# 3.6.1  The following are the fixed issues for 3.6.1 release.  - Hazelcast 3.6 fails to create `ObjectName` for an instance created with JCache API. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7548\&quot; target=\&quot;_blank\&quot;&gt;[7548]&lt;/a&gt; - The test `com.hazelcast.client.spi.impl.ClientInvocationTest.executionCallback_FailOnShutdown` fails. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7462\&quot; target=\&quot;_blank\&quot;&gt;[7462]&lt;/a&gt; - There are failures in `SystemClockChangeTest`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7444\&quot; target=\&quot;_blank\&quot;&gt;[7444]&lt;/a&gt; - When you use EntryProcessor with a map interceptor, it does not get the correct value. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7414\&quot; target=\&quot;_blank\&quot;&gt;[7414]&lt;/a&gt; - Backup records also increase the owned cache entry count but they should be ignored. Cache statistics show incorrect entry count via the method `getOwnedEntryCount`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7403\&quot; target=\&quot;_blank\&quot;&gt;[7403]&lt;/a&gt; - When getting values from `PredicateSupplier`, the method `DistinctValueAggregation.DistinctValueMapper.map()` throws a `ClassCastException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7398\&quot; target=\&quot;_blank\&quot;&gt;[7398]&lt;/a&gt; - Timeout is not enough for the test `TransferStressTest.testLargePackets`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7393\&quot; target=\&quot;_blank\&quot;&gt;[7393]&lt;/a&gt; - There are failures in the test `ClientExceptionFactoryTest.testException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7360\&quot; target=\&quot;_blank\&quot;&gt;[7360]&lt;/a&gt; - The method `getReplicationImplObject` in `WanTargetClusterConfig` is not used. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7353\&quot; target=\&quot;_blank\&quot;&gt;[7353]&lt;/a&gt; - Entry processor and map put/remove tests in WAN replication module fail.  &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7352\&quot; target=\&quot;_blank\&quot;&gt;[7352]&lt;/a&gt; - Hazelcast namespace for Spring configuration does not support Discovery SPI. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6913\&quot; target=\&quot;_blank\&quot;&gt;[6913]&lt;/a&gt; - When Hazelcast Spring configuration is used for the client and if a serialization configuration is present in the Spring client, then the client hangs forever during the authentication method. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5815\&quot; target=\&quot;_blank\&quot;&gt;[5815]&lt;/a&gt;     "
});



documentTitles["3-6.html#36"] = "3.6";
index.add({
    url: "3-6.html#36",
    title: "3.6",
    body: "# 3.6  This section lists the new features, enhancements and fixed issues for 3.6 release.  "
});

documentTitles["3-6.html#new-features"] = "New Features";
index.add({
    url: "3-6.html#new-features",
    title: "New Features",
    body: "## New Features  The following are the new features introduced with 3.6 release.  - **High-Density Memory Store for Hazelcast Map**: With this release, Hazelcast Map data structure is now equipped with the High-Density Memory Store, previously implemented for Hazelcast JCache. Please refer to the [Setting In Memory Format section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#setting-in-memory-format). - **Discovery Service Provider Interface (Discovery SPI)**: You can use this SPI to discover  Hazelcast instances on cloud environments provided by jclouds&amp;reg;, Kubernetes and many more. The existing discovery mechanisms that Hazelcast provides (Multicast, TCP/IP and Amazon EC2) have been re-implemented on top of this new Discovery SPI. Please refer to the [Discovery SPI section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#discovery-spi). - **Client Protocol**: This feature presents the Hazelcast's new open binary client protocol. Please refer to &lt;a href=\&quot;http://hazelcast.org/documentation/\&quot; target=\&quot;_blank\&quot;&gt;Open Binary Client Protocol Documentation&lt;/a&gt;. - **Client Cross Version Compatibility**: Now you can upgrade your Hazelcast clients independently from servers and other clients. Please refer to &lt;a href=\&quot;http://hazelcast.org/documentation/\&quot; target=\&quot;_blank\&quot;&gt;Open Binary Client Protocol Documentation&lt;/a&gt;. - **Support for cloud providers through jclouds&amp;reg;**: Hazelcast now supports deployments on all the well-known cloud providers through the &lt;a href=\&quot;https://jclouds.apache.org/\&quot; target=\&quot;_blank\&quot;&gt;jclouds&amp;reg;&lt;/a&gt; open source library. Please refer to the [Discovering Members with jclouds section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#discovering-members-with-jclouds). - **Hot Restart Persistence**: This new feature provides fast restarting of the Hazelcast clusters. This is achieved by storing the state of the cluster members to the disk. Please refer to the [Hot Restart Persistence section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#hot-restart-persistence) for more details. - **Ringbuffer and Reliable Topic in Hazelcast Clients**: The data structures Ringbuffer and Reliable Topic recently introduced by Hazelcast (with the release 3.5) are now implemented for Hazelcast Java Client. Ringbuffer has also been implemented for .NET Client. - **Cluster Quorum for Hazelcast JCache**: Cluster Quorum checks are now provided for Hazelcast JCache implementations, too. Please refer to the [Defining a Cluster Quorum section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#defining-a-cluster-quorum) to refresh and to the [ICache Configuration section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#icache-configuration) to learn configuring it for JCache. - **Split Brain Syndrome handler for Hazelcast JCache**: Now Split Brain Syndrome is handled in JCache as it is taken care in Hazelcast Map. Please refer to the [JCache Split-Brain section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#jcache-split-brain).   - **Partition Lost Listener for Hazelcast JCache**: You can listen to partition lost events fired in your Hazelcast JCache implementation. Please refer to the [ICache Configuration section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#icache-configuration). - **Hazelcast Docker image**: Now you can run Hazelcast using our image in the Docker platform. Please refer to [Deploying using Docker](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#deploying-using-docker). - **Lite Members**: With the re-introduction of Hazelcast Lite Members (it was removed starting with Hazelcast 3.0 release), you are able to specify certain members in your cluster so that they do not store data. You can use these lite members mostly for your task executions and listener registrations. Please refer to [Enabling Lite Members](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#enabling-lite-members). - **Querying in collections and arrays**: Hazelcast is now able to query and index attributes of objects stored in a collection or array. Please refer to the [Querying in collections section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#querying-in-collections-and-arrays). - **Custom attributes extraction**: It is now possible to extract a value of an object's attribute using a custom extractor class. Please refer to the [Custom attributes](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#custom-attributes). - **Acquiring locks with a lease time**: Now, you can try to acquire locks with a lease time. Please refer to the the comment for the method `tryLock()` in [ILock code](https://github.com/hazelcast/hazelcast/blob/master/hazelcast/src/main/java/com/hazelcast/core/ILock.java). - **Monitoring the WAN replication**: You can now monitor the state of your WAN replications using the Hazelcast Management Center. Please refer to the [Monitoring WAN Replication section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#monitoring-wan-replication).  "
});

documentTitles["3-6.html#enhancements"] = "Enhancements";
index.add({
    url: "3-6.html#enhancements",
    title: "Enhancements",
    body: "## Enhancements  The following are the enhancements introduced with 3.6 release.  - **Replicated Map improvements**: The implementation of Hazelcast replicated maps has been revisited. Please especially refer to the [Considerations for Replicated Map section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#considerations-for-replicated-map). - **Management Center improvements**: Alerting mechanism added. Please refer to the [Management Center section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#management-center). - **Paging Predicate improvements**: With the performed improvements, now random page accessing is supported. Please refer to the [Filtering with Paging Predicates section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#filtering-with-paging-predicates). - **Rule based query optimizations**: This improvement introduces a query optimizer based on static rewriting rules. The optimizer treats predicates as immutable and returns a modified copy when the optimized one is found. Please refer to the `hazelcast.query.optimizer.type` property definition in the [System Properties section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#system-properties). - **WAN replication improvements**: With the improvements performed on Hazelcast's WAN replication feature, you can now monitor WAN replication events for each data structure and WAN replication now supports different acknowledge types for each target cluster group. Please refer to the [WAN Replication Event Filtering API section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#wan-replication-event-filtering-api) and [WAN Replication Acknowledge Types section](http://docs.hazelcast.org/docs/3.6/manual/html-single/index.html#wan-replication-acknowledge-types) for more information. - **Improvements on Hazelcast's OSGI support**: With this improvement, Hazelcast bundles provide OSGI services so that the users can manage (create, access, shutdown) the Hazelcast instances through this service on OSGI environments. Having the `hazelcast.osgi.start` property enabled, when an Hazelcast OSGI service is activated, a default Hazelcast instance is created automatically. These instances can be served as an OSGI service to be accessed by other bundles. Registering the created Hazelcast instances behavior is enabled by default and can be disabled using the `hazelcast.osgi.register.disabled` property. Each Hazelcast bundle provides a different OSGI service and their instances can be grouped (clustered) together to prevent possible compatibility issues between different Hazelcast versions/bundles. This grouping behavior is enabled by default and can be disabled using the `hazelcast.osgi.grouping.disabled` property. Hazelcast OSGI service's lifecycle (and also the owned/created instances' lifecycles) are the same as the owner Hazelcast bundles. When the bundle is stopped (deactivated), owned service and Hazelcast instances are also deactivated/shutdown and deregistered automatically. Then, when the bundle is re-activated, its service is registered again. In addition, the Hazelcast Enterprise JAR file is also an OSGI bundle like the Hazelcast OSS JAR file.   The following are the other improvements performed to solve the enhancement issues opened by the Hazelcast customers/team.  - On WAN Replication Queue overrun, a `WANReplicationQueueFullException` is expected, but instead, the client receives an `UndefinedErrorCodeException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7241\&quot; target=\&quot;_blank\&quot;&gt;[7241]&lt;/a&gt; - Approximate `max-size` calculation should be removed for IMap eviction. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6463\&quot; target=\&quot;_blank\&quot;&gt;[6463]&lt;/a&gt; - `SpringAwareWebFilter` should have a constructor which takes properties as arguments. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6438\&quot; target=\&quot;_blank\&quot;&gt;[6438]&lt;/a&gt; - Client side and server side cache proxies handle `putAll` operation one by one. This is not efficient. Records for this operation should be grouped as per their partitions and should be sent and processed in batches. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6367\&quot; target=\&quot;_blank\&quot;&gt;[6367]&lt;/a&gt; - Not requested events should not be sent to `MapListener` &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6349\&quot; target=\&quot;_blank\&quot;&gt;[6349]&lt;/a&gt; - Inconsistent and potentially buggy design in `BasicCompletableFuture`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6080\&quot; target=\&quot;_blank\&quot;&gt;[6080]&lt;/a&gt; - Starting with \&quot;hazelcast-wm 3.3\&quot;, OSGI Manifest Spring package imports should be optional. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6072\&quot; target=\&quot;_blank\&quot;&gt;[6072]&lt;/a&gt; - The new client determines the partition ID for every invocation for data structures like queue and list where the partition ID is static. There is no need for this behavior. It should calculate the partition ID for once  when the proxy is created and continue to re-use it. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5848\&quot; target=\&quot;_blank\&quot;&gt;[5848]&lt;/a&gt; - `Map.Entry` supplied to Entry Processor is not Serializable any more. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5611\&quot; target=\&quot;_blank\&quot;&gt;[5611]&lt;/a&gt; - The configuration file `minimal-json` with the provided scope is not picked up by the *shade* plugin. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5543\&quot; target=\&quot;_blank\&quot;&gt;[5543]&lt;/a&gt; - In Spring configuration, when a boolean property is injected for *hazelcast* bean (`&lt;hz:hazelcast:....&lt;/hz:hazelcast`) a `SAXParse` exception is thrown. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5528\&quot; target=\&quot;_blank\&quot;&gt;[5528]&lt;/a&gt; - Currently, key/value pairs are deserialized prior to the execution of entry processor by default.  This leads to the need of domain object at the server side, even if entry processor never uses it. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5301\&quot; target=\&quot;_blank\&quot;&gt;[5301]&lt;/a&gt; - In Spring XML configuration, the attributes of `socket-options` should be of type `xs:string`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4700\&quot; target=\&quot;_blank\&quot;&gt;[4700]&lt;/a&gt; - `ClientMembershipEvent` does not need to have the `member` field. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4282\&quot; target=\&quot;_blank\&quot;&gt;[4282]&lt;/a&gt; - Hazelcast has `lock` with lease time feature but does not support `tryLock` with lease time. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/1564\&quot; target=\&quot;_blank\&quot;&gt;[1564]&lt;/a&gt;  "
});

documentTitles["3-6.html#fixes"] = "Fixes";
index.add({
    url: "3-6.html#fixes",
    title: "Fixes",
    body: "## Fixes  The following are the fixed issues solved for 3.6 release.  **3.6 Fixes**  - Lock requests hang forever after a split-brain recovery: When a member hangs a few minutes, the cluster assumes that this frozen member as dead and the master kicks it. When the frozen member comes back, after some time they figure out it was a split-merge back activity. Problem is, some of the lock requests hang forever without a timeout after the merge. That means some of the previously acquired locks cannot be released and hang in the cluster infinitely; no one can acquire them and there is no one to release them anymore. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/8647\&quot; target=\&quot;_blank\&quot;&gt;[8647]&lt;/a&gt; - In the manifest file, `org.jclouds.*` should be marked as optional dependencies. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7318\&quot; target=\&quot;_blank\&quot;&gt;[7318]&lt;/a&gt; - Tests are needed for `WanReplicationPublisherDelegate`, `WanReplicationEvent`, `MapReplicationUpdate` and `AbstractMultipleEntryBackupOperation` in the Open Source WAN API. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7315\&quot; target=\&quot;_blank\&quot;&gt;[7315]&lt;/a&gt; - Invocation of quorum listener requires at least an attempt to perform a map operation. But it should not require this; just the crash of nodes should be enough to use the quorum mechanism. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7300\&quot; target=\&quot;_blank\&quot;&gt;[7300]&lt;/a&gt; - Owned entry count to be used as the expected near cache hit count should be calculated by checking the partition ownership in the `NearCacheTest::testGetAll`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7285\&quot; target=\&quot;_blank\&quot;&gt;[7285]&lt;/a&gt; - The parameter `minEvictionCheckMillis` controls the maximum frequency of evictions. It is 100ms by default. It means at most 1 eviction is executed in a 100ms interval. No other `put()` operation within this interval triggers an eviction. So, if the put rate is greater than 1 per 100ms, then the number of entries is growing regardless of the `max-size-policy`. This eventually triggers a forced eviction which will prevent `OutOfMemoryException`. Forced evictions are only hiding this issue. Another possible solution is to keep the default interval as it is and apply batching: When X eviction cycles are skipped due the `minEvictionCheckMillis` parameter, then during the next cycle X + 1 entries should be evicted instead of just 1. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7268\&quot; target=\&quot;_blank\&quot;&gt;[7268]&lt;/a&gt; - Descriptions of some maximum size policies defined in the `com.hazelcast.config.EvictionConfig.MaxSizePolicy` and `com.hazelcast.config.MaxSizeConfig.MaxSizePolicy` are not clear and confusing. They should be clarified. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7267\&quot; target=\&quot;_blank\&quot;&gt;[7267]&lt;/a&gt; - Tests under `TopicOverloadDistributedTest` are spuriously failing even on the local machine. They need to be reviewed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7266\&quot; target=\&quot;_blank\&quot;&gt;[7266]&lt;/a&gt;    **3.6-RC1 Fixes**  This section lists the enhancements and fixed issues for 3.6-RC1 (Release Candidate 1) release.  - Javadoc for `IMap.putAll()` does not mention the lack of atomicity in the invocation. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7256\&quot; target=\&quot;_blank\&quot;&gt;[7256]&lt;/a&gt; - When a WAN Queue overrun occurs (with exception enabled), the source cluster logs an excessive amount of noise. This should to be logged. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7242\&quot; target=\&quot;_blank\&quot;&gt;[7242]&lt;/a&gt; - When using Hazelcast as a JCache provider: As JSR-107 Javadoc states, an update should not reset expiry time for `CreatedExpiryPolicy`. However, when a cache entry is updated, it does not expire. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7236\&quot; target=\&quot;_blank\&quot;&gt;[7236]&lt;/a&gt; - Default WAN acknowledge type should be `ACK_ON_RECEIPT`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7160\&quot; target=\&quot;_blank\&quot;&gt;[7160]&lt;/a&gt; - `NullPointerException` is thrown in `ClientRegressionWithMockNetworkTest`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7148\&quot; target=\&quot;_blank\&quot;&gt;[7148]&lt;/a&gt; - Changing clusters in the Management Center does not update/refresh the cluster members in the Scripting tab. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7119\&quot; target=\&quot;_blank\&quot;&gt;[7119]&lt;/a&gt; - A fix is needed for operation retries in `PartitionCheckIfLoadedOperation`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7114\&quot; target=\&quot;_blank\&quot;&gt;[7114]&lt;/a&gt; - WAN Queue counts in the Management Center for Hazelcast 3.6-EA3 are not correct. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7100\&quot; target=\&quot;_blank\&quot;&gt;[7100]&lt;/a&gt; - Hazelcast 3.6 Reference Manual is not correct for its Enterprise WAN Replication content. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7099\&quot; target=\&quot;_blank\&quot;&gt;[7099]&lt;/a&gt;   **3.6-EA3 Fixes**  This section lists the enhancements and fixed issues for 3.6-EA3 (Early Access 3) release.  - `NullPointerException` is thrown for the thread `cached4` in a test which uses `MapLoader`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7098\&quot; target=\&quot;_blank\&quot;&gt;[7098]&lt;/a&gt; - The method `loadInternal` of `MapProxySupport` requires `dataKeys`. Hence, a serialization step should be added to `MapProxy.loadAll()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7090\&quot; target=\&quot;_blank\&quot;&gt;[7090]&lt;/a&gt; - Near cache heap cost calculation is not proper when the cache gets concurrent misses. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7057\&quot; target=\&quot;_blank\&quot;&gt;[7057]&lt;/a&gt; - `IQueue` accepts null values from the Hazelcast Java client. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7048\&quot; target=\&quot;_blank\&quot;&gt;[7048]&lt;/a&gt; - `WriteBehindMapStore` for a map that has `OBJECT` as the in-memory format causes the entry processors to serialize the objects. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7040\&quot; target=\&quot;_blank\&quot;&gt;[7040]&lt;/a&gt; - Latest code does not include the file `com.hazelcast.client.impl.protocol.codec.CacheContainsKeyCodec` and build fails.  &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7019\&quot; target=\&quot;_blank\&quot;&gt;[7019]&lt;/a&gt; - Two members of a cluster become masters and ignore each other. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/7016\&quot; target=\&quot;_blank\&quot;&gt;[7016]&lt;/a&gt; - `AbstractCacheRecordStore` should update the field `isOwner` while it is being cleared after migration. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6983\&quot; target=\&quot;_blank\&quot;&gt;[6983]&lt;/a&gt; - There are memory leaks in the local map statistics and near cache invalidation queues. The map containers also leak memory caused either by the near cache invalidation mechanism (when re-creating objects to check whether the near cache is enabled) or `MapPartitionDestroyOperation` (when re-creating objects and trying to the backup count). &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6972\&quot; target=\&quot;_blank\&quot;&gt;[6972]&lt;/a&gt; - When the `lite-member` flag is used within the Spring context, its `enabled` attribute does not work properly. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6945\&quot; target=\&quot;_blank\&quot;&gt;[6945]&lt;/a&gt; - `LoadAllTask` for the client and server side cache proxies should also handle the `Throwable`, not just the `Exception`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6944\&quot; target=\&quot;_blank\&quot;&gt;[6944]&lt;/a&gt; - The `enable` attribute of the `partition-group` element in the `Hazelcast-Spring.xsd` scheme should have the type `string`, not `boolean`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6927\&quot; target=\&quot;_blank\&quot;&gt;[6927]&lt;/a&gt; - There is a left-over method in the Discovery SPI configuration, namely `addDiscoveryProviderConfig`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6911\&quot; target=\&quot;_blank\&quot;&gt;[6911]&lt;/a&gt; - `InMemoryFormat.OBJECT` does not work with the `max-size` policies `USED_HEAP_SIZE` and `USED_HEAP_PERCENTAGE`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6875\&quot; target=\&quot;_blank\&quot;&gt;[6875]&lt;/a&gt; - `PublicAddressTest` has been ignored due to the running time. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6858\&quot; target=\&quot;_blank\&quot;&gt;[6858]&lt;/a&gt; - `NullPointerException` is thrown in `ClientExecutionPoolSizeLowTest`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6853\&quot; target=\&quot;_blank\&quot;&gt;[6853]&lt;/a&gt;    **3.6-EA2 Fixes**  This section lists the enhancements and fixed issues for 3.6-EA2 (Early Access 2) release.  - MapLoader may insert null values into IMap causing memory leak. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6830\&quot; target=\&quot;_blank\&quot;&gt;[6830]&lt;/a&gt; - When replicated map entries are migrated to a new destination; TTL eviction should be scheduled, eviction should be retried when a failure caused by the migration happens and the sync interval should be increased. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6799\&quot; target=\&quot;_blank\&quot;&gt;[6799]&lt;/a&gt; - There is a logical error in the method `Ringbuffer.readManyAsync()` when `minSize = 0`. In this case, the Ringbuffer is not read and nothing is returned. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6787\&quot; target=\&quot;_blank\&quot;&gt;[6787]&lt;/a&gt; - When a listener's registration is made from the listener configuration, an error occurs during the listener initialization. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6784\&quot; target=\&quot;_blank\&quot;&gt;[6784]&lt;/a&gt; - Remaining cache invalidation messages should be flushed on the `ICacheService` while the member is in the  `SHUTTING_DOWN` state. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6778\&quot; target=\&quot;_blank\&quot;&gt;[6778]&lt;/a&gt; - When a client cannot send a request to one of the connections, `TargetNotMemberException` is thrown. This name is confusing the Hazelcast users. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6766\&quot; target=\&quot;_blank\&quot;&gt;[6766]&lt;/a&gt; - `ClassCastException` is thrown when using `Timestamp` within `DataSerializable`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6759\&quot; target=\&quot;_blank\&quot;&gt;[6759]&lt;/a&gt; - The method `destroyDistributedObject()` of `ReplicatedMapService` iterates over partition containers and record stores and destroys them. While destroying, record store calls `destroyDistributedObject()` which leads to an infinite loop. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6754\&quot; target=\&quot;_blank\&quot;&gt;[6754]&lt;/a&gt; - Hazelcast does not inject its instance into `HazelcastInstanceAware` registered via classname. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/6697\&quot; target=\&quot;_blank\&quot;&gt;[6697]&lt;/a&gt; - There is a sporadic startup failure in 3.6-EA. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/6684\&quot; target=\&quot;_blank\&quot;&gt;[6684]&lt;/a&gt; - There is no need to use `CacheLoader` inside the client/server side cache proxies. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6676\&quot; target=\&quot;_blank\&quot;&gt;[6676]&lt;/a&gt; - Fixed wrong calculation of eviction removal size when `PER_NODE` `max-size` policy is used. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/6675\&quot; target=\&quot;_blank\&quot;&gt;[6675]&lt;/a&gt; - If the cluster state is not active `RepartitioningTask` should not be triggered. Otherwise, it causes infinite retries and prevents the member from shutdown. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/pull/6663\&quot; target=\&quot;_blank\&quot;&gt;[6663]&lt;/a&gt; - There are broken XML configuration tests in the Hazelcast client package. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6633\&quot; target=\&quot;_blank\&quot;&gt;[6633]&lt;/a&gt; - There is a memory leak since the method `publishBathcedEvents` does not remove the events from `batchEvent`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6618\&quot; target=\&quot;_blank\&quot;&gt;[6618]&lt;/a&gt; - Custom credentials class is not de-serialized on the server side. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6615\&quot; target=\&quot;_blank\&quot;&gt;[6615]&lt;/a&gt; - Lite member element should be added to the Hazelcast Spring configuration. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6605\&quot; target=\&quot;_blank\&quot;&gt;[6605]&lt;/a&gt; - `EntryListener` shows the unprocessed value in combination with `PostProcessingMapStore`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6588\&quot; target=\&quot;_blank\&quot;&gt;[6588]&lt;/a&gt; - Clients cannot submit `HazelcastInstanceAware` callables. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6570\&quot; target=\&quot;_blank\&quot;&gt;[6570]&lt;/a&gt;   **3.6-EA Fixes**  The following are the issues solved for Hazelcast 3.6-EA (Early Access) release.  - The method `map.size()` waits indefinitely after the shutdown of a node. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6538\&quot; target=\&quot;_blank\&quot;&gt;[6538]&lt;/a&gt; - `HazelcastCachingProvider` does not use the specified instance (by the object) when `instance-name` is not specified. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6454\&quot; target=\&quot;_blank\&quot;&gt;[6454]&lt;/a&gt; - `onExecutionFailure` should be called before returning from `run`, if backup is not valid. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6420\&quot; target=\&quot;_blank\&quot;&gt;[6420]&lt;/a&gt; - `OperationThread.priorityPendingCount()` should return `scheduleQueue.prioritySize()` instead of `scheduleQueue.normalSize()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6318\&quot; target=\&quot;_blank\&quot;&gt;[6318]&lt;/a&gt; - There is a growth in heap usage caused by a memory leak in the following scenario: A node in the cluster regularly creates maps and puts entries into it, again in regular intervals. Another node removes the entries minutes after they were put, and if the map is empty, it destroys the map. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6317\&quot; target=\&quot;_blank\&quot;&gt;[6317]&lt;/a&gt; - Currently, there is an `EntryEvictedListener` that is notified both for expiration and eviction events. There should be a separate listener for expired entries: eviction happens due to size constraints, and expiry is once the entry has expired. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6311\&quot; target=\&quot;_blank\&quot;&gt;[6311]&lt;/a&gt; - `InvocationFuture`s async calls do not detect the lost operations. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6250\&quot; target=\&quot;_blank\&quot;&gt;[6250]&lt;/a&gt; -  When the method `setBooleanAttribute` of the class `Member` is run, Null Pointer Exception is occurred on `STDOUT`. The problem is in the method `sendMemberAttributeEvent` of the class `ClusterServiceImpl`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6223\&quot; target=\&quot;_blank\&quot;&gt;[6223]&lt;/a&gt; - `IOBalancer` keeps references of all the socket reader/writers but when destroying the connection, they release the references for only the ones which has endpoints. This causes a memory leak. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6199\&quot; target=\&quot;_blank\&quot;&gt;[6199]&lt;/a&gt; - `ILIKE` and `Regex` examples should be added to the Reference Manual under the \&quot;Supported SQL Syntax\&quot; section. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6190\&quot; target=\&quot;_blank\&quot;&gt;[6190]&lt;/a&gt; - `GroupProperty` defaulting does not work properly when programmatic configuration is used. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6174\&quot; target=\&quot;_blank\&quot;&gt;[6174]&lt;/a&gt; - When integrating Hazelcast in Spring Boot: if `HazelcastInstance` is created using the default `newHazelcastInstance` static method, then an `HazelcastInstance` whose `Config` has a valid `configurationUrl` property is created. However, `XmlBuilder` does not set this URL in the configuration it parses. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6061\&quot; target=\&quot;_blank\&quot;&gt;[6061]&lt;/a&gt; - Hazelcast's latest snapshot run fails due to the introduction of `ClientExceptionFactory` which has been developed for exception processing and working well in that sense. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/6010\&quot; target=\&quot;_blank\&quot;&gt;[6010]&lt;/a&gt; - The class `HazelcastXATest` has only fast and slow modes (nothing in between) and possibly due to this, sometimes a transaction is waiting for a timeout. Either the transaction recovery or the test class itself is racy. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5923\&quot; target=\&quot;_blank\&quot;&gt;[5923]&lt;/a&gt; - A memory leak occurs when a listener is added and removed from client. A \&quot;remove\&quot; runnable in the collection that is stored in `ClientEndpointImpl` is the leftover. This runnable collection is used to cleanup the listeners when client is disconnected, it should be removed too after the listener is removed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5893\&quot; target=\&quot;_blank\&quot;&gt;[5893]&lt;/a&gt;  - The class `CacheRemoveAllOperation` does not send the \&quot;completed\&quot; event in some cases, e.g. if `CacheRecordStore` for that partition is not created yet or if the filtered keys are empty. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5865\&quot; target=\&quot;_blank\&quot;&gt;[5865]&lt;/a&gt; - In the class `MapProxyImpl`, the methods `executeOnKey` and `submitToKey` create an `EntryOperation` with the thread ID set. This does not happen with the class `ClientMapProxy`. Therefore, the class `MapExecuteOnKeyRequest` should take a thread ID and set this on the generated `EntryOperation`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5857\&quot; target=\&quot;_blank\&quot;&gt;[5857]&lt;/a&gt; - The method `IndexImpl.getRecords()` fails with Null Pointer Exception due to the inconsistency between the `not(...equals())` and `notEquals()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5807\&quot; target=\&quot;_blank\&quot;&gt;[5807]&lt;/a&gt; - The method `HazelcastHttpSession.getAttribute()` for WebFilter does not work when `deferredWrite` is set to `true`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5798\&quot; target=\&quot;_blank\&quot;&gt;[5798]&lt;/a&gt; - When `hazelcast.nio.faststring` is enabled, `UTFEncoderDecoder` tries to create a `FastStringCreator`. However, if the reflection is not available due to the security manager, `buildFastStringCreator` returns null and consequently `StringCreator` becomes null. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5777\&quot; target=\&quot;_blank\&quot;&gt;[5777]&lt;/a&gt; - `hazelcast-jca-rar/pom.xml` references to `src/main/rar/ra.xml` which does not exist. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5760\&quot; target=\&quot;_blank\&quot;&gt;[5760]&lt;/a&gt; - The Maven profile `mvn clean compile -Pqa` does not exist but it is documented in the README of Hazelcast. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5746\&quot; target=\&quot;_blank\&quot;&gt;[5746]&lt;/a&gt; - `PerformanceLogFile` only compiles if JDK 1.7 or above is used. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5729\&quot; target=\&quot;_blank\&quot;&gt;[5729]&lt;/a&gt; - Currently, for every deserialization a `BufferObjectDataInput` is created. This generates waste since it is created with an array of data for every deserialization. The `BufferObjectDataOutput` is already cached; the input should use a similar approach. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5562\&quot; target=\&quot;_blank\&quot;&gt;[5562]&lt;/a&gt; - When any entities are defined as read only in the Hibernate L2 cache, an invalidation of the cache (such as caused by executing a native SQLQuery) leads to the error `UnsupportedOperationException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5562\&quot; target=\&quot;_blank\&quot;&gt;[5562]&lt;/a&gt; - The performance impacts of TWO_PHASE and LOCAL transaction types should be documented. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/5075\&quot; target=\&quot;_blank\&quot;&gt;[5075]&lt;/a&gt; - Client requests are very inefficient when determining the partition ID. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4940\&quot; target=\&quot;_blank\&quot;&gt;[4940]&lt;/a&gt; - The method `keySet()` relies on `QueryOperation`. The `QueryOperation` does not accept `IterationType` - it always returns both keys and values. This can lead to unnecessary load and potentially even an OOM exception. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4642\&quot; target=\&quot;_blank\&quot;&gt;[4642]&lt;/a&gt; - Hazelcast is stuck in TIMED_WAITING when used as 2nd level cache for Hibernate. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/4406\&quot; target=\&quot;_blank\&quot;&gt;[4406]&lt;/a&gt; - Management Center license loading problem when REST API is used. &lt;a href=\&quot;https://github.com/hazelcast/management-center/issues/189\&quot; target=\&quot;_blank\&quot;&gt;[189]&lt;/a&gt; - Executor monitoring in Management Center does not show the \&quot;cancelled\&quot; operations\&quot; &lt;a href=\&quot;https://github.com/hazelcast/management-center/issues/177\&quot; target=\&quot;_blank\&quot;&gt;[177]&lt;/a&gt; - When an alert for a data structure (map, queue, etc.) with its specific name is created, a `NullPointerException` is thrown after the cluster is reset. &lt;a href=\&quot;https://github.com/hazelcast/management-center/issues/175\&quot; target=\&quot;_blank\&quot;&gt;[175]&lt;/a&gt; - Default directory name is hardcoded as \&quot;mancenter3.5\&quot; and it needs to be maintained for every major release. This process should be dynamic. &lt;a href=\&quot;https://github.com/hazelcast/management-center/issues/174\&quot; target=\&quot;_blank\&quot;&gt;[174]&lt;/a&gt; - Throughput statistics for Map shows nothing when the `putAll()` method is used. &lt;a href=\&quot;https://github.com/hazelcast/management-center/issues/159\&quot; target=\&quot;_blank\&quot;&gt;[159]&lt;/a&gt;  "
});



documentTitles["3-5-5.html#355"] = "3.5.5";
index.add({
    url: "3-5-5.html#355",
    title: "3.5.5",
    body: "# 3.5.5  The following are the issues solved for Hazelcast 3.5.5 release.  - When `hazelcast.jmx` option is enabled, MBeans are created for every Hazelcast object but they are never removed. When destroying Hazelcast object with the method `destroy()`, `DistributedObjectEvent::getDistributedObject()` throws `DistributedObjectDestroyedException` and stops the process of unregistering MBeans. MBeans are left forever causing memory leaks and they can be seen in VisualVM.  [[#7329]](https://github.com/hazelcast/hazelcast/issues/7329) - `IdGenerator` sometimes generates duplicate IDs if it is put under stress. [[#7299]](https://github.com/hazelcast/hazelcast/issues/7299) - The method `IAtomicLong.compareAndSet()` does not properly backup its updated state. In a two node cluster, if you use this method and then shutdown the owner of the `IAtomicLong`, the remaining node no longer sees the updated value. [[#7290]](https://github.com/hazelcast/hazelcast/issues/7290) - `InvocationMonitor` checks for the same invocations continuously. [[#7170]](https://github.com/hazelcast/hazelcast/issues/7170) - The methods `IMap.getAsync` and `IMap.putAsync` should update the statistics `getCount` and `putCount`, etc. [[#7109]](https://github.com/hazelcast/hazelcast/issues/7109) - `NullPointerException` is thrown for `CoalescedWriteBehindQueue.removeFirstOccurrence()`. [[#7082]](https://github.com/hazelcast/hazelcast/issues/7082) - The quorum definition in the Spring context is not correct. [[#6946]](https://github.com/hazelcast/hazelcast/issues/6946) - While publishing events, IMap operations convert the value to data even if the registered listener does not request the value. [[#6866]](https://github.com/hazelcast/hazelcast/issues/6866) - Map entry event listeners are not invoked on the clients of WAN replication target cluster. [[#6802]](https://github.com/hazelcast/hazelcast/issues/6802) - The method `putAsync` does not affect `LocalMapStats.getPutOperationCount()`. [[#6731]](https://github.com/hazelcast/hazelcast/issues/6731) - Possible memory leak when using `IMap.containsKey`. Problem happens when `containsKey` is used for a value that exists in the `MapStore`. Entry is loaded from the store but it does not get added to the map (no event is triggered in this case), eventually the system crashes with no memory. [[#6517]](https://github.com/hazelcast/hazelcast/issues/6517) - Performance test with Spring Batch throws `TargetDisconnectedException`. [[#4230]](https://github.com/hazelcast/hazelcast/issues/4230) - Web session replication does not work as expected during a shutdown. [[#3362]](https://github.com/hazelcast/hazelcast/issues/3362) - The parameter `session-ttl-seconds` is set after the instance creation. It should be set before the instance is created. [[#2377]](https://github.com/hazelcast/hazelcast/issues/2377)   "
});



documentTitles["3-5-4.html#354"] = "3.5.4";
index.add({
    url: "3-5-4.html#354",
    title: "3.5.4",
    body: "# 3.5.4  The following are the issues solved for Hazelcast 3.5.4 release.  - Fixed wrong calculation of eviction removal size when `PER_NODE` `max-size` policy is used. [[#6674]](https://github.com/hazelcast/hazelcast/pull/6674) - Lazy deserialization is required while events are being processed. [[#6582]](https://github.com/hazelcast/hazelcast/issues/6582) - Thread Dumps freeze in the Management Center. It shows the same thread dumps for all connected members, same traces and same thread IDs. And they are shown on the same line numbers. [[#6536]](https://github.com/hazelcast/hazelcast/issues/6536) - In Hazelcast 3.4.*, the methods `migrationStarted`/`migrationCompleted` were only called once when a partition migration was done. But in 3.5, these methods are called twice for each partition. [[#6396]](https://github.com/hazelcast/hazelcast/issues/6396)   "
});



documentTitles["3-5-3.html#353"] = "3.5.3";
index.add({
    url: "3-5-3.html#353",
    title: "3.5.3",
    body: "# 3.5.3  The following are the fixed issues for Hazelcast 3.5.3 release.  - `ClientInvocationFuture` may hang when the deserialized response is null. [[#6363]](https://github.com/hazelcast/hazelcast/issues/6363). - The method `CacheStatisticsImpl::getAverageRemoveTime()` uses the \&quot;get\&quot; count on the cache but it must use the \&quot;remove\&quot; count. [[#6314]](https://github.com/hazelcast/hazelcast/issues/6314). - Hazelcast `console.sh` should support changing namespaces that contain space characters. [[#6307]](https://github.com/hazelcast/hazelcast/issues/6307).  - The client fails to properly reconnect to a single node cluster after the Hazelcast server is restarted. [[#6168]](https://github.com/hazelcast/hazelcast/issues/6168).  - Transactional Queue ordering on rollback can be violated. The reason is that the `QueueContainer` does not rollback the changes in the order that is opposite to the order of the items when they were added. It is a random order due to the fact that the changes are stored in a hashmap. [[#6156]](https://github.com/hazelcast/hazelcast/issues/6156). - When a field, that is only available in a subclass of an interface, is indexed, Null Pointer Exception is thrown. [[#6151]](https://github.com/hazelcast/hazelcast/issues/6151). - Extra `\r\n` in the body of the REST API responses causing warnings. [[#6144]](https://github.com/hazelcast/hazelcast/issues/6144). - Near cache on the client size for replicated map does not get invalidated after replicated map changes. [[#5694]](https://github.com/hazelcast/hazelcast/issues/5508). - `IList.iterator()` and `listIterator()` do not support the method `iterator.remove()`. [[#5508]](https://github.com/hazelcast/hazelcast/issues/5508).  The following are the enhancements performed for Hazelcast 3.5.3 release.  - Cache statistics are only supported at the server side and exposed by `CacheProxy`. At the client side, cache statistics are not calculated and supported so `UnsupportedOperationException` is thrown at `ClientCacheProxy` [[#6262]](https://github.com/hazelcast/hazelcast/issues/6262). - Added `iam-role` support to Hazelcast Cloud module. So users can use Hazelcast Cloud module without configuring access keys. [[#6262]](https://github.com/hazelcast/hazelcast/issues/2630).    "
});



documentTitles["3-5-2.html#352"] = "3.5.2";
index.add({
    url: "3-5-2.html#352",
    title: "3.5.2",
    body: "# 3.5.2  The following are the fixed issues for Hazelcast 3.5.2 release.  - There is a performance issue: Even when the Spring boot application is doing nothing, CPU consumption is very high. A thread named \&quot;.hazelcast-wm.ensureInstance\&quot; consumes CPU around 70% because of the method `ClusteredSessionService.run()` [[#6052]](https://github.com/hazelcast/hazelcast/issues/6052). - MapLoader blocks the entire partition when loading a single entry [[#5818]](https://github.com/hazelcast/hazelcast/issues/5818). - The method `IMap.getAll` by-passes interceptors in the Hazelcast 3.3 and higher versions [[#5775]](https://github.com/hazelcast/hazelcast/issues/5775). - `AWSJoiner` fails for the regions except us-east-1 [[#5653]](https://github.com/hazelcast/hazelcast/issues/5653). - Getting an instance of `sun.misc.Unsafe` class does not work on HP-UX operating system [[#5518]](https://github.com/hazelcast/hazelcast/issues/5518). - `AWSAddressTranslator` always uses the default region and this causes the HazelcastClient to be unable to join a Hazelcast AWS cluster in a non-default region [[#5446]](https://github.com/hazelcast/hazelcast/issues/5446). - The test code `JettyWebFilterTest.java` does not fail properly [[#5188]](https://github.com/hazelcast/hazelcast/issues/5188). - Management Center behaves unfriendly when map entries increase [[#4895]](https://github.com/hazelcast/hazelcast/issues/4895). - In `hazelcast-client.xml`, if the region is configured but `host-header` is not provided, the configuration gives a default endpoint value of `ec2.amazonaws.com`. It should give, for example, `ec2.eu-west-1.amazonaws.com` when the region is eu-west-1 and `host-header` is not provided [[#4731]](https://github.com/hazelcast/hazelcast/issues/4731). - Too much CPU is used when Hazelcast is idle [[#81]](https://github.com/hazelcast/hazelcast/issues/81).    "
});



documentTitles["3-5-1.html#351"] = "3.5.1";
index.add({
    url: "3-5-1.html#351",
    title: "3.5.1",
    body: "# 3.5.1  The following are the fixed issues for Hazelcast 3.5.1 release.  - Hazelcast Management Center uses `UpdateMapConfigOperation` to update map configurations. This operation simply replaces the map configuration of the related map container. However, this replacement has no effect for `maxIdleSeconds` and `timeToLiveSeconds` properties of the map configuration since they are not used in the map container directly. They are assigned to the final variables during map container creation and never touched again [[#5593]](https://github.com/hazelcast/hazelcast/issues/5593). - Destroying a map just after creating it produces double create/destroy events for `DistributedObjectListener` [[#5592]](https://github.com/hazelcast/hazelcast/issues/5592). - Map does not allow changing its maximum size, TTL and maximum idle properties. However, these fields are editable in the \&quot;Map Config\&quot; popup of Management Center. These fields should be disabled to prevent misguiding [[#5591]](https://github.com/hazelcast/hazelcast/issues/5591). - Map is destroyed using `IMap.destroy()` but then it is immediately recreated [[#5554]](https://github.com/hazelcast/hazelcast/issues/5554). - There should be a better calculation when calling the method `getApproximateMaxSize()` related to casting. Its return type is `int` and this causes the map entries to be evicted all the time when, for example, the eviction policy for an IMap is set to heap percentage with the value 1% [[#5516]](https://github.com/hazelcast/hazelcast/issues/5516). - All `onResponse()` calls on a `MultiExecutionCallback` should be made before the method `onComplete()` is called. There exists a race condition in `ExecutionCallbackAdapterFactory` which permits the method `onComplete()` to be called before all `onResponse()` calls are made [[#5490]](https://github.com/hazelcast/hazelcast/issues/5490). - Hazelcast Management Center \&quot;Scripting\&quot; tab is not refreshed when a new node joins to the cluster [[#4738]](https://github.com/hazelcast/hazelcast/issues/4738). - When updating a map entry which is replicated over WAN, the TTL (time to live) is not honored in the remote cluster map. When the timeout expires, the entry disappears from the cluster in which the key is owned, however it remains in the remote cluster [[#254]](https://github.com/hazelcast/hazelcast/issues/254).  The following are the enhancements performed for Hazelcast 3.5.1 release.  - Client instances should spawn threads with their instance names added as prefix [[#5671]](https://github.com/hazelcast/hazelcast/issues/5671). - The method `com.hazelcast.spi.impl.classicscheduler.ResponseThread::process` may catch throwables. When this occurs, it logs an unhelpful message, and ignores the actual exception. This method should be improved to additionally log the cause, or at least the exception class and message [[#5619]](https://github.com/hazelcast/hazelcast/issues/5619). - The element `min-eviction-check-millis` in the map configuration does not exist in documentation [[#5614]](https://github.com/hazelcast/hazelcast/issues/5614).    "
});



documentTitles["3-5.html#35"] = "3.5";
index.add({
    url: "3-5.html#35",
    title: "3.5",
    body: "# 3.5  This section lists the new features, enhancements and fixed issues for 3.5 release.  "
});

documentTitles["3-5.html#new-features"] = "New Features";
index.add({
    url: "3-5.html#new-features",
    title: "New Features",
    body: "## New Features  The following are the new features introduced with 3.5 release.  - **Async Back Pressure**: The Back Pressure introduced with Hazelcast 3.4 now supports async operations. For more information, please see the [Back Pressure section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#back-pressure). - **Client Configuration Import**: Hazelcast now supports replacing variables with system properties in the declarative configuration of Hazelcast client. Moreover, now you can compose the Hazelcast client declarative configuration out of smaller configuration snippets. For more information, please see the [Composing Declarative Configuration section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#composing-declarative-configuration). - **Cluster Quorum**: This feature enables you to define the minimum number of machines required in a cluster for the cluster to remain in an operational state. For more information, please see  the [Cluster Quorum section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#cluster-quorum). - **Hazelcast Client Protocol**: Starting with 3.5, Hazelcast introduces the support for different versions of clients in a cluster. Please keep in mind that this support is not valid for the releases before 3.5. Please see the important note at the last paragraph of the [Hazelcast Java Client chapter's](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#hazelcast-java-client) introduction. - **Listener for Lost Partitions**: This feature notifies you for possible data loss occurrences. Please see the [Partition Lost Listener section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#partition-lost-listener) and [MapPartitionLostListener section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#mappartitionlostlistener). - **Increased Visibility of Slow Operations**: With the introduction of the `SlowOperationDetector` feature, slow operations are logged and can be seen on the Hazelcast Management Center. Please see the [SlowOperationDetector section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#slowoperationdetector) and [Management Center:Members section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#members). - **Enterprise WAN Replication**: Hazelcast Enterprise implementation of the WAN Replication. Please see the [Enterprise WAN Replication section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#enterprise-wan-replication). - **Sub-Listener Interfaces for Map Listener**: This feature enables you to listen to map-wide or entry-based events. With this new feature, the listener formerly known as `EntryListener` has been changed to `MapListener` and `MapListener` has sub-interfaces to catch map/entry related events. Please see the [Map Listener section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#map-listener) for more information. - **Scalable Map Loader**: With this feature, you can load your keys incrementally if the number of your keys is large. Please see the [Incremental Key Loading section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#incremental-key-loading). - **Near Cache for JCache**: Now you can use a near cache with Hazelcast's JCache implementation. Please see [JCache Near Cache](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#jcache-near-cache) for details.  - **Fail Fast on Invalid Configuration**: With this feature, Hazelcast throws a meaningful exception if there is an error in the declarative or programmatic configuration. Please see the note at the end of the [Configuration Overview section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#configuration-overview). - **Continuous Query Caching**: (Enterprise only, since 3.5) Provides an always up to date view of an IMap according to the given predicate. Please see the [Continuous Query Cache section](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#continuous-query-cache)  - Dynamic Selector Rebalancing - Management of Unbounded Return Values  "
});

documentTitles["3-5.html#enhancements"] = "Enhancements";
index.add({
    url: "3-5.html#enhancements",
    title: "Enhancements",
    body: "## Enhancements  The following are the enhancements introduced with 3.5 release.  - **Eventing System Improvements**: RingBuffer and Reliable Topic structures are introduced. - **XA Transactions Improvements**: With this improvement, you can now obtain a Hazelcast XA Resource instance through `HazelcastInstance`. For more information, please see [XA Transactions](http://docs.hazelcast.org/docs/3.5/manual/html-single/index.html#xa-transactions). - **Query and Indexing Improvements**   The following are the other improvements performed to solve the enhancement issues opened by the Hazelcast customers/team.   - While configuring JCache, duration of the `ExpiryPolicy` can be set programmatically but not declaratively [[#5347]](https://github.com/hazelcast/hazelcast/issues/5347). - Since near cache is not supported as embedded but only at client, at the moment, there is no need for `NearCacheConfig` in `CacheConfig` [[#5215]](https://github.com/hazelcast/hazelcast/issues/5215). - Support for parametrized test is needed [[#5182]](https://github.com/hazelcast/hazelcast/issues/5182). - `SlowOperationDetector` should have an option to not to log the stacktraces to the log file. There is no need to have the stacktraces written to the normal log file if the Hazelcast Management Center or the performance monitor is being used [[#5043]](https://github.com/hazelcast/hazelcast/issues/5043). - The batch launcher should include the JCache API [[#4902]](https://github.com/hazelcast/hazelcast/issues/4902). - There are no Spring tags available for Native Memory configuration [[#4772]](https://github.com/hazelcast/hazelcast/issues/4772). - In the class `BasicInvocationFuture`, there is no need to create an additional `AtomicInteger` object. It should be replaced with `AtomicIntegerFieldUpdater` [[#4408]](https://github.com/hazelcast/hazelcast/issues/4408). - There is no need to use the class `IsStillExecutingOperation` to check if an operation is running locally. One can directly access to the scheduler [[#4407]](https://github.com/hazelcast/hazelcast/issues/4407). - Configuring NearCache in a Client/Server system only talks about the programmatic configuration of NearCache on the clients. The declarative configuration (XML) of the same is not mentioned [[#4376]](https://github.com/hazelcast/hazelcast/issues/4376). - XML schema and XML configuration validation is not compliant for AWS configuration [[#4310]](https://github.com/hazelcast/hazelcast/issues/4310). - The JavaDoc for the methods `KeyValueSource.hasNext/element/key` and `Iterator.hasNext/next` should emphasize the differences between each other, i.e. the state changing behavior should be clarified [[#4218]](https://github.com/hazelcast/hazelcast/issues/4218). - While migration is in progress, the nodes will have different partition state versions. If the query is running at that time, it can get results from the nodes at different stages of the migration. By adding partition state version to the query results, it can be checked whether the migration was happening and the query can be re-run [[#4206]](https://github.com/hazelcast/hazelcast/issues/4206). - XML Config Schema does not allow to set a `SecurityInterceptor` Implementation [[#4118]](https://github.com/hazelcast/hazelcast/issues/4118). - Currently, certain types of remote executed calls are stored into the `executingCalls` map. The key (and value) is a `RemoteCallKey` object. The functionality provided is the ability to ask on the remote side if an operation is still executing. For a partition-aware operation, this is not needed. When an operation is scheduled by a partition specific operation thread, the operation can be stored in a volatile field in that thread [[#4079]](https://github.com/hazelcast/hazelcast/issues/4079). - The class `TcpIpJoinerOverAWS` fails at AWS' recently launched eu-central-1 region. The reason for the fail is that the region requires v4 signatures [[#3963]](https://github.com/hazelcast/hazelcast/issues/3963). - API change in `EntryListener` breaks the compatibility with the Camel Hazelcast component [[#3859]](https://github.com/hazelcast/hazelcast/issues/3859). - The `hazelcast-spring-&lt;`*version*`&gt;.xsd` should include the User Defined Services (SPI) elements and attributes [[#3565]](https://github.com/hazelcast/hazelcast/issues/3565). - XA Transactions run on multiple threads [[#3385]](https://github.com/hazelcast/hazelcast/issues/3385). - Hazelcast client fails to connect when you provide variables from the system properties [[#3270]](https://github.com/hazelcast/hazelcast/issues/3270). - Entry listeners are not called when the entries are modified by WAN replication [[#2981]](https://github.com/hazelcast/hazelcast/issues/2981). - Map wildcard matching is confusing. There should be a pluggable wildcard configuration resolver [[#2431]](https://github.com/hazelcast/hazelcast/issues/2431). - The method `loadAllKeys()` in map is not scalable [[#2266]](https://github.com/hazelcast/hazelcast/issues/2266). - Back pressure feature should be added [[#1781]](https://github.com/hazelcast/hazelcast/issues/1781).   "
});

documentTitles["3-5.html#fixes"] = "Fixes";
index.add({
    url: "3-5.html#fixes",
    title: "Fixes",
    body: "## Fixes  The following are the issues solved for Hazelcast 3.5 release.   - Operation timeout mechanism is not working [[#5468]](https://github.com/hazelcast/hazelcast/issues/5468). - `MapLoader` exception is not logged: Exception should be logged and propagated back to the client that triggered the loading of the map [[#5430]](https://github.com/hazelcast/hazelcast/issues/5430). - Replicated Map documentation page does not mention that it is in the beta stage [[#5424]](https://github.com/hazelcast/hazelcast/issues/5424). - The method `XAResource.rollback()` should not need the transaction to be in the prepared state when called from another member/client [[#5401]](https://github.com/hazelcast/hazelcast/issues/5401). - The method `XAResource.end()` should not need to check `threadId` [[#5400]](https://github.com/hazelcast/hazelcast/issues/5400). - The method `IList::remove()` should publish the event `REMOVED` [[#5386]](https://github.com/hazelcast/hazelcast/issues/5386). - `IllegalStateException` with wrong partition is thrown when the method `IMap::getOperation()` is invoked [[#5341]](https://github.com/hazelcast/hazelcast/issues/5341). - `WrongTarget` warnings appear in the log since the operations are not sent to the replicas when a map has no backups [[#5324]](https://github.com/hazelcast/hazelcast/issues/5324). - When the method `finalizeCombine()` is used, Hazelcast throws `NullPointerException` [[#5283]](https://github.com/hazelcast/hazelcast/issues/5283). - `WanBatchReplication` causes `OutOfMemoryException` when the default value for WAN Replication Batch Size (50) is used [[#5280]](https://github.com/hazelcast/hazelcast/issues/5280). - When testing Hazelcast, it does not start as an OSGI bundle. After the OSGI package was refactored, the dynamic class loading of the Script engine was missed [[#5274]](https://github.com/hazelcast/hazelcast/issues/5274). - XA Example from Section 11.3.5 in the Reference Manual broken after the latest XA Improvements are committed [[#5273]](https://github.com/hazelcast/hazelcast/issues/5273). - XA Transaction throws `TransactionException` instead of an `XAException` on timeout [[#5260]](https://github.com/hazelcast/hazelcast/issues/5260). - The test for unbounded return values runs forever with the new client implementation [[#5230]](https://github.com/hazelcast/hazelcast/issues/5230). - The new client method `getAsync()` fails with a `NegativeArraySizeException` [[#5229]](https://github.com/hazelcast/hazelcast/issues/5229). - The method `putTransient` actuated the MapStore unexpectedly in an environment with multiple instances [[#5225]](https://github.com/hazelcast/hazelcast/issues/5225). - Changes made by the interceptor do not appear in the backup [[#5211]](https://github.com/hazelcast/hazelcast/issues/5211). - The method `removeAttribute` will prevent any updates by the method `setAttribute` in the deferred write mode [[#5186]](https://github.com/hazelcast/hazelcast/issues/5186). - Backward compatibility of eviction configuration for cache is broken since `CacheEvictionConfig` class was renamed to `EvictionConfig` for general usage [[#5180]](https://github.com/hazelcast/hazelcast/issues/5180). - Value passed into `ICompletableFuture.onResponse()` is not deserialized [[#5158]](https://github.com/hazelcast/hazelcast/issues/5158). - Map Eviction section in the Reference Manual needs more clarification [[#5120]](https://github.com/hazelcast/hazelcast/issues/5120). - When host names are not registered in DNS or in `/etc/hosts` and the members are configured manually with IP addresses and while one node is running, a second node joins to the cluster 5 minutes after it started [[#5072]](https://github.com/hazelcast/hazelcast/issues/5072). - The method `OperationService.asyncInvokeOnPartition()` sometimes fails [[#5069]](https://github.com/hazelcast/hazelcast/issues/5069). - The `SlowOperationDTO.operation` shows only the class name, not the package. This can lead to ambiguity and the actual class cannot be tracked [[#5041]](https://github.com/hazelcast/hazelcast/issues/5041). - There is no documentation comment for the `MessageListener` interface of ITopic [[#5019]](https://github.com/hazelcast/hazelcast/issues/5019). - The method `InvocationFuture.isDone` returns `true` as soon as there is a response including `WAIT_RESPONSE`. However, `WAIT_RESPONSE` is an intermediate response, not a final one [[#5002]](https://github.com/hazelcast/hazelcast/issues/5002). - The method `InvocationFuture.andThen` does not deal with the null response correctly [[#5001]](https://github.com/hazelcast/hazelcast/issues/5001). - `CacheCreationTest` fails due to the multiple `TestHazelcastInstanceFactory` creations in the same test [[#4987]](https://github.com/hazelcast/hazelcast/issues/4987). - When Spring dependency is upgraded to 4.1.x, an exception related to the `putIfAbsent` method is thrown [[#4981]](https://github.com/hazelcast/hazelcast/issues/4981). - HazelcastCacheManager should offer a way to access the underlying cache manager [[#4978]](https://github.com/hazelcast/hazelcast/issues/4978). - Hazelcast Client code allows to use the value *0* for the `connectionAttemptLimit` property which internally results in `int.maxValue`. However, the XSD of the Hazelcast Spring configuration requires it to be at least 1 [[#4967]](https://github.com/hazelcast/hazelcast/issues/4967). - Updates from Entry Processor does not take `write-coalescing` into account [[#4967]](https://github.com/hazelcast/hazelcast/issues/4957). - CachingProvider does not honor custom URI [[#4943]](https://github.com/hazelcast/hazelcast/issues/4943). - Test for the method `getLocalExecutorStats()` fails spuriously [[#4911]](https://github.com/hazelcast/hazelcast/issues/4911). - Missing documentation of network configuration for JCache [[#4905]](https://github.com/hazelcast/hazelcast/issues/4905). - Slow operation detector throws a `NullPointerException` [[#4855]](https://github.com/hazelcast/hazelcast/issues/4855). - Consider use of `System.nanoTime` in `sleepAtLeast` test code [[#4835]](https://github.com/hazelcast/hazelcast/issues/4835). - When upgraded to 3.5-SNAPSHOT for testing, Hazelcast project gives a warning that mentions a missing configuration for `hazelcastmq.txn-topic` [[#4790]](https://github.com/hazelcast/hazelcast/issues/4790). - `ClassNotFoundException` when using WAR classes with JCache API [[#4775]](https://github.com/hazelcast/hazelcast/issues/4775). - When Hazelcast is installed using Maven in Windows environment, the test `XmlConfigImportVariableReplacementTest` fails [[#4758]](https://github.com/hazelcast/hazelcast/issues/4758). - When a request cannot be executed due to a problem (connection error, etc.), if the operation redo is enabled, request is retried. Retried operations are offloaded to an executor, but after offloading, the user thread still tries to retry the request. This causes anomalies like operations being executed twice or operation responses being handled incorrectly [[#4693]](https://github.com/hazelcast/hazelcast/issues/4693). - Client destroys all connections when a reconnection happens [[#4692]](https://github.com/hazelcast/hazelcast/issues/4692). - The `size()` method for a replicated map should return `0` when the entry is removed [[#4666]](https://github.com/hazelcast/hazelcast/issues/4666). - `NullPointerException` on the `CachePutBackupOperation` class [[#4660]](https://github.com/hazelcast/hazelcast/issues/4660). - When removing keys from a MultiMap with a listener, the method `entryRemoved()` is called. In order to get the removed value, one must call the `event.getValue()` instead of `event.getOldValue()` [[#4644]](https://github.com/hazelcast/hazelcast/issues/4644). - Unnecessary deserialization at the server side when using `Cache.get()` [[#4632]](https://github.com/hazelcast/hazelcast/issues/4632). - Operation timeout exception during `IMap.loadAllKeys()` [[#4618]](https://github.com/hazelcast/hazelcast/issues/4618). - There have been Hazelcast AWS exceptions after the version of AWS signer had changed (from v2 to v4) [[#4571]](https://github.com/hazelcast/hazelcast/issues/4571). - In the declarative configuration; when a variable is used to specify the value of an element or attribute, Hazelcast ignores the strings that come before the variable [[#4533]](https://github.com/hazelcast/hazelcast/issues/4533). - `LocalRegionCache` cleanup is working wrongly [[#4445]](https://github.com/hazelcast/hazelcast/issues/4445). - Repeatable-read does not work in a transaction [[#4414]](https://github.com/hazelcast/hazelcast/issues/4414). - Hazelcast instance name with `Hibernate` still creates multiple instances [[#4374]](https://github.com/hazelcast/hazelcast/issues/4374). - In Hazelcast 3.3.4, `FinalizeJoinOperation` times out if the method `MapStore.loadAllKeys()` takes more than 5 seconds [[#4348]](https://github.com/hazelcast/hazelcast/issues/4348). - JCache sync listener completion latch problems: Status of `ICompletableFuture` while waiting for completion latch in the cache must be checked [[#4335]](https://github.com/hazelcast/hazelcast/issues/4335). - Classloader issue with `javax.cache.api` and Hazelcast 3.3.1 [[#3792]](https://github.com/hazelcast/hazelcast/issues/3792). - Failed backup operation on transaction commit causes \&quot;\&quot;Nested transactions are not allowed!\&quot; warning [[#3577]](https://github.com/hazelcast/hazelcast/issues/3577). - Hazelcast Client should not ignore the fact that the XML is for server and should not use default XML feature to connect to `localhost` [[#3256]](https://github.com/hazelcast/hazelcast/issues/3256). - Owner connection `read()` forever [[#3401]](https://github.com/hazelcast/hazelcast/issues/3401).   "
});



documentTitles["3-4-6.html#346"] = "3.4.6";
index.add({
    url: "3-4-6.html#346",
    title: "3.4.6",
    body: "# 3.4.6  No changes for this release. There are some minor internal improvements.  "
});



documentTitles["3-4-5.html#345"] = "3.4.5";
index.add({
    url: "3-4-5.html#345",
    title: "3.4.5",
    body: "# 3.4.5  No changes for this release. There are some minor internal improvements.  "
});



documentTitles["3-4-4.html#344"] = "3.4.4";
index.add({
    url: "3-4-4.html#344",
    title: "3.4.4",
    body: "# 3.4.4  The following is the fixed issue for 3.4.4 release.  - MultiMap entry listener provides incorrect null values [[#5538]](https://github.com/hazelcast/hazelcast/issues/5538).  "
});



documentTitles["3-4-3.html#343"] = "3.4.3";
index.add({
    url: "3-4-3.html#343",
    title: "3.4.3",
    body: "# 3.4.3  The following is the the enhancement performed for 3.4.3 release.  - Expose `TcpIpJoiner.MAX_PORT_TRIES` as a configurable property [[#5062]](https://github.com/hazelcast/hazelcast/issues/5062).  The following are the fixed issues for 3.4.3 release.  - Subsequent remove operations may cause reading of stale value from the map store [[#5368]](https://github.com/hazelcast/hazelcast/issues/5368). - Write-behind may cause reading of stale value upon migration [[#5339]](https://github.com/hazelcast/hazelcast/issues/5339). - Hazelcast client is unresponsive. `OperationTimeoutException` is seen in the logs [[#5338]](https://github.com/hazelcast/hazelcast/issues/5338). - Last update time of an entry should not be changed after `getAll()` is invoked [[#5333]](https://github.com/hazelcast/hazelcast/issues/5333). - `AtomicReference.alterAndGet()` throws `HazelcastSerializationException` [[#5265]](https://github.com/hazelcast/hazelcast/issues/5265). - `ICompletableFuture` callback from the method `getAsync` is not always invoked [[#5133]](https://github.com/hazelcast/hazelcast/issues/5133). - Warnings and exceptions are logged when closing the client connection [[#4966]](https://github.com/hazelcast/hazelcast/issues/4966). - `CacheConfig` is not created on the cluster if the executer of `CacheCreateConfigOperation` has already a `CacheConfig` [[#4960]](https://github.com/hazelcast/hazelcast/issues/4960). - The schema does not allow for an explicit `hz:replicatedMap` element to be created. One can be created inside `hz:config` but not as a definition for a concrete Replicated Map. Therefore, at present it is impossible to define a Replicated Map using Spring. [[#4958]](https://github.com/hazelcast/hazelcast/issues/4958). - `ResponseThread` and `InvocationRegistry.InspectionThread` reset and retry operations. Since these threads did not implement `NIOThread`, the `OperationExecutor` is free to execute tasks on these threads and that is not  desirable [[#4929]](https://github.com/hazelcast/hazelcast/issues/4929). - The method `CacheManager.getCache()` does not re-open the closed cache. It should let access to the closed cache and re-open it. Cache can be accessed by `getCache` but it is still closed [[#4631]](https://github.com/hazelcast/hazelcast/issues/4631). - The method `close()` of a Closeable `CacheLoader` is called without explicitly calling the method `Cache.close()` [[#4617]](https://github.com/hazelcast/hazelcast/issues/4617). - The method `Cache.close()` does not call the method `close()` of registered Closeable `CacheEntryListener` [[#4616]](https://github.com/hazelcast/hazelcast/issues/4616). - The method `awaitNanos()` returns the wrong value for both the `ClientConditionProxy` and `ConditionImpl` classes [[#4603]](https://github.com/hazelcast/hazelcast/issues/4603). - The method `NotEqualPredicate` should return false if entry is null (without index) and also if index is present, it should not throw an exception with null values [[#4525]](https://github.com/hazelcast/hazelcast/issues/4525). - When running Hazelcast with Spring and Hibernate 4 and when an application is started, the error related to `org/hibernate/cache/QueryResultsRegion` is produced [[#4519]](https://github.com/hazelcast/hazelcast/issues/4519). - `OperationTimeoutException` when calling `get` on task future after `hazelcast.operation.call.timeout.millis` [[#4398]](https://github.com/hazelcast/hazelcast/issues/4398). - Predicates with null values throws exception for unordered indexes [[#4373]](https://github.com/hazelcast/hazelcast/issues/4373). - The method `queue.take()` does not get interrupted on shutdown [[#4143]](https://github.com/hazelcast/hazelcast/issues/4143).  "
});



documentTitles["3-4-2.html#342"] = "3.4.2";
index.add({
    url: "3-4-2.html#342",
    title: "3.4.2",
    body: "# 3.4.2  The following is the enhancement performed for 3.4.2 release.  - The method `contains` for ISet scans all the items [[#4620]](https://github.com/hazelcast/hazelcast/issues/4620).   The following are the fixed issues for 3.4.2 release.  - While executing unit tests, `SlowOperationDetectorThread` and `CleanupThread` may not be terminated before the next test is started [[#4757]](https://github.com/hazelcast/hazelcast/issues/4757). - When multiple nodes join sequentially after partitions are assigned/distributed, old nodes fail to clean backup replicas larger than the configured backup count. This causes a memory leak. Also, when multiple nodes leave the cluster at the same time (or in a short period), the new partition owner looses some partition replica versions and this causes backup nodes for those specific replica indexes to fail synchronizing data from the owner node, although the owner node holds the whole partition data [[#4687]](https://github.com/hazelcast/hazelcast/issues/4687). - After cluster merges due to a network-split, Hazelcast infinitely logs `WaitNotifyServiceImpl$WaitingOp::WrongTargetException` warnings [[#4676]](https://github.com/hazelcast/hazelcast/issues/4676). - A strange `mapName` parameter occurred when using wildcard configuration for a custom `MapStoreFactory` [[#4667]](https://github.com/hazelcast/hazelcast/issues/4667). - The method `IExecutorService.submitToKeyOwner` encountered two errors: the `onResponse` method is invoked with null and a cast exception is thrown in a Hazelcast thread [[#4627]](https://github.com/hazelcast/hazelcast/issues/4627). - The method `init` in an implementation of the `MapLoaderLifecyleSupport` interface is not invoked [[#4623]](https://github.com/hazelcast/hazelcast/issues/4623). - The method `readData` in `NearCacheConfig` reads the `maxSize` twice [[#4609]](https://github.com/hazelcast/hazelcast/issues/4609). - The system property `hazelcast.client.request.retry.count` is not handled properly [[#4592]](https://github.com/hazelcast/hazelcast/issues/4592).  "
});



documentTitles["3-4-1.html#341"] = "3.4.1";
index.add({
    url: "3-4-1.html#341",
    title: "3.4.1",
    body: "# 3.4.1  The following are the enhancements performed for 3.4.1 release.  - When the near cache is used, cached entries from the remote node are evicted by idleness, despite being read [[#4358]](https://github.com/hazelcast/hazelcast/issues/4358). - HazelcastQueryResultsRegion is never expired/evicted. The cleanup() method in LocalRegionCache for the query cache instances is never called, thus the query cache lives forever [[#3882]](https://github.com/hazelcast/hazelcast/issues/3882).  The following are the fixed issues for 3.4.1 release.  - IMap.getAll does not put data to RecordStore upon loading from map store [[#4458]](https://github.com/hazelcast/hazelcast/issues/4458). - In the ClientNearCache class, there is a comparator which is used in a TreeSet to find the entries that should be evicted. If there are CacheRecords with the same hit count or lastAccessTime (depending on the policy, i.e. LFU or LRU), all of them should be evicted [[#4451]](https://github.com/hazelcast/hazelcast/issues/4451). - When using write-behind and the entries, which have not been stored yet, are evicted, duplicate calls to the map store is made [[#4448]](https://github.com/hazelcast/hazelcast/issues/4448). - There is a memory leak caused by the empty await queues in WaitNotifyService. When more then one thread try to lock on an IMap key at the same time, a memory leak occurs [[#4432]](https://github.com/hazelcast/hazelcast/issues/4432). - ClientListener is not configurable via ListenerConfig. HazelcastInstanceImpl.initializeListeners(Config config) does not honor ClientListener instances [[#4429]](https://github.com/hazelcast/hazelcast/issues/4429). - The CacheConfig(CacheSimpleConfig simpleConfig) constructor is broken. Variable assignments should be fixed [[#4423]](https://github.com/hazelcast/hazelcast/issues/4423). - In ReplicatedMap, the containsKey method should return false on the removed keys [[#4420]](https://github.com/hazelcast/hazelcast/issues/4420). - During the Hazelcast.shutdownAll() process, LockService is shut down before the MapService and this may cause null pointer exception if there is something like isLocked check in some internal IMap operations [[#4382]](https://github.com/hazelcast/hazelcast/issues/4382). - Hazelcast clients shut down in the case of an IP change of one or more of the configured node (DNS) addresses [[#4349]](https://github.com/hazelcast/hazelcast/issues/4349). - Write-behind system coalesces all operations on a specific key in a configured write-delay-seconds window and it should also store only the latest change on that key in that window. Problem with the current behavior is; a continuously updated key may not be persisted ever due to the shifted store time during the updates [[#4341]](https://github.com/hazelcast/hazelcast/issues/4341). - Issue with contains pattern in Config.getXXXConfig(). Since the actual wildcard search always does a contains matching, you cannot set a configuration for startsWith, for instance [[#4315]](https://github.com/hazelcast/hazelcast/issues/4315). - ReplicatedMapMBean is not present in JMX [[#4173]](https://github.com/hazelcast/hazelcast/issues/4173).  "
});



documentTitles["3-4.html#34"] = "3.4";
index.add({
    url: "3-4.html#34",
    title: "3.4",
    body: "# 3.4  This section lists the new features, enhancements and fixed issues for 3.4 release.   "
});

documentTitles["3-4.html#new-features"] = "New Features";
index.add({
    url: "3-4.html#new-features",
    title: "New Features",
    body: "## New Features  The following are the new features introduced with 3.4 release.  - **High-Density Memory Store**: Used with the Hazelcast JCache implementation, High-Density Memory Store is introduced with this release. High-Density Memory Store is the enterprise grade backend storage solution. This solution minimizes the garbage collection pressure and thus enables predictable application scaling and boosts performance. For more information, please see [High-Density Memory Store section](http://docs.hazelcast.org/docs/3.4/manual/html-single/index.html#high-density-memory-store). - **Jetty Based Session Replication**: We have introduced Jetty-based web session replication with this release. This is a feature of Hazelcast Enterprise. It enables session replication for Java EE web applications that are deployed into Jetty servlet containers, without having to perform any changes in those applications. For more information, please see [Jetty Based Web Session Replication section](http://docs.hazelcast.org/docs/3.4/manual/html-single/index.html#jetty-based-web-session-replication). - **Hazelcast Configuration Import**: This feature, which is an element named `&lt;import&gt;`, enables you to compose the Hazelcast declarative (XML) configuration file out of smaller configuration snippets. For more information, please see [Composing XML Configuration section](http://docs.hazelcast.org/docs/3.4/manual/html-single/index.html#composing-xml-configuration). - **Back Pressure**: Starting with this release, Hazelcast provides the back pressure feature which prevents the overload caused by pending asynchronous backups. For more information, please see [Back Pressure section](http://docs.hazelcast.org/docs/3.4/manual/html-single/index.html#back-pressure).  "
});

documentTitles["3-4.html#enhancements"] = "Enhancements";
index.add({
    url: "3-4.html#enhancements",
    title: "Enhancements",
    body: "## Enhancements  The following are the enhancements performed for 3.4 release.  - Event packets sent to the client do not have \&quot;partitionId\&quot; [[#4071]](https://github.com/hazelcast/hazelcast/issues/4071). - Spring Configuration for ReplicatedMap is Missing [[#3966]](https://github.com/hazelcast/hazelcast/issues/3966). - `NodeMulticastListener` floods log file with INFO-level messages when debug is enabled [[#3787]](https://github.com/hazelcast/hazelcast/issues/3787). - A Hazelcast client should not be a `HazelcastInstance`. It should be a \&quot;factory\&quot; and this factory should be able to shut down Hazelcast clients. [[#3781]](https://github.com/hazelcast/hazelcast/issues/3781). - `InvalidateSessionAttributesEntryProcessor` could avoid creating strings at every call to process [[#3767]](https://github.com/hazelcast/hazelcast/issues/3767). - The timeout for `SocketConnector` cannot be configured [[#3613]](https://github.com/hazelcast/hazelcast/issues/3613). - The method `MultiMap.get()` returns `collection`, but this method should return the correct collection type (`Set` or `List`) [[#3214]](https://github.com/hazelcast/hazelcast/issues/3214). - `HazelcastConnection` is not aligned with `HazelcastInstance` [[#2997]](https://github.com/hazelcast/hazelcast/issues/2997). - Support for Log4j 2.x has been implemented [[#2345]](https://github.com/hazelcast/hazelcast/issues/2345). - Management Center console behavior on node shutdown [[#2215]](https://github.com/hazelcast/hazelcast/issues/2215). - When `queue-store` is not enabled, `QueueStoreFactory` should not be instantiated [[#1906]](https://github.com/hazelcast/hazelcast/issues/1906). - Management Center should be able to say when cluster is safe and all backups are up to date [[#963]](https://github.com/hazelcast/hazelcast/issues/963).   "
});

documentTitles["3-4.html#fixes"] = "Fixes";
index.add({
    url: "3-4.html#fixes",
    title: "Fixes",
    body: "## Fixes  The following are the fixed issues for 3.4 release.  - Deadlock happens in MapReduce implementation when there is a high load on the system. The issue has been solved by offloading Distributed MapReduce result collection to the async executor [[#4238]](https://github.com/hazelcast/hazelcast/issues/4238). - When the class `ClientExecutorServiceSubmitTest.java` is compiled using the Eclipse compiler, it gives a compile error: \&quot;*The method submit(Runnable, ExecutionCallback) is ambiguous for the type IExecutorService*\&quot;. The reason is that the `IExecutorService.java` class does not have some generics. The issue has been solved by adding these missing generics to the `IExecutorService.java` class [[#4234]](https://github.com/hazelcast/hazelcast/issues/4234). - JCache declarative listener registration does not work [[#4215]](https://github.com/hazelcast/hazelcast/issues/4215). - JCache evicts the records which are not expired yet. To solve this issue, the `clear` method should be removed that runs when the size is smaller than the minimum eviction element count (`MIN_EVICTION_ELEMENT_COUNT`) [[#4124]](https://github.com/hazelcast/hazelcast/issues/4124). - Hazelcast Enterprise Native Memory operations should be updated in relation with the Hazelcast sync listener changes [[#4089]](https://github.com/hazelcast/hazelcast/issues/4089). - The completion listener (JCache) relies on event ordering but if the completion listener is registered in another node then event ordering is not guaranteed [[#4073]](https://github.com/hazelcast/hazelcast/issues/4073). - AWS joiner classname should be fixed since EC2 discovery is not working after the restructure [[#4025]](https://github.com/hazelcast/hazelcast/issues/4025). - If an IMap has a near cache configured, accessing the near cache via the method `get(key)` does not count as an access to the underlying IMap. The near cache has its own `max-idle-seconds` element. However, if an entry is expired/evicted in the IMap, it also causes a near cache removal operation for the entry regardless of the `max-idle-seconds` of that entry in the near cache. The entry expires and is evicted even if the near cache is being hit constantly. When a near cache is hit, the underlying map should reset the idle time for that key [[#4016]](https://github.com/hazelcast/hazelcast/issues/4016). - Getting a pre-configured Cache instance is not working as expected [[#4009]](https://github.com/hazelcast/hazelcast/issues/4009). - Bounded Queue section in the Reference Manual is unclear and wrong [[#3995]](https://github.com/hazelcast/hazelcast/issues/3995). - The method `checkFullyProcessed` of MapReduce throws null pointer exception. The reason may be that multiple threads attempt to start the final processing state in the JobSupervisor [[#3952]](https://github.com/hazelcast/hazelcast/issues/3952). - Merge operation after a split brain syndrome does not guarantee that the merging is over [[#3863]](https://github.com/hazelcast/hazelcast/issues/3863). - When a client with near cache configuration enabled is shut down, `RejectedExecutionException` is thrown [[#3669]](https://github.com/hazelcast/hazelcast/issues/3669). - In Hazelcast `IMap` and `TransactionalMap`, read-only operations such as `get()`, `containsKey()`, `keySet()`, and `containsValue()` break the transaction atomicity [[#3191]](https://github.com/hazelcast/hazelcast/issues/3191). - Documentation should clearly list features of and differences between native clients [[#2385]](https://github.com/hazelcast/hazelcast/issues/2385). - Sections of Hazelcast configuration should be able to be imported so that these sections can be shared between other Hazelcast configurations [[#406]](https://github.com/hazelcast/hazelcast/issues/406).   "
});



documentTitles["3-3-5.html#335"] = "3.3.5";
index.add({
    url: "3-3-5.html#335",
    title: "3.3.5",
    body: "# 3.3.5  The following is the fixed issue for 3.3.5 release.  - Make write-coalescing configurable for write-behind map-stores [[#4438]](https://github.com/hazelcast/hazelcast/issues/4438).   "
});



documentTitles["3-3-4.html#334"] = "3.3.4";
index.add({
    url: "3-3-4.html#334",
    title: "3.3.4",
    body: "# 3.3.4  The following are the fixed issues for 3.3.4 release.   - Predicate with short values is not working [[#4293]](https://github.com/hazelcast/hazelcast/issues/4293). - Hits statistics copy and paste error in the method `ReplicatedRecord` [[#4254]](https://github.com/hazelcast/hazelcast/issues/4254). - Serialization error on the ReplicatedMap when in-memory format is set to `BINARY` [[#4205]](https://github.com/hazelcast/hazelcast/issues/4205). - Too long exception stacktraces if the Hazelcast client fails to receive data, and this leads to a failure on the client [[#4192]](https://github.com/hazelcast/hazelcast/issues/4192). - Hazelcast client registers the translated public address instead of its own private address to the list of connections. This causes the client not to be able to remove the connection correctly [[#4190]](https://github.com/hazelcast/hazelcast/issues/4190). - `TransactionType:Local` emits exceptions while committing. The normal behavior should be throwing the exceptions to the user [[#4160]](https://github.com/hazelcast/hazelcast/issues/4160). - Map replication should mark expirable recordstore. Otherwise, in some situations, if one does not set the map wide expiration or map wide TTL, the key based TTL expiration may not work [[#4144]](https://github.com/hazelcast/hazelcast/issues/4144). - The method `BasicInvocationFuture.response` should be cleared when `BasicInvocation.WAIT_RESPONSE` is read by the waiter thread. Otherwise, when the retry operation takes too much time, the waiting thread sees the same wait response multiple times and the operation may not timeout forever [[#4123]](https://github.com/hazelcast/hazelcast/issues/4123). - Topic listeners should be unregistered when topic is destroyed [[#4117]](https://github.com/hazelcast/hazelcast/issues/4117). - Invocations (and their operations) remain in the invocations map forever if the operation timeouts without a response [[#4113]](https://github.com/hazelcast/hazelcast/issues/4113). - Timeout is needed for parallel query operations [[#4074]](https://github.com/hazelcast/hazelcast/issues/4074). - Initial map load and `max-size-policy` conflict [[#4066]](https://github.com/hazelcast/hazelcast/issues/4066). - MapStore operations should be retried and performed eventually after a temporary failure [[#4061]](https://github.com/hazelcast/hazelcast/issues/4061). -  The class `SynchronizedWriteBehindQueue` (from `com.hazelcast.map.mapstore.writebehind` package) is declared threadsafe in JavaDocs, but it is not [[#4039]](https://github.com/hazelcast/hazelcast/issues/4039). - The method `RemoveIfSameOperation` does not set `dataOldValue` for the `entryRemoved` event  [[#4037]](https://github.com/hazelcast/hazelcast/issues/4037). - When a new node with a new field is added to a cluster and when a query over this node is attempted, the old nodes throw an exception (`com.hazelcast.query.QueryException: Unknown Portable field: newFieldName`) and the query fails by throwing the same exception. [[#3927]](https://github.com/hazelcast/hazelcast/issues/3927). - At the moment, the internal state fields of a `Reducer` are required to be volatile to ensure the memory visibility effects after the suspension and continuation of a reducer. This requirement should be moved to be handled by the framework itself since it is tend to be forgotten [[#3866]](https://github.com/hazelcast/hazelcast/issues/3866). - The method `executeOnKey` hangs when the server fails to handle a query [[#3842]](https://github.com/hazelcast/hazelcast/issues/3842). - The `GlobalSerializerConfig#setImplementation()` parameter should be compatible with the implementation field [[#3569]](https://github.com/hazelcast/hazelcast/issues/3569). - `ClientConsoleApp` should not define the file `hazelcast-client.xml` [[#3554]](https://github.com/hazelcast/hazelcast/issues/3554). - When using a custom partitioning strategy and the configured backup count of a map cannot be fulfilled since a node defined in the custom partition group is down, a JMX service call is blocked in the while-loop at `com.hazelcast.map.MapService.createLocalMapStats` [[#3526]](https://github.com/hazelcast/hazelcast/issues/3526).  "
});



documentTitles["3-3-3.html#333"] = "3.3.3";
index.add({
    url: "3-3-3.html#333",
    title: "3.3.3",
    body: "# 3.3.3  The following are the fixed issues for 3.3.3 release.   - JCache average put time statistic is not calculated correctly [[#4029]](https://github.com/hazelcast/hazelcast/issues/4029). - When sending backup, the replica address can be seen as null [[#4001]](https://github.com/hazelcast/hazelcast/issues/4001). - Evicted events are sent before the added events to EntryListeners [[#3992]](https://github.com/hazelcast/hazelcast/issues/3992). - In Management Center, the default login credentials cannot be deleted [[#3990]](https://github.com/hazelcast/hazelcast/issues/3990). - Logger for `NodeMulticastListener` does not belong to `com.hazelcast` hierarchy [[#3941]](https://github.com/hazelcast/hazelcast/issues/3941). - MapInterceptors are not removed when a node leaves the cluster [[#3932]](https://github.com/hazelcast/hazelcast/issues/3932). - MapInterceptors of same type (`Class`) are chained [[#3931]](https://github.com/hazelcast/hazelcast/issues/3931). - Expiration Time should not be updated. Its value is updated on every set operation on a map, but Hazelcast uses only the first value set for ExpirationTime. So a `getExpirationTime()` operation returns a wrong and misleading value. [[#3923]](https://github.com/hazelcast/hazelcast/issues/3923). - When using the XML file to configure a Queue to use a `QueueStoreFactory`, a null pointer exception is thrown at `QueueStoreWrapper` [[#3907]](https://github.com/hazelcast/hazelcast/issues/3907). - Excess logging on startup [[#3869]](https://github.com/hazelcast/hazelcast/issues/3869). - `LifecycleService` should be terminated after the node cannot join to the cluster [[#3843]](https://github.com/hazelcast/hazelcast/issues/3843). - The method `MapProxyImpl.aggregate` hangs sporadically [[#3824]](https://github.com/hazelcast/hazelcast/issues/3824). - Currently, there is no class named `com.hazelcast.nio.utf8.EnterpriseStringCreator` in Hazelcast. So the class and its log messages should be removed from the code [[#3819]](https://github.com/hazelcast/hazelcast/issues/3819). - Bad user interface experience in the management center. Maps menu item that contains maps with longer names cannot be expanded [[#3815]](https://github.com/hazelcast/hazelcast/issues/3815). - When the shutdown button in the management center is hit multiple times, the nodes are shutdown again, after they are shutdown at the first place and restarted [[#3718]](https://github.com/hazelcast/hazelcast/issues/3718). - Alert e-mails from the management center are not sent to the e-mail address [[#3693]](https://github.com/hazelcast/hazelcast/issues/3693). - Instances with private IPs cannot be discovered on Amazon EC2 [[#3666]](https://github.com/hazelcast/hazelcast/issues/3666). - Null pointer exception in the method `Records.buildRecordInfo` from the stabilizer `MapStoreTest` [[#2956]](https://github.com/hazelcast/hazelcast/issues/2956).  "
});



documentTitles["3-3-2.html#332"] = "3.3.2";
index.add({
    url: "3-3-2.html#332",
    title: "3.3.2",
    body: "# 3.3.2  The following are the fixed issues for 3.3.2 release.   - Reject multicast messages if the group configuration is not matching [[#3806]](https://github.com/hazelcast/hazelcast/issues/3806). - `Map#getEntryView` should check expiration of a key [[#3801]](https://github.com/hazelcast/hazelcast/issues/3801). - Hazelcast gets stuck in `HazelcastInstanceNotActiveException` loop during multicast join [[#3732]](https://github.com/hazelcast/hazelcast/issues/3732). - Hazelcast fails to comply with `maxIdleTime` expiration when running EntryProcessors. A delay should be added to expiration times on backups [[#3710]](https://github.com/hazelcast/hazelcast/issues/3710). - `containsKey()` in transactional context returns wrong value for keys deleted within transaction [[#3682]](https://github.com/hazelcast/hazelcast/issues/3682). - `TransactionalMap.values()` returns stale values that was updated within the transaction boundary [[#3668]](https://github.com/hazelcast/hazelcast/issues/3668). - Number of loaded keys should not exceed map's maximum size [[#3608]](https://github.com/hazelcast/hazelcast/issues/3608). - During client node shutdown, if the cluster happens to be down, Hazelcast logs some extra messages at SEVERE level [[#3493]](https://github.com/hazelcast/hazelcast/issues/3493).  "
});



documentTitles["3-3-1.html#331"] = "3.3.1";
index.add({
    url: "3-3-1.html#331",
    title: "3.3.1",
    body: "# 3.3.1  The following are the fixed issues for 3.3.1 release.   - MapReduce Combiner creation is not threadsafe, but certain operations on mapping phase might need a concurrent creation of the combiners [[#3625]](https://github.com/hazelcast/hazelcast/issues/3625). - When `connectionTimeout` property in ClientNetworkConfig is set to `Integer.MAX_VALUE`, the client could not connect to cluster since a default 2000 ms. extra value is added to `connectionTimeout` while connecting [[#3615]](https://github.com/hazelcast/hazelcast/issues/3615). - User provided list results from combiner is colliding with the internally used multi-result list [[#3614]](https://github.com/hazelcast/hazelcast/issues/3614). - While committing collection transactions, the collection item is being added to the collection container. However, this gives the warning \&quot;There is no suitable de-serializer for type\&quot; warning. Instead of collection item, transactional item should be added to the container [[#3603]](https://github.com/hazelcast/hazelcast/issues/3603). - `MaxSizeConfig` constructor should convert zero size to `Integer.MAX_VALUE` [[#3579]](https://github.com/hazelcast/hazelcast/issues/3579). - If deserialization of the client request fails, the exception is not propagated back to the client  [[#3557]](https://github.com/hazelcast/hazelcast/issues/3557). - \&quot;Lock is not owned by by the transaction\&quot; exception. This exception was received while testing how transactions are working with Map and MultiMap for some last Hazelcast releases [[#3545]](https://github.com/hazelcast/hazelcast/issues/3545). - Main classes in `manifest.mf` files are not correctly set [#3537](https://github.com/hazelcast/hazelcast/issues/3537). - Count of evicted events may exceed the map size when \&quot;read backup data\&quot; feature is enabled [#3515](https://github.com/hazelcast/hazelcast/issues/3515). - `mancenter.war` from Hazelcast release 3.2.5 cannot be deployed to Glassfish 3.1.2.2 and it fails to deploy [#3501](https://github.com/hazelcast/hazelcast/issues/3501). - While evicting entries from a map with the method `evictAll`, locked keys should stay in the map [#3473](https://github.com/hazelcast/hazelcast/issues/3473). - In `hazelcast-vm` module, before every test, new server container is started. And after every test, running server is terminated. This behavior causes a long test execution time. Server start-up and termination should be done before and after test class initialization and finalization [#3473](https://github.com/hazelcast/hazelcast/issues/3473). - The method `IQueue.take()` method should throw InterruptedException, but throws HazelcastException instead [#3133](https://github.com/hazelcast/hazelcast/issues/3133). - Multicast discovery doesn't work without network [#2594](https://github.com/hazelcast/hazelcast/issues/2594).  "
});



documentTitles["3-3.html#33"] = "3.3";
index.add({
    url: "3-3.html#33",
    title: "3.3",
    body: "# 3.3  This section lists the new features, enhancements and fixed issues for 3.3 release.   "
});

documentTitles["3-3.html#new-features"] = "New Features";
index.add({
    url: "3-3.html#new-features",
    title: "New Features",
    body: "## New Features  The following are the new features introduced with 3.3 release.  - Heartbeat for Java client: Before this release, a Java client could not detect a node as dead, if the client is not trying to connect to it. With this heartbeat feature, each node will be pinged periodically. If no response is returned from a node, it will be deemed as dead. Main goal of this feature is to decrease the time for detection of dead (disconnected) nodes by Java clients, so that the user operations will be sent directly to a responsive one. For more information, please see [Client Properties](http://docs.hazelcast.org/docs/3.3/manual/html-single/#client-properties). - Tomcat 6 and 7 Web Sessions Clustering: Please see [Web Session Replication](http://docs.hazelcast.org/docs/3.3/manual/html-single/hazelcast-documentation.html#web-session-replication). - Replicated Map implemented: Please see [Replicated Map](http://docs.hazelcast.org/docs/3.3/manual/html-single/hazelcast-documentation.html#replicated-map) - WAN Replication improved: Added configurable replication queue size [WAN Replication Queue Size](http://docs.hazelcast.org/docs/3.3/manual/html-single/hazelcast-documentation.html#wan-replication-queue-size). - Data Aggregation implemented: Added common data aggregations, please find [Aggregators](http://docs.hazelcast.org/docs/3.3/manual/html-single/hazelcast-documentation.html#aggregators) documentation. - EvictAll and LoadAll features for IMap: `evictAll` and `loadAll` methods have been introduced to be able to evict all entries except the locked ones and that loads all or a set of keys from a configured map store, respectively. Please see [Evicting All Entries](http://docs.hazelcast.org/docs/3.3/manual/html-single/hazelcast-documentation.html#evicting-all-entries) and [Forcing All Keys to be Loaded](http://docs.hazelcast.org/docs/3.3/manual/html-single/hazelcast-documentation.html#forcing-all-keys-to-be-loaded) sections for more information. - Hazelcast JCache implementation introduced: Starting with release 3.3.1, Hazelcast offers its JCache implementation. Please see [Hazelcast JCache Implementation](http://docs.hazelcast.org/docs/3.3/manual/html-single/hazelcast-documentation.html#hazelcast-jcache-implementation) for details.   "
});

documentTitles["3-3.html#fixes"] = "Fixes";
index.add({
    url: "3-3.html#fixes",
    title: "Fixes",
    body: "## Fixes  The following are the fixed issues 3.3 release.  - TxQueue cannot find reserved items upon ownership changes [[#3432]](https://github.com/hazelcast/hazelcast/issues/3432). - Documentation update is needed to tell that PagingPredicate is only supported for Comparable objects if there is no comparator [[#3428]](https://github.com/hazelcast/hazelcast/issues/3432). - `java.lang.NullPointerException` is thrown when publishing an event in ClientEndPointImpl [[#3407]](https://github.com/hazelcast/hazelcast/issues/3407). - The `entryUpdated()` callback of a listener during a transaction always has a null `oldValue` in the EntryEvent [[#3406]](https://github.com/hazelcast/hazelcast/issues/3406). - Documentation update with the links to code samples for integration modules [[#3389]](https://github.com/hazelcast/hazelcast/issues/3389). - Hazelcast write-behind with `map.replace()` stores replaced items [[#3386]](https://github.com/hazelcast/hazelcast/issues/3386). - XAResource's `setTransactionTimeout()` method is not correctly implemented [[#3384]](https://github.com/hazelcast/hazelcast/issues/3384). - Hazelcast web session replication filter may die if response committed [[#3360]](https://github.com/hazelcast/hazelcast/issues/3360). - Resource adapter state is never reset to `isStarted == false`, resulting in errors down the line [[#3350]](https://github.com/hazelcast/hazelcast/issues/3350). - `PagingPredicate.getAnchor` does not return the correct value [[#3241]](https://github.com/hazelcast/hazelcast/issues/3241). - If deserialization fails, calling node is not informed [[#2509]](https://github.com/hazelcast/hazelcast/issues/2509). - CallerNotMemberException and WrongTargetException exceptions are thrown at random intervals [[#2253]](https://github.com/hazelcast/hazelcast/issues/2253).  **RC3 Fixes**  This section lists issues solved for 3.3-RC3 (Release Candidate 3) release.   - Parallel execution of `MapStore#store` method for the same key triggered by `IMap#flush` [[#3338]](https://github.com/hazelcast/hazelcast/issues/3338). - When offering null argument in queue throws an exception but it adds null argument to collection, then `addAll()` performed on this list does not throw an exception [[#3330]](https://github.com/hazelcast/hazelcast/issues/3330). - `java.io.FileNotFoundException` thrown by MapLoaderTest [[#3324]](https://github.com/hazelcast/hazelcast/issues/3324). - MapMaxSizeTest Stabilizer test with SoftKill [[#3291]](https://github.com/hazelcast/hazelcast/issues/3291). - Incompatible Spring and Hazelcast configuration XSDs [[#3275]](https://github.com/hazelcast/hazelcast/issues/3275). - `ExpirationManager` partition sorting can fail [[#3271]](https://github.com/hazelcast/hazelcast/issues/3271). - Configuration validation is broken [[#3257]](https://github.com/hazelcast/hazelcast/issues/3257). - Code Samples for Spring Security and WebFilter Integration [[#3252]](https://github.com/hazelcast/hazelcast/issues/3252). - WebFilter Test Cases are slow [[#3250]](https://github.com/hazelcast/hazelcast/issues/3250). - Management Center and Weblogic Deployment Problem [[#3247]](https://github.com/hazelcast/hazelcast/issues/3247). - Enabling Multicast and TCP/IP node discovery methods freeze the instances [[#3246]](https://github.com/hazelcast/hazelcast/issues/3246). - `getOldValue` and `getValue` returns the same value when removing item from IMap [[#3198]](https://github.com/hazelcast/hazelcast/issues/3198). - MapTransactionContextTest: member SoftKill and then HazelcastSerializationException and IegalStateException: Nested are thrown [[#3196]](https://github.com/hazelcast/hazelcast/issues/3196). - `IMap.delete()` should not call `MapLoader.load()`[[#3178]](https://github.com/hazelcast/hazelcast/issues/3178). - 3.3-RC3+: NPE in the method `connectionMarkedAsNotResponsive` [[#3169]](https://github.com/hazelcast/hazelcast/issues/3169). - `WebFilter.HazelcastHttpSession.isNew()` does not check the Hazelcast Session Cache [[#3132]](https://github.com/hazelcast/hazelcast/issues/3132). - Hazelcast Spring XSD files are not version agnostic [[#3131]](https://github.com/hazelcast/hazelcast/issues/3131). - `ClassCastException: java.lang.Integer` cannot be cast to `java.lang.String` Query [[#3091]](https://github.com/hazelcast/hazelcast/issues/3091). - Predicate returns a value not matching the predicate [[#3090]](https://github.com/hazelcast/hazelcast/issues/3090). - Modifications made by Entry Processor are lost in 3.3-RC-2 [[#3062]](https://github.com/hazelcast/hazelcast/issues/3062). - Hazelcast Session Clustering with Spring Security Problem [[#3049]](https://github.com/hazelcast/hazelcast/issues/3049). - PagingPredicate returning duplicated elements results in an infinite loop [[#3047]](https://github.com/hazelcast/hazelcast/issues/3047). - `expirationTime` on EntryView is not set [[#3038]](https://github.com/hazelcast/hazelcast/issues/3038). - `BasicRecordStoreLoader` cannot handle retry responses [[#3033]](https://github.com/hazelcast/hazelcast/issues/3033).  - Short `await()` on condition of contended lock causes IllegalStateException [[#3025]](https://github.com/hazelcast/hazelcast/issues/3025).  - Indices and Comparable&lt;T&gt;: not documented [[#3024]](https://github.com/hazelcast/hazelcast/issues/3024).  - Marking Heartbeat as healthy is too late [[#3014]](https://github.com/hazelcast/hazelcast/issues/3014). - 3.3-RC2: `IMap#keySet` triggers value deserialization [[#3008]](https://github.com/hazelcast/hazelcast/issues/3008). - `map.destroy()` throws DistributedObjectDestroyedException [[#3001]](https://github.com/hazelcast/hazelcast/issues/3001). - Stabilizer tests Final profile, Xlarge cluster OperationTimeoutException [[#2999]](https://github.com/hazelcast/hazelcast/issues/2999). - `com.hazelcast.jca.HazelcastConnection::getExecutorService` returns plain ExecutorService [[#2986]](https://github.com/hazelcast/hazelcast/issues/2986). - Serialization NPE in MapStoreTest stabilizer, 3.3-RC3-SNAPSHOT [[#2985]](https://github.com/hazelcast/hazelcast/issues/2985). - Bug with `IMap.getAll()` [[#2982]](https://github.com/hazelcast/hazelcast/issues/2982). - Client deadlock on single core machines [[#2971]](https://github.com/hazelcast/hazelcast/issues/2971). - Retrieve number of futures in loop in calling thread [[#2964]](https://github.com/hazelcast/hazelcast/issues/2964).   **RC2 Fixes**  This section lists issues solved for 3.3-RC2 (Release Candidate 2) release.  -	`evictAll` should flush to staging area [#2969](https://github.com/hazelcast/hazelcast/issues/2969). -	NPE exception in MapStoreTest [[#2956]](https://github.com/hazelcast/hazelcast/issues/2956). -	Fixed `AddSessionEntryProcessor` [[#2955]](https://github.com/hazelcast/hazelcast/issues/2955). -   Added `StripedExecutor` to WanReplicationService [[#2947]](https://github.com/hazelcast/hazelcast/issues/2947). -	All read operations of map should respect expired keys [[#2946]](https://github.com/hazelcast/hazelcast/issues/2946). -  Fix test EvictionTest#testMapWideEviction [[#2944]](https://github.com/hazelcast/hazelcast/issues/2944). -   Heartbeat check of clients from nodes [[#2936]](https://github.com/hazelcast/hazelcast/issues/2936). -	WebFilter does not clean up timed-	out sessions [[#2930]](https://github.com/hazelcast/hazelcast/issues/2930). -	Fix leaking empty concurrent hashmaps [[#2929]](https://github.com/hazelcast/hazelcast/issues/2929). -	Data loss fix in *hazelcast-wm* module [[#2927]](https://github.com/hazelcast/hazelcast/issues/2927). -	Configured event queue capacity [[#2924]](https://github.com/hazelcast/hazelcast/issues/2924). -	Client closes owner connection when a connection to the same address is closed [[#2921]](https://github.com/hazelcast/hazelcast/issues/2921). -	Close the owner connection if heartbeat timeout when client is smart [[#2916]](https://github.com/hazelcast/hazelcast/issues/2916). -	Set application buffer size to not exceed `tls` record size [[#2914]](https://github.com/hazelcast/hazelcast/issues/2914). -	EntryProcessor makes unnecessary serialization [[#2913]](https://github.com/hazelcast/hazelcast/issues/2913). -	Make evictable time window configurable [[#2910]](https://github.com/hazelcast/hazelcast/issues/2910). -	Fixes data loss issue when partition table is being synced and a node is gracefully shutdown [[#2908]](https://github.com/hazelcast/hazelcast/issues/2908). -	MapStoreConfig; implementation instance is not set, when configured via XML [[#2898]](https://github.com/hazelcast/hazelcast/issues/2898). -	LocalMapStats does not record stats about locked entries in 3.x [[#2876]](https://github.com/hazelcast/hazelcast/issues/2876). -	Concurrency security interceptor [[#2874]](https://github.com/hazelcast/hazelcast/issues/2874). -	Client hangs during split, if split occurs due to network error [[#2850]](https://github.com/hazelcast/hazelcast/issues/2850). -	Network connection loss does not release lock [[#2818]](https://github.com/hazelcast/hazelcast/issues/2818).   **RC1 Fixes**  This section lists issues solved for 3.3-RC1 (Release Candidate 1) release.  -	It is not possible to copy the link from *http://hazelcast.org/download/* and run `wget` on it [[#2814]](https://github.com/hazelcast/hazelcast/issues/2814). -	`mapCleared` method for EntryListener is needed [[#2789]](https://github.com/hazelcast/hazelcast/issues/2789). -	The method `keySet` with predicate should trigger loading of MapStore [[#2692]](https://github.com/hazelcast/hazelcast/issues/2692). -	MapStore with write-behind: The method `IMap.remove()` followed by `IMap.putIfAbsent(key,value)` still returns the old value [[#2685]](https://github.com/hazelcast/hazelcast/issues/2685). -	Hazelcast cannot read UTF-8 String if \&quot;multiple-byte\&quot; characters end up at position that is an even multiple of buffer size [[#2674]](https://github.com/hazelcast/hazelcast/issues/2674). -	Current implementation of record expiration relies on undefined behavior of `System.nanoTime()` [[#2666]](https://github.com/hazelcast/hazelcast/issues/2666). -	Inconsistency at Hazelcast Bootup \&quot;Editions\&quot; message [[#2641]](https://github.com/hazelcast/hazelcast/issues/2641). -	`AbstractReachabilityHandler` writes to standard output [[#2591]](https://github.com/hazelcast/hazelcast/issues/2591). -	`IMap.set()` does not not remove a key from write behind deletions queue [[#2588]](https://github.com/hazelcast/hazelcast/issues/2588). -	`com.hazelcast.core.EntryView#getLastAccessTime` is invalid[[#2581]](https://github.com/hazelcast/hazelcast/issues/2581).   "
});



documentTitles["3-2-7.html#327"] = "3.2.7";
index.add({
    url: "3-2-7.html#327",
    title: "3.2.7",
    body: "# 3.2.7  No changes for this release. There are some minor internal improvements.  "
});



documentTitles["3-2-6.html#326"] = "3.2.6";
index.add({
    url: "3-2-6.html#326",
    title: "3.2.6",
    body: "# 3.2.6  The following are the fixed issues for 3.2.6 release.  -	MapStore in write-behind mode throws Exception (Spring configured) [[#3397]](https://github.com/hazelcast/hazelcast/issues/3397). -	Wildcard pattern of the map (map is configured with a wildcard in its name) should be respected during evictions [[#3345]](https://github.com/hazelcast/hazelcast/issues/3345). -	Map eviction does not work when the policy is \&quot;USED_HEAP_PERCENTAGE\&quot; or \&quot;USED_HESAP SIZE\&quot; [[#3321]](https://github.com/hazelcast/hazelcast/issues/3321). -	Exceptions when using Portable serialization [[#3313]](https://github.com/hazelcast/hazelcast/issues/3313). -	When Hazelcast is used as drop-in replacement for Memcached, it causes errors [[#3182]](https://github.com/hazelcast/hazelcast/issues/3182). -	Null Pointer Exception is thrown by `MapService.dispatchEvent` [[#3101]](https://github.com/hazelcast/hazelcast/issues/3101). -	PagingPredicate returns duplicated elements which result in an infinite loop [[#3047]](https://github.com/hazelcast/hazelcast/issues/3047). -	`ContextClassLoader` is by default only set on some cached operation threads, not on most others [[#2721]](https://github.com/hazelcast/hazelcast/issues/2721).  "
});



documentTitles["3-2-5.html#325"] = "3.2.5";
index.add({
    url: "3-2-5.html#325",
    title: "3.2.5",
    body: "# 3.2.5  The following are the fixed issues for 3.2.5 release.  -	Txn map keyset and values with portable entries is not working correctly. [[#3152]](https://github.com/hazelcast/hazelcast/issues/3152) -	`TransactionalMap.{putIfAbsent(k, v), replace(k, v), replace(k, v1, v2), remove(k, v)}` methods never release lock after transaction ends. [[#3149]](https://github.com/hazelcast/hazelcast/issues/3149) - Test failure at `ClientMapTest.testMapStatistics`. [[#3138]](https://github.com/hazelcast/hazelcast/issues/3138) - `NetworkConfig.setReuseAddress` is not available in the XML. [[#3122]](https://github.com/hazelcast/hazelcast/issues/3122) - When a selector fails to open, the `AbstractSelector` does not throw an exception, but logs it and then continues. Also, when `select` throws an IOException, this exception is not dealt correctly. [[#3105]](https://github.com/hazelcast/hazelcast/issues/3105) - Test failure at `QueryBasicTest.testInPredicateWithEmptyArray`. [[#3060]](https://github.com/hazelcast/hazelcast/issues/3060) - Hibernate cache flush leaves ClientMapProxy in an inconsistent state. This cache flush triggers `IMapRegionCache.clear()` and the implementation here does not look correct since it leaves the \&quot;map\&quot; field in the inconsistent state (*context = null*) and prevents any further use of it. [[#3004]](https://github.com/hazelcast/hazelcast/issues/3004) - Fixes operation execution/invocation on IO threads issue. [[#2994]](https://github.com/hazelcast/hazelcast/pull/2994) - Node cannot recover from `MergeOperation` if target node exits the cluster. [[#2937]](https://github.com/hazelcast/hazelcast/issues/2937) - Client fails to run due to the lack of `ClientTestApp` class. [[#2817]](https://github.com/hazelcast/hazelcast/issues/2817) - Using Hazelcast Queue, assume that there is a system in which messages are actively being consumed by one consumer. When a second Hazelcast instance is started (i.e. second consumer for the same queue), Hazelcast throws an exception, then continues normally and there are two competing consumers on the same queue. [[#2805]](https://github.com/hazelcast/hazelcast/issues/2805) - `IMap.submitToKey` and `IMap.executeOnKey` in combination with nodes joining/leaving the cluster result in data loss. [[#2785]](https://github.com/hazelcast/hazelcast/issues/2785) - Too much delay for deciding heartbeat timeout. [[#2766]](https://github.com/hazelcast/hazelcast/issues/2766) - When multiple predicates are combined by an `AndPredicate`, the first `IndexAwarePredicate` that is not indexed will be added to the \&quot;no index\&quot; list twice. [[#2531]](https://github.com/hazelcast/hazelcast/issues/2531) - There appears to be a leak in the memory in `SecondsBasedEntryTaskScheduler` when idle timeout is enabled on a map. [[#2343]](https://github.com/hazelcast/hazelcast/issues/2343)  "
});



documentTitles["3-2-4.html#324"] = "3.2.4";
index.add({
    url: "3-2-4.html#324",
    title: "3.2.4",
    body: "# 3.2.4  The following are the fixed issues for 3.2.4 release.  - Assigning wrong item ID on backup when instance is shutdown in QueueStore. [[#2842]](https://github.com/hazelcast/hazelcast/issues/2842) - `IQueue.take` throws HazelcastException instead of InterruptedException. [[#2833]](https://github.com/hazelcast/hazelcast/issues/2833) - Hazelcast distribution has some left-over files. [[#2821]](https://github.com/hazelcast/hazelcast/issues/2821) - Management Center cannot update map configuration on already created map proxies. [[#2810]](https://github.com/hazelcast/hazelcast/issues/2810) - Transient test failure: `IMap.get(k)` returns null. [[#2804]](https://github.com/hazelcast/hazelcast/issues/2804) - `IllegalArgumentException: Target cannot be null!` shows up when `MultipleEntryBackupOperationForNullValue` test is run by `executeOnKeys()` firstly. [[#2754]](https://github.com/hazelcast/hazelcast/issues/2754) - When creating an instance with EntryProcessor, the backup process does not work. [[#2752]](https://github.com/hazelcast/hazelcast/issues/2752) - Data loss happens in the web filter. [[#2746]](https://github.com/hazelcast/hazelcast/issues/2746) - `BackupEntryProcessor` stores the value even though it is not set explicitly. [[#2613]](https://github.com/hazelcast/hazelcast/issues/2613) - The test `listenerAddStress` fails often. [[#2611]](https://github.com/hazelcast/hazelcast/issues/2611) - Predicate should fail when null argument is passed. [[#2577]](https://github.com/hazelcast/hazelcast/issues/2577) - XAResourceWrapper does not honor contract of `XAResource#setTransactionTimeout`. [[#2569]](https://github.com/hazelcast/hazelcast/issues/2569) - Allow `Predicates.and` and `Predicates.or` for more than 2 arguments. [[#2563]](https://github.com/hazelcast/hazelcast/issues/2563) - Semaphore is given to the thread that is coming late. [[#2472]](https://github.com/hazelcast/hazelcast/issues/2472) - `UnknownHostException` is logged when using hostnames for seed addresses. [[#2125]](https://github.com/hazelcast/hazelcast/issues/2125) - The Java client seems to hang if there is blocking of a map call in map listener. [[#2106]](https://github.com/hazelcast/hazelcast/issues/2106) - The cluster is not responsive when 2nd node joins. [[#2105]](https://github.com/hazelcast/hazelcast/issues/2105) - Hibernate query caches are not configurable. [[#2064]](https://github.com/hazelcast/hazelcast/issues/2064) - XA Transactions should be explained in the Reference Manual. [[#2020]](https://github.com/hazelcast/hazelcast/issues/2020) - Encryption enabled results in cluster to hang under load. [[#1897]](https://github.com/hazelcast/hazelcast/issues/1897) - SSL connections are unreliable. [[#1896]](https://github.com/hazelcast/hazelcast/issues/1896)  "
});



documentTitles["3-2-3.html#323"] = "3.2.3";
index.add({
    url: "3-2-3.html#323",
    title: "3.2.3",
    body: "# 3.2.3  The following are the fixed issues for 3.2.3 release.  - The method `TransactionalQueue.poll` fails to find an item that is put into the queue in the same transaction with a non-zero timeout. [[#2669]](https://github.com/hazelcast/hazelcast/issues/2669) - IExecutorService fails when it is called with MemberSelector instance that returns 0 Members. [[#2650]](https://github.com/hazelcast/hazelcast/issues/2650) - If statistics are enabled, map's `InMemoryFormat.Object` does not work. [[#2622]](https://github.com/hazelcast/hazelcast/issues/2622) - There is a memory leak in long running Hazelcast instances because of a bug in `MapEvictionManager.MapEvictTask`. [[#2596]](https://github.com/hazelcast/hazelcast/issues/2596) - Hazelcast client is missing an extensive XML Config Test and XSD Test. [[#2587]](https://github.com/hazelcast/hazelcast/issues/2587) - The client may consider the original address list if no cluster member can be reached. [[#2585]](https://github.com/hazelcast/hazelcast/issues/2585) - Locks are not cleaned upon the operation `map.destroy`. [[#2582]](https://github.com/hazelcast/hazelcast/issues/2582) - Classpath: Configuration file discovery is not working. [[#2565]](https://github.com/hazelcast/hazelcast/issues/2565) - The method `ClientService.getConnectedClients()` does not always return the correct number of clients. [[#2541]](https://github.com/hazelcast/hazelcast/issues/2541) - Nodes leaving and joining from/to the cluster can cause multiple subscription callbacks to be sent. [[#2539]](https://github.com/hazelcast/hazelcast/issues/2539) - Predicate fails with `NullPointerException` if the value is null. [[#2522]](https://github.com/hazelcast/hazelcast/issues/2522) - Messages' order breaks with versions 3.2+. [[#2513]](https://github.com/hazelcast/hazelcast/issues/2513) - The method `ClientProxy.destroy` should always clean the resources. [[#2475]](https://github.com/hazelcast/hazelcast/issues/2475) - The method `HazelcastHttpSession.getAttributeNames` returns entries that were only read but not written. [[#2434]](https://github.com/hazelcast/hazelcast/issues/2434)   "
});



documentTitles["3-2-2.html#322"] = "3.2.2";
index.add({
    url: "3-2-2.html#322",
    title: "3.2.2",
    body: "# 3.2.2  The following are the fixed issues for 3.2.2 release.  - Client security callable fix. [[#2561]](https://github.com/hazelcast/hazelcast/pull/2561) -	Updating a key in a transaction gives listeners an entryAdded() callback instead of entryUpdated(). [[#2542]](https://github.com/hazelcast/hazelcast/issues/2542) -	Client ssl engine doesn't need keyStore and keyStorePassword. [[#2525]](https://github.com/hazelcast/hazelcast/pull/2525) -	Added support for Mapper, Combiner, Reducer, KeyValueSource to implement HazelcastInstanceAware. [[#2502]](https://github.com/hazelcast/hazelcast/pull/2502) -	Fixed alter function. [[#2496]](https://github.com/hazelcast/hazelcast/pull/2496) -	Return cached value upon IMap.get() if near cache is enabled. [[#2482]](https://github.com/hazelcast/hazelcast/pull/2482) -	Exception initializing hz:client. [[#2480]](https://github.com/hazelcast/hazelcast/issues/2480) -	Fixed portable serialization between different services versions. [[#2478]](https://github.com/hazelcast/hazelcast/pull/2478) -	Resolves a data race in the client proxy that can lead to an NPE. [[#2474]](https://github.com/hazelcast/hazelcast/pull/2474) -	Fixed partition group hostname matching. [[#2470]](https://github.com/hazelcast/hazelcast/pull/2470) -	Client shutdown issue: Improve logging. [[#2442]](https://github.com/hazelcast/hazelcast/issues/2442) -	Unnecessary synchronized lock when invoking com.hazelcast.instance.LifecycleServiceImpl.isRunning(). [[#2454]](https://github.com/hazelcast/hazelcast/issues/2454) -	If MapStoreFactory throws exception, instance hangs. [[#2445]](https://github.com/hazelcast/hazelcast/issues/2445) -	Semaphore is given to the thread that is coming late. [[#2443]](https://github.com/hazelcast/hazelcast/issues/2443) -	Lots of exceptions when shutting down connection. [[#2441]](https://github.com/hazelcast/hazelcast/issues/2441) -	Migration fails when statistics are disabled. [[#2436]](https://github.com/hazelcast/hazelcast/issues/2436) -	3.2.1 regression: nested transactions are not caught and prevented. [[#2404]](https://github.com/hazelcast/hazelcast/issues/2404) -	Client proxy init synced. [[#2376]](https://github.com/hazelcast/hazelcast/pull/2376) -	Fixes hostname matching problem when interface has wildcards. [[#2398]](https://github.com/hazelcast/hazelcast/pull/2398) -	Fix weblogic shutdown backport. [[#2391]](https://github.com/hazelcast/hazelcast/pull/2391) -	NotWritablePropertyException connectionAttemptLimit with ssl client config. [[#2335]](https://github.com/hazelcast/hazelcast/issues/2335) -	Map-Reduce Operation fails, when another instance tries to form a cluster with an instance running a map reduce task. [[#2354]](https://github.com/hazelcast/hazelcast/issues/2354) -	EntryEvent getMember returning null when a node leaves the cluster. [[#2358]](https://github.com/hazelcast/hazelcast/issues/2358) -	NullPointerException in Bundle Activator. [[#2489]](https://github.com/hazelcast/hazelcast/issues/2489) "
});



documentTitles["3-2-1.html#321"] = "3.2.1";
index.add({
    url: "3-2-1.html#321",
    title: "3.2.1",
    body: "# 3.2.1  The following are the fixed issues for 3.2.1 release.  -	JCA problems have been fixed. [#2025](https://github.com/hazelcast/hazelcast/issues/2025). -	C++ client compilation problems are fixed. -	Redo problem about Java dummy client is fixed. -	Round robin load balancer of Java client is improved. -	Initial timeout is for the initial connections in Java clients. -	Wildcard configuration improvement in near cache configuration. -	Unneeded serializations in EntryProcessor should be removed when the object format is *In-Memory* [#2139](https://github.com/hazelcast/hazelcast/issues/2139). -	Race condition in near cache has been solved, immediate invalidation of local near cache was needed [#2163](https://github.com/hazelcast/hazelcast/issues/2163). -	Predicate issue seen in transactions is solved. -	Comparator issue in map eviction is solved. -	Map eviction part has been refactored due to a race condition on map listener [#2324](https://github.com/hazelcast/hazelcast/issues/2324). -	Stale data problem in client near cache has been solved [#2065](https://github.com/hazelcast/hazelcast/issues/2065). -	Many checkstyle and findbugs issues are solved.  "
});



documentTitles["3-2.html#32"] = "3.2";
index.add({
    url: "3-2.html#32",
    title: "3.2",
    body: "# 3.2  This section lists the new features, enhancements and fixed issues for 3.2 release.  "
});

documentTitles["3-2.html#new-features"] = "New Features";
index.add({
    url: "3-2.html#new-features",
    title: "New Features",
    body: "## New Features   -	**NIO Client**: New architecture based on NIO introduced to support more scalable and concurrent client usage. -	**MapReduce Framework**: MapReduce implemented for your key-value collections that need to be reduced by grouping the keys. Please see [the interview](http://www.infoq.com/news/2014/02/hazelcast-mapreduce-api) and [MapReduce](http://docs.hazelcast.org/docs/3.2/manual/html-single/hazelcast-documentation.html#mapreduce) section. -	**Order/Limit Support**: Now you can order and limit results returned by queries performed on Hazelcast Distributed Map. -	**C++ Client**: Native C++ client developed for C++ users which can connect to a Hazelcast cluster and realize almost all operations that a node can perform. Please see [Native Clients](http://docs.hazelcast.org/docs/3.2/manual/html-single/hazelcast-documentation.html#native-clients). -	**C# Client**: Also, Native C# client that has a very similar API with Native Java client developed. Please see [Native Clients](http://docs.hazelcast.org/docs/3.2/manual/html-single/hazelcast-documentation.html#native-clients).  "
});

documentTitles["3-2.html#enhancements"] = "Enhancements";
index.add({
    url: "3-2.html#enhancements",
    title: "Enhancements",
    body: "## Enhancements   -	Size of a distributed queue via REST API can be returned. [[#1809]](https://github.com/hazelcast/hazelcast/pull/1809)	 -	InitialLoadMode configuration parameter (having Lazy and Eager as values) added to MapStoreConfig. [[#1751]](https://github.com/hazelcast/hazelcast/pull/1751) -	Tagging support for Executor Service introduced such that nodes can be tagged for IExecutorService. [[1457]](https://github.com/hazelcast/hazelcast/issues/1457) -	`getForUpdate()` operation for transactional map introduced. [[#1033]](https://github.com/hazelcast/hazelcast/issues/1033) -	Entry processor can run on a set of keys with the introduction of `executeOnKeys(keys,entryprocessor)` method for IMap. [[1423]](https://github.com/hazelcast/hazelcast/pull/1423) -	`getNearCacheStats()` introduced. Statistics for near cache can be retrieved. [[#30]](https://github.com/hazelcast/hazelcast/issues/30)   "
});

documentTitles["3-2.html#fixes"] = "Fixes";
index.add({
    url: "3-2.html#fixes",
    title: "Fixes",
    body: "## Fixes  -	`LocalMapStats.getNearCacheStats()` can return null when it is called before a map get that calls `initNearCache()`. [[#2009]](https://github.com/hazelcast/hazelcast/issues/2009) -	`testMapWithIndexAfterShutDown` fails in OpenJDK. [[#2001]](https://github.com/hazelcast/hazelcast/issues/2001) -	Portable Serialization needs objects to be shared between client and server. [[#1957]](https://github.com/hazelcast/hazelcast/issues/1957) -	Near cache entries should be locally invalidate on `IMap.executeOnKey()`. [[#1951]](https://github.com/hazelcast/hazelcast/issues/1951) -	OperationTimeoutException is thrown when executing task that runs longer than `hazelcast.operation.call.timeout.millis`. [[#1949]](https://github.com/hazelcast/hazelcast/issues/1949) -	`MapStore#store` was called when executing AbstractEntryProcessor on backup. [[#1940]](https://github.com/hazelcast/hazelcast/issues/1940) -	After an OperationTimeoutException is thrown from `ILock.tryLock()	 (and after the system is back in a normal state), the named lock remains locked. [[#1937]](https://github.com/hazelcast/hazelcast/issues/1937) -	Hazelcast client needs OutOfMemoryErrorDispatcher. [[#1933]](https://github.com/hazelcast/hazelcast/issues/1933) -	Near Cache: Caching of local entries may lead to race condition. [[#1905]](https://github.com/hazelcast/hazelcast/issues/1905) -	After key owner node dies, it takes too much time for threads to wakeup from `condition.await()`. [[#1879]](https://github.com/hazelcast/hazelcast/issues/1879) -	Possible improvements/fixes for NearCache. [[#1863]](https://github.com/hazelcast/hazelcast/issues/1863) -	`MultipleEntryBackupOperation` does not handle deletion of entries. [[#1854]](https://github.com/hazelcast/hazelcast/issues/1854) -	If topics are created/destroyed, then the statistics for that topic are not destroyed and this can cause a memory leak. [[#1847]](https://github.com/hazelcast/hazelcast/issues/1847) -	PartitionService backup/replication fixes. [[#1840]](https://github.com/hazelcast/hazelcast/issues/1840) -	Cached null values remain in near cache after `evict` is called. [[#1829]](https://github.com/hazelcast/hazelcast/issues/1829) -	NullPointerException in MultiMap when the service is shutdown before the migration is processed. [[#1823]](https://github.com/hazelcast/hazelcast/issues/1823) -	Network interruption causes node to continually warn with WrongTargetException. [[#1815]](https://github.com/hazelcast/hazelcast/issues/1815) -	`DefaultRecordStore#removeAll` should be modified so that it keeps \&quot;key objects to delete\&quot; as a list, not a set. [[#1795]](https://github.com/hazelcast/hazelcast/issues/1795) -	Very long `operation.run()` call stack especially when high partition count is used. [[#1745]](https://github.com/hazelcast/hazelcast/issues/1745) -	When executing an entry processor with an index aware predicate, the index is not used, instead the predicate is applied to the entire entry set. [[#1719]](https://github.com/hazelcast/hazelcast/issues/1719) -	When one node goes down in a cluster with 2 nodes (where near cache is enabled), `containsKey` call hangs in the second node. [[#1688]](https://github.com/hazelcast/hazelcast/issues/1688) -	When deleting an entry from an entry processor by setting the value to null, it is not removed from the backup store. [[#1687]](https://github.com/hazelcast/hazelcast/issues/1687) -	Client calls executed at server side cause unwanted (de)serialization. [[#1669]](https://github.com/hazelcast/hazelcast/issues/1669) -	In `TrackableJobFuture.get(long, TimeUnit)`, there is a 100 ms of sleep-spin while waiting for the result of a MapReduce task to be set. [[#1648]](https://github.com/hazelcast/hazelcast/issues/1648) -	If `storeAll` takes much time and if instance terminates while map store is running, data can be lost. [[#1644]](https://github.com/hazelcast/hazelcast/issues/1644) -	A missing Spring 4 Cache method added to hazelcast-spring package (namely `public T get(Object key, Class type)`). [[#1627]](https://github.com/hazelcast/hazelcast/issues/1627) -	When eviction tasks are canceled, `scheduledExecutorService` is not cleaned. [[#1595]](https://github.com/hazelcast/hazelcast/issues/1595) -	`storeAll()` with new value for the same key should not be executed until any previous `storeAll()` operations with the same key are not completed. [[#1592]](https://github.com/hazelcast/hazelcast/issues/1592) -	When using native client to interact with Hazelcast cluster, some JMX MBean attribute values on cluster nodes are not set/updated. [[#1576]](https://github.com/hazelcast/hazelcast/issues/1576) -	`IMap.getAll(keys)` method does not read from near cache. [[#1532]](https://github.com/hazelcast/hazelcast/issues/1532) -	Near Cache *cache-local-entries* attribute is missing in `hazelcast-spring-3.2` XSD. [[#1524]](https://github.com/hazelcast/hazelcast/issues/1524) -	Exception while executing script in OpenJDK 8. [[#1518]](https://github.com/hazelcast/hazelcast/issues/1518) -	Infinite waiting on merge operations when cluster shuts down. [[#1504]](https://github.com/hazelcast/hazelcast/issues/1504) -	Client side socket interceptor is not needed to be MemberSocketInterceptor. [[#1444]](https://github.com/hazelcast/hazelcast/issues/1444) -	Near cache on the local node should be enabled if its InMemoryFormat is different from that of the map. [[#1438]](https://github.com/hazelcast/hazelcast/issues/1438) -	Async EntryProcessor does not deserialize the value before it is called back. [[#1433]](https://github.com/hazelcast/hazelcast/issues/1433) -	A submitted task cannot be canceled via the native client. [[#1394]](https://github.com/hazelcast/hazelcast/issues/1394) -	`executeOnKeys(keys,entryprocessor)` introduced on IMap. With this feature entry processor can be run on a set of keys. [[#1339]](https://github.com/hazelcast/hazelcast/issues/1339) -	FINEST logging should be guarded where appropriate. [[#1332]](https://github.com/hazelcast/hazelcast/issues/1332) -	False errors reported in Eclipse due to schema definition. [[#1330]](https://github.com/hazelcast/hazelcast/issues/1330) -	Index based operations are not synchronized with partition changes. [[#1297]](https://github.com/hazelcast/hazelcast/issues/1297) -	Management Center: InvocationTargetException in Tomcat console when a node is started and then stopped. [[#1267]](https://github.com/hazelcast/hazelcast/issues/1267) -	The system property `hazelcast.map.load.chunk.size` is being ignored in Hazelcast 3.1. [[#1110]](https://github.com/hazelcast/hazelcast/issues/1110) -	Master should fire repartitioning after getting confirmation from nodes. [[#1058]](https://github.com/hazelcast/hazelcast/issues/1058) -	SqlPredicate does not Implement equals/hashCode. [[#960]](https://github.com/hazelcast/hazelcast/issues/960) -	`DelegatingFuture.isDone` seems to always return false until the method `DelegatingFuture.get` is called. [[#850]](https://github.com/hazelcast/hazelcast/issues/850) -	Predicate support for entry processor. [[#826]](https://github.com/hazelcast/hazelcast/issues/826)    **RC2 Fixes**  The following are the fixed issues for 3.2-RC2 (Release Candidate 2) release.   -	`ClientService.getConnectedClients` returns all end points [[#1883]](https://github.com/hazelcast/hazelcast/issues/1883). -	MultiMap is throwing `ConcurrentModificationExceptions` [[#1882]](https://github.com/hazelcast/hazelcast/issues/1882). -	`executorPoolSize` field of ClientConfig cannot be configured using XML [[#1867]](https://github.com/hazelcast/hazelcast/issues/1867). -	Partition processing cannot be postponed [[#1856]](https://github.com/hazelcast/hazelcast/pull/1856). -	Memory leak at client endpoints [[#1842]](https://github.com/hazelcast/hazelcast/pull/1842). -	Errors related to management center configuration on startup [[#1821]](https://github.com/hazelcast/hazelcast/pull/1821). -	XML parsing error by client [[#1818]](https://github.com/hazelcast/hazelcast/pull/1818). -	`ClientReAuthOperation` cannot return response without call ID [[#1816]](https://github.com/hazelcast/hazelcast/issues/1816). -	`MemberAttributeOperationType` should be introduced to remove the dependency to `MapOperationType` [[#1811]](https://github.com/hazelcast/hazelcast/pull/1811). -	Entry listener removal from MultiMap [[#1810]](https://github.com/hazelcast/hazelcast/pull/1810).  **RC1 Fixes**  The following are the fixed issues for 3.2-RC1 (Release Candidate 1) release.   -	*TransactionalMap* does not support `put(K,V,long,TimeUnit)` [[#1718]](https://github.com/hazelcast/hazelcast/issues/1718). -	Entry is not removed from backup store when it is deleted using entry processor [[#1687]](https://github.com/hazelcast/hazelcast/issues/1687). -	Possibility of losing data when MapStore takes a long time [[#1644]](https://github.com/hazelcast/hazelcast/issues/1644). -	When eviction tasks are cancelled, `scheduledExecutorService` should be cleaned	[[#1595]](https://github.com/hazelcast/hazelcast/issues/1595). -	A fix related to *StoreAll* is needed in a write-behind scenario [[#1592]](https://github.com/hazelcast/hazelcast/issues/1592). -	Update problem at map statistics [[#1576]](https://github.com/hazelcast/hazelcast/issues/1576). -	Exception while executing script in OpenJDK 8 [[#1518]](https://github.com/hazelcast/hazelcast/issues/1518). -	StackOverflowError at `AndResultSet` [[#1501]](https://github.com/hazelcast/hazelcast/issues/1501). -	Near Cache using `InMemoryFormat.OBJECT` also for local node [[#1438]](https://github.com/hazelcast/hazelcast/issues/1438). -	Async entry processor is not deserializing the value before returning [[#1433]](https://github.com/hazelcast/hazelcast/issues/1433). -	Distributed Executor; *Future Cancel* is not working [[#1394]](https://github.com/hazelcast/hazelcast/issues/1394). -	`HazelcastInstanceFactory$InstanceFuture.get()` never returns when `newHazelcastInstance()` method fails/throws exception [[#1253]](https://github.com/hazelcast/hazelcast/issues/1253). -	Changes for *Vertx* on Openshift [[#1176]](https://github.com/hazelcast/hazelcast/pull/1176). -	Serialization should be performed after database interaction for MapStore [[#1115]](https://github.com/hazelcast/hazelcast/issues/1115). -	System property related to chunk size is passed over in Hazelcast 3.1 [[#1110]](https://github.com/hazelcast/hazelcast/issues/1110). -	Map backups lack eviction of some specific data [[#1085]](https://github.com/hazelcast/hazelcast/issues/1085). -	`DelegatingFuture.isDone` always returns false until get is called [[#850]](https://github.com/hazelcast/hazelcast/issues/850). -	Predicate support for entry processor [[#826]](https://github.com/hazelcast/hazelcast/issues/826). -	Full replication of Maps should be performed [[#360]](https://github.com/hazelcast/hazelcast/issues/360).    "
});



documentTitles["3-1-8.html#318"] = "3.1.8";
index.add({
    url: "3-1-8.html#318",
    title: "3.1.8",
    body: "# 3.1.8  This section lists the new features, enhancements and fixed issues for 3.1 and 3.1.x releases.  "
});

documentTitles["3-1-8.html#new-features"] = "New Features";
index.add({
    url: "3-1-8.html#new-features",
    title: "New Features",
    body: "## New Features  This section provides the new features introduced with Hazelcast 3.1 release.  - Elastic Memory (Enterprise Extensions Only) is now available. - Hazelcast Security is now available. - Hazelcast JCA integration is back. - Controlled Partitioning: Controlled Partitioning is the ability to control the partition of certain DistributedObjects like the IQueue, IAtomicLong or ILock. This will make collocating related data easier. Hazelcast map also supports custom partitioning strategies. A PartitioningStrategy can be defined in map configuration. - TransactionalMap now supports `keySet()`, `keySet(predicate)`, `values()` and `values(predicate)` methods. - Eviction based on USED_HEAP_PERCENTAGE or USED_HEAP_SIZE now takes account real heap memory size consumed by map. - SqlPredicate now supports '\' as escape character. - SqlPredicate now supports regular expressions using REGEX keyword. For example, `map.values(new SqlPredicate(\&quot;name REGEX .*earl$\&quot;))`. - Hazelcast queue now supports QueueStoreFactory that will be used to create custom QueueStores for persistent queues. QueueStoreFactory is similar to map's MapStoreFactory. - TransactionalQueue now supports `peek()` and `peek(timeout, timeunit)` methods. - Client now has SSL support. - Client also supports custom socket implementations using SocketFactory API. A custom socket factory can be defined in ClientConfig. - Hazelcast IList and ISet now have their own configurations. They can be configured using config API, XML and Spring. - `HazelcastInstance.shutdown()` method added back. - OSGI compatibility is improved significantly.  "
});

documentTitles["3-1-8.html#fixes"] = "Fixes";
index.add({
    url: "3-1-8.html#fixes",
    title: "Fixes",
    body: "## Fixes  This section lists issues solved for 3.1 and 3.1.x releases.  -	`ClassCastException` when using near cache. [[#1941]](https://github.com/hazelcast/hazelcast/issues/1941) -	Hazelcast management console does not allow update of map configuration in runtime. [[#1898]](https://github.com/hazelcast/hazelcast/issues/1898) -	MultiMap ConcurrentModificationExceptions. [[#1882]](https://github.com/hazelcast/hazelcast/issues/1882) -	Near Cache: Race Condition. [[#1861]](https://github.com/hazelcast/hazelcast/issues/1861) -	ClientReAuthOperation cannot return response without call ID. [[#1816]](https://github.com/hazelcast/hazelcast/issues/1816) - REST put overrides TTL from the configuration. [[#1783]](https://github.com/hazelcast/hazelcast/issues/1783) - Management Center usage should not trigger loading of map. [[#1770]](https://github.com/hazelcast/hazelcast/issues/1770) - ResourceAdaptor fix to handle external HazelcastInstance breaking scheme. [[#1727]](https://github.com/hazelcast/hazelcast/issues/1727) - There is no `executeOnAllKey` for IMap, the documentation should be changed. [[#1711]](https://github.com/hazelcast/hazelcast/issues/1711) - Memory leak; `backupCalls` record is not removed if `Future.get()` is not called during `IMap.putAsync()` or `IMap.removeAsync()`. [[#1693]](https://github.com/hazelcast/hazelcast/issues/1693) - `ClassCastException` when removing from Multimap. [[#1667]](https://github.com/hazelcast/hazelcast/issues/1667) - com.hazelcast.spi.exception.RetryableHazelcastException: Map is not ready. [[#1593]](https://github.com/hazelcast/hazelcast/issues/1593) - Member join while loading persistent maps throws NPEs. [[#1577]](https://github.com/hazelcast/hazelcast/issues/1577) - Near cache does not work properly for null values. [[#1570]](https://github.com/hazelcast/hazelcast/issues/1570) - Memory Leak on operation timeout. [[#1559]](https://github.com/hazelcast/hazelcast/issues/1559) - EOFException: Remote socket is closed. [[#1551]](https://github.com/hazelcast/hazelcast/issues/1551) - Severe NullPointerException but then everything works fine. [[#1548]](https://github.com/hazelcast/hazelcast/issues/1548) - `IMap.putTransient(K,V)` method (without TTL) is missing. [[#1526]](https://github.com/hazelcast/hazelcast/issues/1526) - Object is not an instance of declaring the class com.hazelcast.query.impl.QueryException. [[#1503]](https://github.com/hazelcast/hazelcast/issues/1503) - Setting socket timeout, Hazelcast client will throw SocketTimeoutException. [[#1435]](https://github.com/hazelcast/hazelcast/issues/1435) - `QueueStore.store(Long, Object)` is called multiple times from `TransactionalQueue.offer`. [[#1412]](https://github.com/hazelcast/hazelcast/issues/1412) - Warning: No transaction item for itemId: &lt;identifier&gt;. [[#1393]](https://github.com/hazelcast/hazelcast/issues/1393) - StackOverflow in `AndResultSet`. [[#1349]](https://github.com/hazelcast/hazelcast/issues/1349) - `maxIdleSeconds` is set to DEFAULT_TTL_SECONDS in `com.hazelcast.config.MapConfig`. [[#1308]](https://github.com/hazelcast/hazelcast/issues/1308) - Serializer implementation registration with Spring config fails. [[#1294]](https://github.com/hazelcast/hazelcast/issues/1294) - `ReadBackupData` on Map exposes internally stored value. [[#1292]](https://github.com/hazelcast/hazelcast/issues/1292) - Multimap: Lock is not owned by the transaction. [[#1276]](https://github.com/hazelcast/hazelcast/issues/1276) - Java deserialization of non-static inner classes fails. [[#1265]](https://github.com/hazelcast/hazelcast/issues/1265) - HazelcastInstance is not injected into MapInterceptor when HazelcastInstanceAware is implemented. [[#1233]](https://github.com/hazelcast/hazelcast/issues/1233) - Remove `compare` optimization from map put. [[#1231]](https://github.com/hazelcast/hazelcast/issues/1231) - Unneeded deserialization in EntryOperation. [[#1182]](https://github.com/hazelcast/hazelcast/issues/1182) - Adding an InitialMembershipListener to ClientConfig using `ClientConfig.addListenerConfig` throws NullPointerException. [[#1181]](https://github.com/hazelcast/hazelcast/issues/1181) - Insufficient calculation of next key/value when doing a restore of message queue from database. [[#1165]](https://github.com/hazelcast/hazelcast/issues/1165) - Case insensitivity of configurations in XML. [[#1152]](https://github.com/hazelcast/hazelcast/issues/1152) - The scheme `hazelcast-spring3.1.xsd` throws SAXParseException when `hz:interfaces` have multiple `hz:interface` elements. [[#1145]](https://github.com/hazelcast/hazelcast/issues/1145) - Bundle start fails due to `OSGiScriptEngineManager`. [[#1136]](https://github.com/hazelcast/hazelcast/issues/1136) - Apparent memory leak when using near cache. [[#1087]](https://github.com/hazelcast/hazelcast/issues/1087) - Semaphore can be initialized multiple times if permit-count = 0. [[#1080]](https://github.com/hazelcast/hazelcast/issues/1080) - Exception when running continuous query. And non-existent key is deleted under transaction. [[#1076]](https://github.com/hazelcast/hazelcast/issues/1076) - Race condition between first map operation and re-populating a map after a cluster restart. [[#1070]](https://github.com/hazelcast/hazelcast/issues/1070) - Eviction tasks should be cancelled on `remove()`, `evict()`. [[#1068]](https://github.com/hazelcast/hazelcast/issues/1068) - Stale cache issues when using `HazelcastLocalCacheRegionFactory`. [[#1039]](https://github.com/hazelcast/hazelcast/issues/1039) - When multiple nodes start simultaneously, post join process duplicates some event registrations and causes warning logs on each publish. [[#1024]](https://github.com/hazelcast/hazelcast/issues/1024) - Multimap entry listener is called twice. [[#993]](https://github.com/hazelcast/hazelcast/issues/993) - Clear logic on `ByteArrayObjectDataOutput` can create memory leak with large objects. [[#989]](https://github.com/hazelcast/hazelcast/issues/989) - TransactionException: Lock is not owned by the transaction. [[#988]](https://github.com/hazelcast/hazelcast/issues/988) - Spring schema declaration is missing. [[#982]](https://github.com/hazelcast/hazelcast/issues/982) - Null object indexing exception. [[#978]](https://github.com/hazelcast/hazelcast/issues/978) - Entries not changed by an EntryProcessor should not render an EntryListener event. [[#969]](https://github.com/hazelcast/hazelcast/issues/969) - Unlock parameter in TxnSetOperation backup operation is not serialized. [[#956]](https://github.com/hazelcast/hazelcast/issues/956) - PartitioningStrategy is not set in HazelcastClient. [[#923]](https://github.com/hazelcast/hazelcast/issues/923) - Enhancement request: Consider extending SqlPredicate to allow using regexes. [[#914]](https://github.com/hazelcast/hazelcast/issues/914) - Map `getAll()` is blocked with \&quot;Map is not ready exception\&quot;. [[#887]](https://github.com/hazelcast/hazelcast/issues/887) - QueueStoreConfig needs a factory to support wildcard creation. [[#884]](https://github.com/hazelcast/hazelcast/issues/884) - Data is lost when transaction manager node terminates/crashes without preparing transaction. [[#863]](https://github.com/hazelcast/hazelcast/issues/863) - Make `cache-null-value-seconds` customizable. [[#806]](https://github.com/hazelcast/hazelcast/issues/806) - Reintroduce the `Instanceof` predicate. [[#790]](https://github.com/hazelcast/hazelcast/issues/790) - Add `IMap.addEntryListener()` without key (continuous query). [[#710]](https://github.com/hazelcast/hazelcast/issues/710) - The calculation `used_heap_percentage` should take backups into account. [[#403]](https://github.com/hazelcast/hazelcast/issues/403)   "
});



documentTitles["3-0-3.html#303"] = "3.0.3";
index.add({
    url: "3-0-3.html#303",
    title: "3.0.3",
    body: "# 3.0.3  This section lists the new features, enhancements and fixed issues for 3.0 and 3.0.x releases.  "
});

documentTitles["3-0-3.html#new-features"] = "New Features";
index.add({
    url: "3-0-3.html#new-features",
    title: "New Features",
    body: "## New Features  This section provides the new features introduced with Hazelcast 3.0 release.  - Multi-thread execution: Operations are now executed by multiple threads (by factor of processor cores). With Hazelcast 2, there was a only single thread. - SPI: Service Programming Interface for developing new partitioned services, data structures. All Hazelcast data structures like Map, Queue are reimplemented with SPI. - IdentifiedDataSerializable: A slightly optimized version of DataSerializable that does not use class name and reflection for de-serialization. - Portable Serialization: Another Serialization interface that does not use reflection and can navigate through binary data and fetch/query/index individual field without having any reflection or whole object de-serialization. - Custom Serialization: Support for custom serialization that can be plugged into Hazelcast. - Entry Processor: Executing an EntryProcessor on the key or on all entries. Hazelcast implicitly locks the entree and guarantees no migration while the execution of the Processor. - In-Memory Format: Support for storing entries in Binary, Object and Cached format. - Continuous Query: Support for listeners that register with a query and are notified when there is a change on the Map that matches the Query. - Interceptors: Ability to intercept the Map operation before/after it is actually executed. - Lazy Indexing:Ability to index existing items in the map. No need to add indexes at the very beginning. - Queue: No more dependency on the distributed map - Queue: Scales really well as you have thousands of separate queues. - Queue: Persistence Support for persistence with QueueStore. - Multimap: Values can be Set/List/Queue. - Topic: Support for global ordering where all Nodes receive all messages in the same order. - Distributed Transaction: Support for both 1-phase (local) and 2 phase transactions with a totally new API. - New Binary Protocol: A new binary protocol based on portable serialization. The same protocol is used for Java/C/C# and other clients. - Smart client: Support for dummy and smart client. A dummy client will maintain a connection to only one member, whereas the smart client can route the operations to the node that owns the data.  "
});

documentTitles["3-0-3.html#fixes"] = "Fixes";
index.add({
    url: "3-0-3.html#fixes",
    title: "Fixes",
    body: "## Fixes  This section lists issues solved for 3.0 and 3.0.x releases.  - A class cannot be LifecycleListener and MigrationListener at the same time. [[#970]](https://github.com/hazelcast/hazelcast/issues/970) - EntryProcessor does not fire entry events. [[#950]](https://github.com/hazelcast/hazelcast/issues/950) - `IMap.localKeySet()` is very slow after upgrade to 3.0. [[#946]](https://github.com/hazelcast/hazelcast/issues/946) - Eviction logic error for `USED_HEAP_PERCENTAGE` and `USED_HEAP_SIZE`. [[#891]](https://github.com/hazelcast/hazelcast/issues/891) - Failed to execute SqlPredicate with LIKE and OR keywords on the same field of the class. [[#885]](https://github.com/hazelcast/hazelcast/issues/885) - Infinite loop in native client when cluster is gone. [[#821]](https://github.com/hazelcast/hazelcast/issues/821) - TransactionalMap: DistributedObjectListener is not working. [[#812]](https://github.com/hazelcast/hazelcast/issues/812) - Could not find PortableFactory for factoryId: -3. [[#800]](https://github.com/hazelcast/hazelcast/issues/800) - Eviction occurs when it is not expected to occur. [[#776]](https://github.com/hazelcast/hazelcast/issues/776) - Possible dead-lock while updating an entry which loaded by map-loader. [[#768]](https://github.com/hazelcast/hazelcast/issues/768) - `IMap.destroy()` clears map instead of destroy. [[#764]](https://github.com/hazelcast/hazelcast/issues/764) - `IMap.destroy()` throws an exception on client. [[#726]](https://github.com/hazelcast/hazelcast/issues/726) - Client replace method issue. [[#724]](https://github.com/hazelcast/hazelcast/issues/724) - Classloader issue in deserialization. [[#723]](https://github.com/hazelcast/hazelcast/issues/723) - JMX preDeregister of some beans throws HazelcastIsNotActiveException during `shutdownAll()`. [[#713]](https://github.com/hazelcast/hazelcast/issues/713) - Optional sequencing support for Hazelcast write-behind implementation is needed. [[#712]](https://github.com/hazelcast/hazelcast/issues/712) - ManagementService.destroy fails to find HazelcastMBean on shutdown. [[#683]](https://github.com/hazelcast/hazelcast/issues/683) - Client `getDistributedObject()` does not work. [[#678]](https://github.com/hazelcast/hazelcast/issues/678) - Spring ManagedContext does not run on the local node when a task is executed. [[#659]](https://github.com/hazelcast/hazelcast/issues/659) - MemberLeftException during SqlPredicate search. [[#654]](https://github.com/hazelcast/hazelcast/issues/654) - NearCacheConfig: maxSize = 0 is no longer interpreted as `Integer.MAX_VALUE`. [[#650]](https://github.com/hazelcast/hazelcast/issues/650) - `statistics-enabled` is missing for most items in the XSD scheme. [[#642]](https://github.com/hazelcast/hazelcast/issues/642) - Could not find PortableFactory for factoryId: 1095521605 on SqlPredicate query. [[#617]](https://github.com/hazelcast/hazelcast/issues/617) - `Map.containsKey()` should delay eviction. [[#614]](https://github.com/hazelcast/hazelcast/issues/614) - Error when serializing portable nested inside other types: Could not find PortableFactory for factoryId: 0. [[#600]](https://github.com/hazelcast/hazelcast/issues/600) - Client related configuration improvements. [[#599]](https://github.com/hazelcast/hazelcast/issues/599) - Index on `enum` properties does not work. [[#597]](https://github.com/hazelcast/hazelcast/issues/597) - Executing Query operation with a heavy CRUD load throws an IllegalArgumentException. [[#596]](https://github.com/hazelcast/hazelcast/issues/596) - `Map.set()` always calls the `onAdded` entry event. [[#589]](https://github.com/hazelcast/hazelcast/issues/589) - Client throws 'Could not register listener' often - Near Cache entries get never invalidated after. [[#584]](https://github.com/hazelcast/hazelcast/issues/584) - Unexpected authentication exception. [[#576]](https://github.com/hazelcast/hazelcast/issues/576) - Map `clear` does not call MapStore. [[#572]](https://github.com/hazelcast/hazelcast/issues/572) - Transactional collections should check the transaction state to validate proper access. [[#568]](https://github.com/hazelcast/hazelcast/issues/568) - Client threads are not destroyed on authentication failures. [[#555]](https://github.com/hazelcast/hazelcast/issues/555) - Map index from configuration is not working. [[#553]](https://github.com/hazelcast/hazelcast/issues/553) - Client disconnects and never tries to reconnect. [[#538]](https://github.com/hazelcast/hazelcast/issues/538) - Map local entry listener gives no Value on `entryEvicted`. [[#537]](https://github.com/hazelcast/hazelcast/issues/537) - The method `map.getAll()` is not working if entry does not exist via Client. [[#535]](https://github.com/hazelcast/hazelcast/issues/535) - EC2 Auto discovery bug: Instances do not see each other. [[#516]](https://github.com/hazelcast/hazelcast/issues/516) - Custom types (other than primitives, string, date, enum, etc) can not be queried. [[#503]](https://github.com/hazelcast/hazelcast/issues/503) - OOME is thrown when queues are not explicitly destroyed. [[#417]](https://github.com/hazelcast/hazelcast/issues/417) - The method `loadAll` is called redundantly on a new node joining the cluster. [[#341]](https://github.com/hazelcast/hazelcast/issues/341) - Support for Hibernate 4.0 cache is needed. [[#72]](https://github.com/hazelcast/hazelcast/issues/72) - Add a functionality that performs entry processings. [[#71]](https://github.com/hazelcast/hazelcast/issues/71) - Support for JVM system property reference in Hazelcast XML is needed. [[#59]](https://github.com/hazelcast/hazelcast/issues/59) - Support `invalidation-only` 2nd level cache for Hibernate. [[#57]](https://github.com/hazelcast/hazelcast/issues/57) - Hazelcast resource adapter does not work on WebSphere 6.1/7. [[#37]](https://github.com/hazelcast/hazelcast/issues/37)    "
});



documentTitles["2-6-9.html#269"] = "2.6.9";
index.add({
    url: "2-6-9.html#269",
    title: "2.6.9",
    body: "# 2.6.9  The following are the fixed issues for 2.6.9 release.  - Hazelcast cannot match hostnames when wildcards are used in `interfaces` configuration element. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/2396\&quot; target=\&quot;_blank\&quot;&gt;[2396]&lt;/a&gt;  "
});



documentTitles["2-6-8.html#268"] = "2.6.8";
index.add({
    url: "2-6-8.html#268",
    title: "2.6.8",
    body: "# 2.6.8  The following are the fixed issues for 2.6.8 release.  - `OperationTimeoutException`: [CONCURRENT_MAP_SET] Redo threshold[90] exceeded! Last redo cause: REDO_MAP_OVER_CAPACITY. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/1685\&quot; target=\&quot;_blank\&quot;&gt;[1685]&lt;/a&gt;  "
});



documentTitles["2-6-6.html#266"] = "2.6.6";
index.add({
    url: "2-6-6.html#266",
    title: "2.6.6",
    body: "# 2.6.6  The following are the fixed issues for 2.6.6 release.  - Hazelcast 2.6.5 throws `NullPointerException` if the method `MapStore.load()` returns null during `IMap.getAll()` execution. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/1605\&quot; target=\&quot;_blank\&quot;&gt;[1605]&lt;/a&gt; - In Hazelcast 2.x branch, Hazelcast instance is shutdown but exception is not logged.  &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/1488\&quot; target=\&quot;_blank\&quot;&gt;[1488]&lt;/a&gt;  "
});



documentTitles["2-6-3.html#263"] = "2.6.3";
index.add({
    url: "2-6-3.html#263",
    title: "2.6.3",
    body: "# 2.6.3  The following are the fixed issues for 2.6.3 release.  - Memcache client content in the Reference Manual needs to be improved . &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/848\&quot; target=\&quot;_blank\&quot;&gt;[1047]&lt;/a&gt; - Hazelcast Hibernate `pom` is using a retired maven repo. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/831\&quot; target=\&quot;_blank\&quot;&gt;[831]&lt;/a&gt; - \&quot;Marked for removal\&quot; mechanism should be more clarified. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/792\&quot; target=\&quot;_blank\&quot;&gt;[792]&lt;/a&gt;  "
});



documentTitles["2-6-2.html#262"] = "2.6.2";
index.add({
    url: "2-6-2.html#262",
    title: "2.6.2",
    body: "# 2.6.2  The following are the fixed issues for 2.6.2 release.  - Client Listener: the `Client` argument has null `Socketaddress` for `ClientDisconnected` listener. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/756\&quot; target=\&quot;_blank\&quot;&gt;[756]&lt;/a&gt; - Entries put by the method `IMap.putAll` were never evicted from the  map with the TTL configured. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/670\&quot; target=\&quot;_blank\&quot;&gt;[670]&lt;/a&gt; - The Java client is initialized with two cluster members. After killing one member in the cluster where it is connected, the client is unable to reconnect. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/653\&quot; target=\&quot;_blank\&quot;&gt;[653]&lt;/a&gt; - Put operation after a missed get operation in a transaction does not have any effect. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/644\&quot; target=\&quot;_blank\&quot;&gt;[644]&lt;/a&gt; - Near cache functionality does not work for Java client. `MapConfig` always returns the generic map name since in the client, the client prefix is added to map's name. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/620\&quot; target=\&quot;_blank\&quot;&gt;[620]&lt;/a&gt; "
});



documentTitles["2-6-1.html#261"] = "2.6.1";
index.add({
    url: "2-6-1.html#261",
    title: "2.6.1",
    body: "# 2.6.1  The following are the fixed issues and enhancements for 2.6.1 release.  - The method `set(Key, Value, 0, Timeunit)` applies the configured TTL values where it should cancel eviction. Also, the method `set(Key, Value)` should apply the inherited TTL if exists. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/585\&quot; target=\&quot;_blank\&quot;&gt;[585]&lt;/a&gt; - Operations like `contains()` should use a specific executor service. Calling the default executor service may cause a deadlock. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/579\&quot; target=\&quot;_blank\&quot;&gt;[579]&lt;/a&gt; - Empty array for the predicate `in` throws exception. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/573\&quot; target=\&quot;_blank\&quot;&gt;[573]&lt;/a&gt; - The methods `ILock.destroy()` and `ISemaphore.destroy()` throw exceptions on Hazelcast 2.5. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/566\&quot; target=\&quot;_blank\&quot;&gt;[566]&lt;/a&gt; - `NullPointerException` in `com.hazelcast.nio.ConnectionManager` in Hazelcast 2.5. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/530\&quot; target=\&quot;_blank\&quot;&gt;[530]&lt;/a&gt; - Hazelcast instance does not start with TCP configuration in Hazelcast 2.5 when the hosts are not reachable. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/523\&quot; target=\&quot;_blank\&quot;&gt;[523]&lt;/a&gt; - Hazelcast source archives in Maven central repository does not contain the Java source files but the class files. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/514\&quot; target=\&quot;_blank\&quot;&gt;[514]&lt;/a&gt; - There is an unexpected store call behavior in Hazelcast 2.6. Every time when the method `get()` is used in a transaction and when the method `commit()` is called, it throws \&quot;Duplicated key order_id\&quot; exception. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/506\&quot; target=\&quot;_blank\&quot;&gt;[506]&lt;/a&gt; - When the method `getInstances()` on HazelcastInstance is called (acquired via `HazelcastClient.newHazelcastClient(clientConfig)`), the collection is retrieved. After some time, `NullPointerException` is thrown when the same method is called. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/478\&quot; target=\&quot;_blank\&quot;&gt;[478]&lt;/a&gt; - There are some formatting problems when using SQL predicates with date. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/473\&quot; target=\&quot;_blank\&quot;&gt;[473]&lt;/a&gt; - There is a memory leak in the member when clients are connected. An `OutofMemoryException` is thrown related to a client authentication failure. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/450\&quot; target=\&quot;_blank\&quot;&gt;[450]&lt;/a&gt; - Hazelcast client's `putAll()` method throws `NullPointerException` when called with an empty map. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/397\&quot; target=\&quot;_blank\&quot;&gt;[397]&lt;/a&gt; - The `InputStream` in the `XmlConfigBuilder` can never be closed. If the constructor which provides an XML file is used, it creates a new `FileInputStream`. There is no ability to close this input stream after it is created. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/390\&quot; target=\&quot;_blank\&quot;&gt;[390]&lt;/a&gt; - The heartbeat timer for Hazelcast client does not run again after a `NullPointerException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/382\&quot; target=\&quot;_blank\&quot;&gt;[382]&lt;/a&gt; - The queue `SysmteLogService.joinLogs` holds some data and causes memory consumption. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/325\&quot; target=\&quot;_blank\&quot;&gt;[325]&lt;/a&gt; - Doing a read of a value not modified in a transaction causes the listener to fire an update for that entry. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/311\&quot; target=\&quot;_blank\&quot;&gt;[311]&lt;/a&gt;  "
});



documentTitles["2-6.html#26"] = "2.6";
index.add({
    url: "2-6.html#26",
    title: "2.6",
    body: "# 2.6  The following are the fixed issues and enhancements for 2.6 release.  - Issues with Spring configuration and merge policies. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/488\&quot; target=\&quot;_blank\&quot;&gt;[488]&lt;/a&gt; - Trying to create a configuration object by API, serializing and deserializing the objects (by Hazelcast builder), due to an error of PartitionGroup, `RuntimeException` is thrown. If set by API, it works. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/487\&quot; target=\&quot;_blank\&quot;&gt;[487]&lt;/a&gt; - OSGi: The manifest data in `hazelcast-all.jar` for 2.5.1 is not correct. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/484\&quot; target=\&quot;_blank\&quot;&gt;[484]&lt;/a&gt; - Consistency of the set of members in the cluster should be guaranteed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/477\&quot; target=\&quot;_blank\&quot;&gt;[477]&lt;/a&gt; - Hazelcast IMap's `containsKey()`method does not reset the idle timeout. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/472\&quot; target=\&quot;_blank\&quot;&gt;[472]&lt;/a&gt; - `@SpringAware` annotation leads to memory leak when using Hazelcast distributed executor service. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/470\&quot; target=\&quot;_blank\&quot;&gt;[470]&lt;/a&gt;"
});



documentTitles["2-5-1.html#251"] = "2.5.1";
index.add({
    url: "2-5-1.html#251",
    title: "2.5.1",
    body: "# 2.5.1  The following are the fixed issues and enhancements for 2.5.1 release.  - Deadlock happens when Hazelcast client is shut down. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/466\&quot; target=\&quot;_blank\&quot;&gt;[466]&lt;/a&gt; - There is a data inconsistency and loss following the `ClassCastException: CONCURRENT_MAP_REPLACE_IF_SAME`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/462\&quot; target=\&quot;_blank\&quot;&gt;[462]&lt;/a&gt; - Put operations with zero TTL does not prevent the eviction. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/455\&quot; target=\&quot;_blank\&quot;&gt;[455]&lt;/a&gt; - `NullPointerException` is thrown at `com.hazelcast.query.MapIndexService.remove` during CONCURRENT_MAP_REMOVE operation. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/454\&quot; target=\&quot;_blank\&quot;&gt;[454]&lt;/a&gt; - The exception `Failed migrating from Member` is thrown when two clients are started in Eclipse and one is stopped before it is completely initialized. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/452\&quot; target=\&quot;_blank\&quot;&gt;[452]&lt;/a&gt; - The method `IList.destroy()` does not empty the list. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/449\&quot; target=\&quot;_blank\&quot;&gt;[449]&lt;/a&gt; - The package `hazelcast-all.jar` should build its manifest dynamically. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/448\&quot; target=\&quot;_blank\&quot;&gt;[448]&lt;/a&gt; - The package `hazelcast-client.jar` does not deploy as OSGi bundle in JBoss7. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/447\&quot; target=\&quot;_blank\&quot;&gt;[447]&lt;/a&gt; - The package `hazelcast-wm.jar` should not require `servlet-api` v3.0. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/432\&quot; target=\&quot;_blank\&quot;&gt;[432]&lt;/a&gt; - `NullPointerException` is thrown when trying to run the method `clear()` on an empty distributed set when migrating from Hazelcast 2.1.2 to 2.4 and 2.5 &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/430\&quot; target=\&quot;_blank\&quot;&gt;[430]&lt;/a&gt; - The method `getOldValue()` consistently returns wrong results for `entryUpdated` listener notifications after the `replace()` operation. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/418\&quot; target=\&quot;_blank\&quot;&gt;[418]&lt;/a&gt; - In the Hazelcast configuration schema XSD, the `tcp-ip` and `aws` elements do not have `conn-timeout-seconds` sub-element. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/410\&quot; target=\&quot;_blank\&quot;&gt;[410]&lt;/a&gt; - It would be nice if the `hazelcast.config` option can be used in combination with the classpath. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/408\&quot; target=\&quot;_blank\&quot;&gt;[408]&lt;/a&gt; - Deadlock happens when adding an index to a map that is not empty. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/310\&quot; target=\&quot;_blank\&quot;&gt;[310]&lt;/a&gt; - When custom loader is used with write-behind persistence mode, every time `store()` is called in loader and then `remove()` is called on locked map, value for the key is read from the store and not from map. Consequently, put/set/update is overridden and data is lost. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/187\&quot; target=\&quot;_blank\&quot;&gt;[187]&lt;/a&gt; "
});



documentTitles["2-5.html#25"] = "2.5";
index.add({
    url: "2-5.html#25",
    title: "2.5",
    body: "# 2.5  This section lists the new features, enhancements and fixed issues for 2.5 release.  "
});

documentTitles["2-5.html#new-features"] = "New Features";
index.add({
    url: "2-5.html#new-features",
    title: "New Features",
    body: "### New Features  The following are the new features introduced with 2.5 release.  - Added near cache support for Java Client. - Management Center alert system can now receive alerts based on custom filters. - Management Center has now better support for Hazelcast cluster running in OSGI environment. - Nodes can be easily shutdown or restarted using Management Center interface.  "
});

documentTitles["2-5.html#fixes"] = "Fixes";
index.add({
    url: "2-5.html#fixes",
    title: "Fixes",
    body: "### Fixes  The following are the fixed issues and enhancements for 2.5 release.  - Management Center does not respond for the maps with names having underscore characters. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/394\&quot; target=\&quot;_blank\&quot;&gt;[394]&lt;/a&gt; - MultiTask operation returns `Constants$Object$6` instead of a map. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/392\&quot; target=\&quot;_blank\&quot;&gt;[392]&lt;/a&gt; - In the method `forceUnlock()`, local lock is not removed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/386\&quot; target=\&quot;_blank\&quot;&gt;[386]&lt;/a&gt; - Deadlock happens when the cluster is being initialized. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/386\&quot; target=\&quot;_blank\&quot;&gt;[386]&lt;/a&gt;  "
});



documentTitles["2-4-1.html#241"] = "2.4.1";
index.add({
    url: "2-4-1.html#241",
    title: "2.4.1",
    body: "# 2.4.1  This section lists the new features, enhancements and fixed issues for 2.4.1 release.  "
});

documentTitles["2-4-1.html#new-features"] = "New Features";
index.add({
    url: "2-4-1.html#new-features",
    title: "New Features",
    body: "### New Features  The following are the new features introduced with 2.4.1 release.  - Added Hibernate 2nd level cache local/invalidation mode. - Added quick clear feature for maps.  "
});

documentTitles["2-4-1.html#fixes"] = "Fixes";
index.add({
    url: "2-4-1.html#fixes",
    title: "Fixes",
    body: "### Fixes   The following are the fixed issues and enhancements for 2.4.1 release.  - After a split-brain syndrome, states sent by a non-member should be ignored. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/374\&quot; target=\&quot;_blank\&quot;&gt;[374]&lt;/a&gt; - Indexing: Negative double values comparison causes problems in SQL predicate. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/368\&quot; target=\&quot;_blank\&quot;&gt;[368]&lt;/a&gt; - Query on Hazelcast IMap with indexes returns stale data. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/359\&quot; target=\&quot;_blank\&quot;&gt;[359]&lt;/a&gt; - By default, the method `map.clear()` clears the map entry by entry since the entries should be checked if they have a related lock, should be persisted, etc. If you do not use map store and can assume that there is no locked entries, then there should be an option to clear the map directly. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/356\&quot; target=\&quot;_blank\&quot;&gt;[356]&lt;/a&gt; - System logs should be optional. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/351\&quot; target=\&quot;_blank\&quot;&gt;[351]&lt;/a&gt; - Management center should show the Hazelcast version. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/349\&quot; target=\&quot;_blank\&quot;&gt;[349]&lt;/a&gt; - `UnsupportedOperationException` is thrown when the method `getConfig()` is called during the startup of the web application. Used versions are Hazelcast 2.4 and Hibernate 3.6.6. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/339\&quot; target=\&quot;_blank\&quot;&gt;[339]&lt;/a&gt; - Documentation is wrong. Hazelcast supports `REPEATABLE_READ` instead of `READ_COMMITTED`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/337\&quot; target=\&quot;_blank\&quot;&gt;[337]&lt;/a&gt; - When you need a lite member, since it cannot be specified in the configuration file, you need to do the whole loading mechanism yourself. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/333\&quot; target=\&quot;_blank\&quot;&gt;[333]&lt;/a&gt; - In the local map statistics, currently there is only `getHits()`. There should be statistics for misses (get requests which return null) to see hit/miss ratio. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/328\&quot; target=\&quot;_blank\&quot;&gt;[328]&lt;/a&gt; - When Hazelcast OSGi bundle is used in Glassfish 3.1.2, `ClassNotFoundException` is thrown. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/322\&quot; target=\&quot;_blank\&quot;&gt;[322]&lt;/a&gt; - The method `MapConfig.toString()` should report `mapIndexConfig` too. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/321\&quot; target=\&quot;_blank\&quot;&gt;[321]&lt;/a&gt; - When the connection between the client and member is lost, the client does not notice it and tries to send the data for a very long time and it does not shut down.&lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/315\&quot; target=\&quot;_blank\&quot;&gt;[315]&lt;/a&gt; - Hazelcast tends to consume large amounts of memory in `com.hazelcast.nio.Packet` instances. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/312\&quot; target=\&quot;_blank\&quot;&gt;[312]&lt;/a&gt; - Map index entries are not deleted upon migration. When using SQL predicate in the method `localKeySet()`, the same key can be retrieved on different nodes. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/308\&quot; target=\&quot;_blank\&quot;&gt;[308]&lt;/a&gt; - Hazelcast IMap entries are evicted even they are touched by the method `put()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/466\&quot; target=\&quot;_blank\&quot;&gt;[466]&lt;/a&gt;  "
});



documentTitles["2-4.html#24"] = "2.4";
index.add({
    url: "2-4.html#24",
    title: "2.4",
    body: "# 2.4  This section lists the new features, enhancements and fixed issues for 2.4 release.  "
});

documentTitles["2-4.html#new-features"] = "New Features";
index.add({
    url: "2-4.html#new-features",
    title: "New Features",
    body: "### New Features  The following are the new features introduced with 2.4 release.  - Client threads does not have fixed size anymore, now it uses internal Hazelcast cached thread pool. - Added ability to restrict outbound ports that Hazelcast uses to connect to other nodes.  "
});

documentTitles["2-4.html#fixes"] = "Fixes";
index.add({
    url: "2-4.html#fixes",
    title: "Fixes",
    body: "### Fixes   The following are the fixed issues and enhancements for 2.4 release.  - Hazelcast Management Center's \&quot;Configuration has been successfully updated.\&quot; notification is never removed. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/301\&quot; target=\&quot;_blank\&quot;&gt;[301]&lt;/a&gt; - Map maximum size does not take into account that some cluster members are lite members and cannot hold any data. Thus, the map becomes smaller than the size it was configured. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/292\&quot; target=\&quot;_blank\&quot;&gt;[292]&lt;/a&gt; - The method `map.containsKey()` does not reset the idle time counter. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/288\&quot; target=\&quot;_blank\&quot;&gt;[288]&lt;/a&gt; - In Hazelcast 2.3.1, the property `hazelcast.local.localAddress` is used only when provided directly from `System.properties`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/282\&quot; target=\&quot;_blank\&quot;&gt;[282]&lt;/a&gt; - Data removed under transaction sometimes could not be removed from the backup. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/277\&quot; target=\&quot;_blank\&quot;&gt;[277]&lt;/a&gt; - Map initialization should not use the default executor service. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/276\&quot; target=\&quot;_blank\&quot;&gt;[276]&lt;/a&gt; - In Hazelcast 2.3.1, Hazelcast got into a state where the list of members on some of the nodes do not match up. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/274\&quot; target=\&quot;_blank\&quot;&gt;[274]&lt;/a&gt; - Map `EntryListener` is not working correctly if one master is restarted. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/269\&quot; target=\&quot;_blank\&quot;&gt;[269]&lt;/a&gt; - `IMap.tryLockAndGet`: There is a concurrency error when the map has map store. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/268\&quot; target=\&quot;_blank\&quot;&gt;[268]&lt;/a&gt; - Error in `com.hazelcast.query.Predicates.NotEqualPredicate`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/262\&quot; target=\&quot;_blank\&quot;&gt;[262]&lt;/a&gt; - Partition Group with group type CUSTOM should honor configured backups. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/260\&quot; target=\&quot;_blank\&quot;&gt;[260]&lt;/a&gt; - Messages are lost while moving them inside a transaction. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/259\&quot; target=\&quot;_blank\&quot;&gt;[259]&lt;/a&gt; - Enable Hazelcast to use specified port ranges to accommodate firewall policies. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/251\&quot; target=\&quot;_blank\&quot;&gt;[251]&lt;/a&gt; - Seeing multiple concurrent locks on a distributed lock. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/168\&quot; target=\&quot;_blank\&quot;&gt;[168]&lt;/a&gt;  "
});



documentTitles["2-3-1.html#231"] = "2.3.1";
index.add({
    url: "2-3-1.html#231",
    title: "2.3.1",
    body: "# 2.3.1   The following are the fixed issues and enhancements for 2.3.1 release.  - Changed `hazelcast.partition.migration.interval` property's value from 1 to 0. - The method `ILock.newCondition()` now throws `UnsupportedOperationException`. - After upgrading Hazelcast to 2.3, IPv6 is no longer supported in TCP join mechanism. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/258\&quot; target=\&quot;_blank\&quot;&gt;[258]&lt;/a&gt; - `ClassCastException` is thrown when the method `MultiMap.get()` is run. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/256\&quot; target=\&quot;_blank\&quot;&gt;[256]&lt;/a&gt; - Currently, the method `MultiMap.get(K key)` returns null if there are no values associated with the key. However, it should return an empty collection instead. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/167\&quot; target=\&quot;_blank\&quot;&gt;[167]&lt;/a&gt; "
});



documentTitles["2-3.html#23"] = "2.3";
index.add({
    url: "2-3.html#23",
    title: "2.3",
    body: "# 2.3  This section lists the new features, enhancements and fixed issues for 2.3 release.  "
});

documentTitles["2-3.html#new-features-and-changes"] = "New Features and Changes";
index.add({
    url: "2-3.html#new-features-and-changes",
    title: "New Features and Changes",
    body: "### New Features and Changes  The following are the new features and changes introduced with 2.3 release.  - Changed `hazelcast.max.operation.timeout` unit from seconds to milliseconds. - Added `hazelcast.max.concurrent.operation.limit` property to be able to limit the number of concurrent operations that can be submitted to Hazelcast. - Added `hazelcast.backup.redo.enabled` property to enable/disable redo for backup operations. - Added MultiMap and Distributed ExecutorService statistics to Management Center application. - `MigrationListener` has now an additional method to receive failed migration events; `void migrationFailed(MigrationEvent migrationEvent)`. - `ItemEvent` has now an additional method returning Member firing that event; `public Member getMember()`. - Improved out of memory (OOM) error detection and handling. Now it is possible to register a custom hook when OutOfMemoryError is thrown. - Fixed some issues related to domain name handling and networking/join. - During cluster merge after a network split-brain, merging side will now fire MERGING and MERGED before and after RESTARTING and RESTARTED LifecycleEvents.  "
});

documentTitles["2-3.html#fixes"] = "Fixes";
index.add({
    url: "2-3.html#fixes",
    title: "Fixes",
    body: "### Fixes   The following are the fixed issues and enhancements for 2.3 release.  - Operation exceptions occur randomly while the SQL predicates are stress tested. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/263\&quot; target=\&quot;_blank\&quot;&gt;[263]&lt;/a&gt; - `EOF` exception is thrown in Management Center. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/252\&quot; target=\&quot;_blank\&quot;&gt;[252]&lt;/a&gt; - The method `IMap.flush()` delegates map store exceptions to the caller instead of suppressing them. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/250\&quot; target=\&quot;_blank\&quot;&gt;[250]&lt;/a&gt; - Node appears to be in multiple clusters. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/247\&quot; target=\&quot;_blank\&quot;&gt;[247]&lt;/a&gt; - It would be nice to have Spring support in Runnable tasks. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/244\&quot; target=\&quot;_blank\&quot;&gt;[244]&lt;/a&gt; - MERGING and MERGED events should be fired during a split-brain merging process. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/241\&quot; target=\&quot;_blank\&quot;&gt;[241]&lt;/a&gt; - A problem occurs during a quick restart of master node. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/235\&quot; target=\&quot;_blank\&quot;&gt;[235]&lt;/a&gt; - Distributed `tryLock()` throws `NullPointerException` from lite member. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/233\&quot; target=\&quot;_blank\&quot;&gt;[233]&lt;/a&gt; - Using domain instead of IP address is problematic. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/230\&quot; target=\&quot;_blank\&quot;&gt;[230]&lt;/a&gt; - The method `MultiMap.lock()` blocks forever. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/228\&quot; target=\&quot;_blank\&quot;&gt;[228]&lt;/a&gt; - `SimpleMapTest` uses deprecated method `Hazelcast.getLoggingService()` and annoys WebLogic 12. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/227\&quot; target=\&quot;_blank\&quot;&gt;[227]&lt;/a&gt; - `ItemEvent` should have a `getMember` method to return the member that offered/polled an item. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/226\&quot; target=\&quot;_blank\&quot;&gt;[226]&lt;/a&gt; - The consumers do `queue.take()` and block until something is put on the queue. In Hazelcast 2.1.2, this was fine, but in 2.2, it causes a massive amount of WARN-level log spam. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/225\&quot; target=\&quot;_blank\&quot;&gt;[225]&lt;/a&gt; - The method `MultiMap.put()` is inconsistent when the key is locked by another node/thread. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/223\&quot; target=\&quot;_blank\&quot;&gt;[223]&lt;/a&gt; - FAILED event should be fired when migration fails for some reason. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/222\&quot; target=\&quot;_blank\&quot;&gt;[222]&lt;/a&gt; - `Runtime` exception is thrown when accessing to queue after client restarted. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/220\&quot; target=\&quot;_blank\&quot;&gt;[220]&lt;/a&gt; - Using the client, once it tries to access the cache while the cache is unavailable, the client cannot be used anymore after the server cache becomes available. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/218\&quot; target=\&quot;_blank\&quot;&gt;[218]&lt;/a&gt; - The methods `DistributedTask.get()` and `MultiTask.get()` throw `OperationTimeoutException`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/217\&quot; target=\&quot;_blank\&quot;&gt;[217]&lt;/a&gt; - There are a couple of classes that do not implement `toString`, that makes the `Config.toString` message incomplete. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/209\&quot; target=\&quot;_blank\&quot;&gt;[209]&lt;/a&gt; - Hazelcast IMap ignores the size capacity. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/188\&quot; target=\&quot;_blank\&quot;&gt;[188]&lt;/a&gt; - Hazelcast resource adapter package (version 2.1.2) does not deploy on JBoss 7.1.1. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/182\&quot; target=\&quot;_blank\&quot;&gt;[182]&lt;/a&gt;  "
});



documentTitles["2-2.html#22"] = "2.2";
index.add({
    url: "2-2.html#22",
    title: "2.2",
    body: "# 2.2  This section lists the new features, enhancements and fixed issues for 2.2 release.  "
});

documentTitles["2-2.html#new-features-and-changes"] = "New Features and Changes";
index.add({
    url: "2-2.html#new-features-and-changes",
    title: "New Features and Changes",
    body: "### New Features and Changes  The following are the new features and changes introduced with 2.2 release.  - Improved redo logs and added maximum call/operation timeout. - Improved domain name handling; Hazelcast will use defined addresses/domain-names in TCP-IP Config as they are, without resolving an IP address. - Added Cluster Health Check to Management Center application.  "
});

documentTitles["2-2.html#fixes"] = "Fixes";
index.add({
    url: "2-2.html#fixes",
    title: "Fixes",
    body: "### Fixes   The following are the fixed issues and enhancements for 2.2 release.  - The Hazelcast manual show a default config for WAN replication that includes the config item  `&lt;replication-impl&gt;com.hazelcast.impl.wan.WanNoDelayReplication&lt;/replication-impl&gt;`. This item appears to be used for configuring WAN replication implementation to be used. This item is not being used at all. Instead the replication implementation is hard coded in `WanReplicationService.java`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/152\&quot; target=\&quot;_blank\&quot;&gt;[152]&lt;/a&gt; - It would be nice to have possibilities to instantiate native client from `java.util.Properties` and/or from classpath-located configuration file. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/93\&quot; target=\&quot;_blank\&quot;&gt;[93]&lt;/a&gt; - The method `ILock.isLocked()` should have the ability to implement a spin lock / wait for a lock release to perform non-blocking code. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/39\&quot; target=\&quot;_blank\&quot;&gt;[39]&lt;/a&gt;  "
});



documentTitles["2-1-3.html#213"] = "2.1.3";
index.add({
    url: "2-1-3.html#213",
    title: "2.1.3",
    body: "# 2.1.3   The following are the fixed issues and enhancements for 2.1.3 release.  - Hazelcast IList evicts the items using the default map TTL. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/196\&quot; target=\&quot;_blank\&quot;&gt;[196]&lt;/a&gt; - Nodes with EC2 auto-discovery do not rejoin the cluster after a network outage. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/195\&quot; target=\&quot;_blank\&quot;&gt;[195]&lt;/a&gt; - The method `remove()` cannot be called on a Hazelcast Set iterator. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/189\&quot; target=\&quot;_blank\&quot;&gt;[189]&lt;/a&gt; - Topic does not receive messages when using Spring injection. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/186\&quot; target=\&quot;_blank\&quot;&gt;[186]&lt;/a&gt; - The method `IMap.set()` should not load data from map store. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/185\&quot; target=\&quot;_blank\&quot;&gt;[185]&lt;/a&gt; - `EntryListener` for native clients receives duplicate events. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/183\&quot; target=\&quot;_blank\&quot;&gt;[183]&lt;/a&gt; - Listeners do not work when used with locks and `remove`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/258\&quot; target=\&quot;_blank\&quot;&gt;[196]&lt;/a&gt; - The package `hazelcast-spring` dependencies on Hibernate and MongoDB should be optional. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/179\&quot; target=\&quot;_blank\&quot;&gt;[179]&lt;/a&gt; - Backup entry count is smaller than the owned entries. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/177\&quot; target=\&quot;_blank\&quot;&gt;[177]&lt;/a&gt; - Queries on enum indexed types return an empty result set. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/176\&quot; target=\&quot;_blank\&quot;&gt;[176]&lt;/a&gt; "
});



documentTitles["2-1-2.html#212"] = "2.1.2";
index.add({
    url: "2-1-2.html#212",
    title: "2.1.2",
    body: "# 2.1.2   The following are the fixed issues and enhancements for 2.1.2 release.  - The method `containsKey()` does not work on a single node with the default near cache configuration. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/174\&quot; target=\&quot;_blank\&quot;&gt;[174]&lt;/a&gt; - The method Transactional `IMap.get(key)` causes the key to be added to map. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/161\&quot; target=\&quot;_blank\&quot;&gt;[161]&lt;/a&gt;  "
});



documentTitles["2-1-1.html#211"] = "2.1.1";
index.add({
    url: "2-1-1.html#211",
    title: "2.1.1",
    body: "# 2.1.1   The following are the fixed issues and enhancements for 2.1.1 release.  - Item listener does not work when using client. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/158\&quot; target=\&quot;_blank\&quot;&gt;[158]&lt;/a&gt; - The method `IMap.remove(key)` returns incorrect object. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/149\&quot; target=\&quot;_blank\&quot;&gt;[149]&lt;/a&gt; - Map eviction policies are not documented. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/148\&quot; target=\&quot;_blank\&quot;&gt;[148]&lt;/a&gt; - When calling the method `IQueue.remove(object)`, the item listener added for that queue is not invoked. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/146\&quot; target=\&quot;_blank\&quot;&gt;[146]&lt;/a&gt; - List is not keeping the order in transactional context. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/73\&quot; target=\&quot;_blank\&quot;&gt;[73]&lt;/a&gt;  "
});



documentTitles["2-1.html#21"] = "2.1";
index.add({
    url: "2-1.html#21",
    title: "2.1",
    body: "# 2.1  This section lists the new features, enhancements and fixed issues for 2.1 release.  "
});

documentTitles["2-1.html#new-features-and-changes"] = "New Features and Changes";
index.add({
    url: "2-1.html#new-features-and-changes",
    title: "New Features and Changes",
    body: "### New Features and Changes  The following are the new features and changes introduced with 2.1 release.  - Hazelcast now supports IPv6 addresses seamlessly. - Added async backup support. - Hazelcast now can be used as Spring Cache provider. - Spring Dependency Injection support: Hazelcast can apply bean properties or to apply factory callbacks such as ApplicationContextAware, BeanNameAware or to apply bean post-processing such as InitializingBean, @PostConstruct like annotations while using Hazelcast distributed ExecutorService or DistributedTasks or more generally any Hazelcast managed object. - Added persistence support with Spring-Data MongoDB and JPA integration. - `Member.getUuid()` now will return UUID for node. - Improved session clustering configuration.  "
});

documentTitles["2-1.html#fixes"] = "Fixes";
index.add({
    url: "2-1.html#fixes",
    title: "Fixes",
    body: "### Fixes   The following are the fixed issues and enhancements for 2.1 release.  - Hazelcast client breaks the lifecycle listeners. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/130\&quot; target=\&quot;_blank\&quot;&gt;[130]&lt;/a&gt; - The Spring bean attributes `lazy-init` and `scope` should be added. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/118\&quot; target=\&quot;_blank\&quot;&gt;[118]&lt;/a&gt; - Spring configuration namespace is missing `lock`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/116\&quot; target=\&quot;_blank\&quot;&gt;[116]&lt;/a&gt; - `MaxSizeHeapPolicy` issue causing improper evictions and freezes. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/110\&quot; target=\&quot;_blank\&quot;&gt;[110]&lt;/a&gt; - `NullPointerException` is thrown by the method `tx.commit()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/108\&quot; target=\&quot;_blank\&quot;&gt;[108]&lt;/a&gt; - Hazelcast client does not shutdown properly if no connection can be established. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/101\&quot; target=\&quot;_blank\&quot;&gt;[101]&lt;/a&gt; - It would be nice to have \&quot;semi-asynchronous\&quot; replication for Hazelcast. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/92\&quot; target=\&quot;_blank\&quot;&gt;[92]&lt;/a&gt;  "
});



documentTitles["2-0-4.html#204"] = "2.0.4";
index.add({
    url: "2-0-4.html#204",
    title: "2.0.4",
    body: "# 2.0.4   The following are the fixed issues and enhancements for 2.0.4 release.  - `NullPointerException` is thrown by the method `AbstractRecord.getLockCount()`. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/166\&quot; target=\&quot;_blank\&quot;&gt;[166]&lt;/a&gt; - There are \&quot;Connection refused\&quot; in Hazelcast 2.0.3. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/140\&quot; target=\&quot;_blank\&quot;&gt;[140]&lt;/a&gt; - Predicate value on the date field should not be converted from a String by the method `getRealObject()`.&lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/135\&quot; target=\&quot;_blank\&quot;&gt;[135]&lt;/a&gt; - Some IMap removed/evicted entries will go back when one cluster node crashes. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/132\&quot; target=\&quot;_blank\&quot;&gt;[132]&lt;/a&gt; - `Predicates.GreaterLesserPredicate`'s `doApply` operation is broken. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/131\&quot; target=\&quot;_blank\&quot;&gt;[131]&lt;/a&gt; - Incorrect selection by predicate with comparison of non-numerical fields and indexing problems. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/98\&quot; target=\&quot;_blank\&quot;&gt;[98]&lt;/a&gt; - Evicted/deleted entries should not be stored to the map store. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/96\&quot; target=\&quot;_blank\&quot;&gt;[96]&lt;/a&gt;  "
});



documentTitles["2-0-3.html#203"] = "2.0.3";
index.add({
    url: "2-0-3.html#203",
    title: "2.0.3",
    body: "# 2.0.3   The following are the fixed issues and enhancements for 2.0.3 release.  - Increasing amount of stuck Hazelcast threads in weblogic; in a clustered environment and also when running a single instance. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/160\&quot; target=\&quot;_blank\&quot;&gt;[160]&lt;/a&gt; - Hyphens in the group names confuse the Management Center. It treats the group name as two separate tokens. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/128\&quot; target=\&quot;_blank\&quot;&gt;[128]&lt;/a&gt; - Split-brain merge handling causes the locks never to be acquired again. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/127\&quot; target=\&quot;_blank\&quot;&gt;[127]&lt;/a&gt; - `ConfigXmlGenerator` does not handle the TTL correctly when multicast joining mechanism is used. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/127\&quot; target=\&quot;_blank\&quot;&gt;[127]&lt;/a&gt; - Data is lost in a map when adding a key the second time after a new member joins the cluster. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/117\&quot; target=\&quot;_blank\&quot;&gt;[117]&lt;/a&gt; - Listeners are not called when a queue is changed within a transaction. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/114\&quot; target=\&quot;_blank\&quot;&gt;[114]&lt;/a&gt; - Programmatic session destruction does not lead to the destruction of the clustered session. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/104\&quot; target=\&quot;_blank\&quot;&gt;[104]&lt;/a&gt; - The name for `hazelcast.sessionId` should be configurable. &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/103\&quot; target=\&quot;_blank\&quot;&gt;[103]&lt;/a&gt; - There is an issue in concurrent `queue.take()` and `txn.rollback()`.&lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/99\&quot; target=\&quot;_blank\&quot;&gt;[99]&lt;/a&gt; "
});



documentTitles["2-0.html#20"] = "2.0";
index.add({
    url: "2-0.html#20",
    title: "2.0",
    body: "# 2.0  This section lists the new features, enhancements and fixed issues for 2.0 release.  "
});

documentTitles["2-0.html#new-features-and-changes"] = "New Features and Changes";
index.add({
    url: "2-0.html#new-features-and-changes",
    title: "New Features and Changes",
    body: "### New Features and Changes  The following are the new features and changes introduced with 2.0 release.  - New Elastic Memory(Enterprise Edition Only): By default, Hazelcast stores your distributed data (map entries, queue items) into Java heap which is subject to garbage collection. As your heap gets bigger, garbage collection might cause your application to pause tens of seconds, badly effecting your application performance and response times. Elastic Memory is Hazelcast with off-heap memory storage to avoid GC pauses. Even if you have terabytes of cache in-memory with lots of updates, GC will have almost no effect; resulting in more predictable latency and throughput. - Security Framework(Enterprise Edition Only): Hazelcast Security is JAAS based pluggable security framework which can be used to authenticate both cluster members and clients and do access control checks on client operations. With the security framework, take control of who can be part of the cluster or connect as client and which operations are allowed or not. - Native C# Client(Enterprise Edition Only): Just like our Native Java Client, it supports all map, multimap, queue, topic operations including listeners and queries. - Distributed Backups: Data owned by a member will be evenly backed up by all the other members. In other word, every member takes equal responsibility to backup every other node. This leads to better memory usage and less influence in the cluster when you add/remove nodes. The new backup system makes it possible to form backup-groups so that you can have backups and owners fall into different groups. - Parallel IO: Number of socket selector threads can be configured. You can have more IO threads, if you have good number of CPU/cores and high-throughput network. - Connection Management: Hazelcast 2.0 is more tolerant to connection failures. On connection failure it tries to repair it before declaring the member as dead. So now it is ok to have short socket disconnections… No problem if your virtual server migrates to a new host. - Listeners such as migration, membership and map indexes can be added with configuration. - New Event Objects: Event Listeners for Queue/List/Set/Topic were delivering the item itself on event methods. That’s why the items had to be deserialized by Hazelcast Threads before invoking the listeners. Sometimes this was causing class loader problems too. With 2.0, we have introduced new event containers for Queue/List/Set and Topic just like Map has EntryEvent. The new listeners now receive ItemEvent and Message objects respectively. The actual items are deserialized only if you call the appropriate get method on the event objects. This is where we brake the compatibility with the older versions of Hazelcast. - ClientConfig API: We had too many of factory methods to instantiate a HazelcastClient. Now all we need `isHazelcastClient.newHazelcastClient(ClientConfig)`. - SSL communication support among cluster nodes. - Distributed MultiMap value collection can be either List or Set. - SuperClient is renamed to LiteMember to avoid confusion. Be careful! It is a member, not a client. - New `IMap.set(key, value, ttl, TimeUnit)` implementation, which is optimized `put(key, value)` operation as `Set` does not return the old value. - `HazelcastInstance.getLifecycleService().kill()` will forcefully kill the node. Useful for testing. - `forceUnlock`, to unlock the locked entry from any node and any thread regardless of the owner. - Enum type query support: As an example; `new SqlPredicate (“level = Level.WARNING”)`  "
});

documentTitles["2-0.html#fixes"] = "Fixes";
index.add({
    url: "2-0.html#fixes",
    title: "Fixes",
    body: "### Fixes   The following are the fixed issues and enhancements for 2.0 release.  - &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/459\&quot; target=\&quot;_blank\&quot;&gt;[459]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/471\&quot; target=\&quot;_blank\&quot;&gt;[471]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/567\&quot; target=\&quot;_blank\&quot;&gt;[567]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/574\&quot; target=\&quot;_blank\&quot;&gt;[574]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/582\&quot; target=\&quot;_blank\&quot;&gt;[582]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/629\&quot; target=\&quot;_blank\&quot;&gt;[629]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/632\&quot; target=\&quot;_blank\&quot;&gt;[632]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/646\&quot; target=\&quot;_blank\&quot;&gt;[646]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/666\&quot; target=\&quot;_blank\&quot;&gt;[666]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/686\&quot; target=\&quot;_blank\&quot;&gt;[686]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/669\&quot; target=\&quot;_blank\&quot;&gt;[669]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/690\&quot; target=\&quot;_blank\&quot;&gt;[690]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/692\&quot; target=\&quot;_blank\&quot;&gt;[692]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/693\&quot; target=\&quot;_blank\&quot;&gt;[693]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/695\&quot; target=\&quot;_blank\&quot;&gt;[695]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/698\&quot; target=\&quot;_blank\&quot;&gt;[698]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/705\&quot; target=\&quot;_blank\&quot;&gt;[705]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/708\&quot; target=\&quot;_blank\&quot;&gt;[708]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/711\&quot; target=\&quot;_blank\&quot;&gt;[711]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/714\&quot; target=\&quot;_blank\&quot;&gt;[714]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/715\&quot; target=\&quot;_blank\&quot;&gt;[715]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/719\&quot; target=\&quot;_blank\&quot;&gt;[719]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/721\&quot; target=\&quot;_blank\&quot;&gt;[721]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/722\&quot; target=\&quot;_blank\&quot;&gt;[722]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/727\&quot; target=\&quot;_blank\&quot;&gt;[727]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/728\&quot; target=\&quot;_blank\&quot;&gt;[728]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/729\&quot; target=\&quot;_blank\&quot;&gt;[729]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/730\&quot; target=\&quot;_blank\&quot;&gt;[730]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/731\&quot; target=\&quot;_blank\&quot;&gt;[731]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/732\&quot; target=\&quot;_blank\&quot;&gt;[732]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/733\&quot; target=\&quot;_blank\&quot;&gt;[733]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/735\&quot; target=\&quot;_blank\&quot;&gt;[735]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/738\&quot; target=\&quot;_blank\&quot;&gt;[738]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/739\&quot; target=\&quot;_blank\&quot;&gt;[739]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/740\&quot; target=\&quot;_blank\&quot;&gt;[740]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/741\&quot; target=\&quot;_blank\&quot;&gt;[741]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/742\&quot; target=\&quot;_blank\&quot;&gt;[742]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/747\&quot; target=\&quot;_blank\&quot;&gt;[747]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/751\&quot; target=\&quot;_blank\&quot;&gt;[751]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/754\&quot; target=\&quot;_blank\&quot;&gt;[752]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/758\&quot; target=\&quot;_blank\&quot;&gt;[758]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/759\&quot; target=\&quot;_blank\&quot;&gt;[759]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/760\&quot; target=\&quot;_blank\&quot;&gt;[760]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/761\&quot; target=\&quot;_blank\&quot;&gt;[761]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/765\&quot; target=\&quot;_blank\&quot;&gt;[765]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/767\&quot; target=\&quot;_blank\&quot;&gt;[767]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/770\&quot; target=\&quot;_blank\&quot;&gt;[770]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/773\&quot; target=\&quot;_blank\&quot;&gt;[773]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/779\&quot; target=\&quot;_blank\&quot;&gt;[779]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/781\&quot; target=\&quot;_blank\&quot;&gt;[781]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/782\&quot; target=\&quot;_blank\&quot;&gt;[782]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/783\&quot; target=\&quot;_blank\&quot;&gt;[783]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/787\&quot; target=\&quot;_blank\&quot;&gt;[787]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/795\&quot; target=\&quot;_blank\&quot;&gt;[795]&lt;/a&gt;, &lt;a href=\&quot;https://github.com/hazelcast/hazelcast/issues/796\&quot; target=\&quot;_blank\&quot;&gt;[796]&lt;/a&gt;  "
});



documentTitles["1-9-4-9.html#1949"] = "1.9.4.9";
index.add({
    url: "1-9-4-9.html#1949",
    title: "1.9.4.9",
    body: "# 1.9.4.9  This section lists the new features, enhancements and fixed issues for the releases starting from 1.9.4.9 to 1.0.  - Added WAN Replication (synchronization of separate active clusters). - Added Data Affinity (co-location of related entries) feature. - Added EC2 Auto Discovery for your Hazelcast cluster running on Amazon EC2 platform. - Implemented Distributed CountDownLatch. - Implemented Distributed Semaphore implementation. - Hazelcast distribution now contains HTML and PDF documentation besides Javadoc. - Better TCP/IP and multicast join support. Handling more edge cases like multiple nodes starting at the same time. - Memcache protocol: Better integration between Java and Memcache clients. Put from memcache, get from Java client. - Monitoring Tool is removed from the project. - Re-implementation of distributed queue: 	- Configurable backup count and synchronous backup. 	- Persistence support based on backing MapStore. 	- Auto-recovery from backing MapStore on startup. - Re-implementation of distributed list supporting index based operations. - Optimized `IMap.putAll` for much faster bulk writes. - Added `IMap.getAll` for bulk reads which is calling `MapLoader.loadAll` if necessary. - Added `IMap.tryLockAndGet` and `IMap.putAndUnlock` methods. - Added `IMap.putTransient` API for storing only in-memory. - Added `IMap.addLocalEntryListener()` for listening locally owned entry events. - Added `IMap.flush()` for flushing the dirty entries into MapStore. - Added `MapLoader.getAllKeys` API for auto-pre-populating the map when cluster starts. - Support for minimum initial cluster size to enable equally partitioned start. - Introduced graceful shutdown. - Faster dead-member detection. - Memcache interface support. Memcache clients written in any language can access Hazelcast cluster. - RESTful access support, e.g. http://&lt;ip&gt;:5701/hazelcast/rest/maps/mymap/key1. - Added split-brain (network partitioning) handling. - Added LifecycleService API to restart, pause Hazelcast instances and listen for the lifecycle events. - Added asynchronous put and get support for IMap via `IMap.asyncPut()` and `IMap.asyncGet()`. - Added AtomicNumber API; distributed implementation of `java.util.concurrent.atomic.AtomicLong`. - Significant performance gain for multi-core servers. Higher CPU utilization and lower latency. - Reduced the cost of map entries by 50 percent. - Better thread management. No more idle threads. - Added queue statistics API and the queue statistics panel on the Monitoring Tool. - Monitoring Tool enhancements. More responsive and robust. - Hazelcast distribution now contains `hazelcast-all-&lt;version&gt;.jar` to simplify the JAR dependency. - Sorted index optimization for map queries. - Added Hazelcast Cluster Monitoring Tool. - Added Partition API. Partition and key owner, migration listeners. - Added `IMap.lockMap()` method. - Added Multicast and TCP/IP join feature. Try multicast first, if not found, try TCP/IP. - Added `Hazelcast.getExecutorService(name)` API. You can have separate named executor services. Do not let your big tasks blocking your small ones. - Added `Logging` API. Build your own logging. or simply use Log4j or get logs as LogEvents. - Added `MapStatistics` API. Get statistics for your Map operations and entries. - Hazelcast client now automatically updates the member list. There is no need to pass the list to all members. - Added the ability to start the cluster members evenly partitioned. Hence, no migration. - Added Java clients for accessing the cluster remotely. - Added Distributed Query for maps. Both Criteria API and SQL are supported. - Added near cache feature for distributed maps. - Added TTL (time-to-live) property for each individual map entry. - Improved the put operation: `IMap.put(key,value, ttl, timeunit)`. - Introduced the method `IMap.putIfAbsent(key,value, ttl, timeunit)`. - Now, you can have multiple Hazelcast members on the same JVM. Introduced `HazelcastInstance` API. - Better API based configuration support. - Smoother data migration enabling better response times during joins. - Persistence via Loader/Store interface for distributed map. - Added Socket level encryption feature. Both symmetric and asymmetric encryption are supported. - Added support for JMX. - Added support for Hibernate second level cache provider. - Added instance events for getting notified when a data structure instance (map, queue, topic, etc.) is created or destroyed. - Added eviction listener: `EntryListener.entryEvicted(EntryEvent)`. - Hazelcast is now fully \&quot;maven\&quot;ized. - Added support for synchronous backups and configurable backup-count for maps. - Added eviction support: Timed eviction for queues. LRU, LFU and time based eviction for maps. - Added support for statistics/history for entries: create/update time, number of hits, cost. - Implemented MultiMap structure. Similar to `google-collections` and `apache-common-collections`, but distributed and thread-safe. - Now, you can `destroy()` the data structures when not needed anymore. - Now, you can shutdown the local member using `Hazelcast.shutdown()`. - Now, you can get the list of all data structure instances via `Hazelcast.getInstances()`. - Full implementation of `java.util.concurrent.BlockingQueue`. Now, queues can have configurable capacity limits. - Introduced Super Clients (a.k.a LiteMember): Members with no storage. If `-Dhazelcast.super.client=true` JVM parameter is set, that JVM will join the cluster as a 'super client' which will not be a 'data partition' (no data on that node) but will have super fast access to the cluster just like any regular member does. - Added HTTP Session sharing support for Hazelcast Web Manager. Different web applications can share the same sessions. - Added the ability to separate clusters by creating groups. - Added `java.util.logging` support. - Added the support for adding, removing and updating events for queue, map, set and list data structures. - Introduced Distributed Topic for pub/sub messaging. - Added integration with J2EE transactions via JCA complaint resource adapter. - Added `ExecutionCallback` interface for distributed tasks. - Introduced cluster-wide unique ID generator. - Implemented Transactional Distributed Queue, Map, Set and List. - Implemented Distributed Executor Service. - Added support for multi member executions. - Implemented key based execution routing. - Added task cancellation support. - Implemented Session Clustering with Hazelcast Webapp Manager. - Added full TCP/IP clustering support. - Introduced distributed implementation of `java.util.{Queue,Map,Set,List}`. - Introduced distributed implementation of `java.util.concurrency.Lock`. - Added support for retrieving cluster membership events. - 1000+ commits 100+ bug fixes and several other enhancements."
});


